
I2C_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007448  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08007618  08007618  00017618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076b0  080076b0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080076b0  080076b0  000176b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076b8  080076b8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076b8  080076b8  000176b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076bc  080076bc  000176bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080076c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040c4  20000010  080076d0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040d4  080076d0  000240d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017498  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000310a  00000000  00000000  000374d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  0003a5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001200  00000000  00000000  0003b918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000230eb  00000000  00000000  0003cb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160bc  00000000  00000000  0005fc03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9130  00000000  00000000  00075cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014edef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050a8  00000000  00000000  0014ee44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007600 	.word	0x08007600

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08007600 	.word	0x08007600

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetIdleTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetIdleTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	2000002c 	.word	0x2000002c
 8000538:	20000080 	.word	0x20000080

0800053c <ResetI2C>:
volatile uint8_t rx_buf;
uint8_t tx_buf=0;

HAL_StatusTypeDef sig = 0x0;
void ResetI2C(I2C_HandleTypeDef* rev_i2c)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	HAL_I2C_DeInit(rev_i2c);
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f001 f9d3 	bl	80018f0 <HAL_I2C_DeInit>
	HAL_I2C_Init(rev_i2c);
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f001 f88c 	bl	8001668 <HAL_I2C_Init>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <main>:
void IRTask_Start(void const * argument);
void I2CSendTask_Start(void const * argument);


int main(void)
{
 8000558:	b5b0      	push	{r4, r5, r7, lr}
 800055a:	b098      	sub	sp, #96	; 0x60
 800055c:	af00      	add	r7, sp, #0

  HAL_Init();
 800055e:	f000 fc43 	bl	8000de8 <HAL_Init>


  SystemClock_Config();
 8000562:	f000 f85b 	bl	800061c <SystemClock_Config>


  MX_GPIO_Init();
 8000566:	f000 f94b 	bl	8000800 <MX_GPIO_Init>
  MX_I2C1_Init();
 800056a:	f000 f8c5 	bl	80006f8 <MX_I2C1_Init>
  MX_TIM1_Init();
 800056e:	f000 f8f1 	bl	8000754 <MX_TIM1_Init>

  osMutexDef(I2CMutex);
 8000572:	2300      	movs	r3, #0
 8000574:	65bb      	str	r3, [r7, #88]	; 0x58
 8000576:	2300      	movs	r3, #0
 8000578:	65fb      	str	r3, [r7, #92]	; 0x5c
  I2CMutexHandle = osMutexCreate(osMutex(I2CMutex));
 800057a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800057e:	4618      	mov	r0, r3
 8000580:	f004 fec7 	bl	8005312 <osMutexCreate>
 8000584:	4603      	mov	r3, r0
 8000586:	4a1e      	ldr	r2, [pc, #120]	; (8000600 <main+0xa8>)
 8000588:	6013      	str	r3, [r2, #0]


  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800058a:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <main+0xac>)
 800058c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000590:	461d      	mov	r5, r3
 8000592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000596:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800059a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800059e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f004 fe54 	bl	8005252 <osThreadCreate>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a16      	ldr	r2, [pc, #88]	; (8000608 <main+0xb0>)
 80005ae:	6013      	str	r3, [r2, #0]

  /* definition and creation of IrReadTask */
  osThreadDef(IrReadTask, IRTask_Start, osPriorityNormal, 0, 128);
 80005b0:	4b16      	ldr	r3, [pc, #88]	; (800060c <main+0xb4>)
 80005b2:	f107 0420 	add.w	r4, r7, #32
 80005b6:	461d      	mov	r5, r3
 80005b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IrReadTaskHandle = osThreadCreate(osThread(IrReadTask), NULL);
 80005c4:	f107 0320 	add.w	r3, r7, #32
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f004 fe41 	bl	8005252 <osThreadCreate>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a0f      	ldr	r2, [pc, #60]	; (8000610 <main+0xb8>)
 80005d4:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2CSendTask */
  osThreadDef(I2CSendTask, I2CSendTask_Start, osPriorityNormal, 0, 128);
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <main+0xbc>)
 80005d8:	1d3c      	adds	r4, r7, #4
 80005da:	461d      	mov	r5, r3
 80005dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  I2CSendTaskHandle = osThreadCreate(osThread(I2CSendTask), NULL);
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f004 fe30 	bl	8005252 <osThreadCreate>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a08      	ldr	r2, [pc, #32]	; (8000618 <main+0xc0>)
 80005f6:	6013      	str	r3, [r2, #0]



  /* Start scheduler */
  osKernelStart();
 80005f8:	f004 fe24 	bl	8005244 <osKernelStart>


  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0xa4>
 80005fe:	bf00      	nop
 8000600:	20004084 	.word	0x20004084
 8000604:	0800763c 	.word	0x0800763c
 8000608:	20003fdc 	.word	0x20003fdc
 800060c:	08007658 	.word	0x08007658
 8000610:	20003fd8 	.word	0x20003fd8
 8000614:	08007674 	.word	0x08007674
 8000618:	20004034 	.word	0x20004034

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	2234      	movs	r2, #52	; 0x34
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f006 ffe0 	bl	80075f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <SystemClock_Config+0xd4>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a29      	ldr	r2, [pc, #164]	; (80006f0 <SystemClock_Config+0xd4>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <SystemClock_Config+0xd4>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800065c:	2300      	movs	r3, #0
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	4b24      	ldr	r3, [pc, #144]	; (80006f4 <SystemClock_Config+0xd8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000668:	4a22      	ldr	r2, [pc, #136]	; (80006f4 <SystemClock_Config+0xd8>)
 800066a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b20      	ldr	r3, [pc, #128]	; (80006f4 <SystemClock_Config+0xd8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	2302      	movs	r3, #2
 800067e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	2310      	movs	r3, #16
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000688:	2302      	movs	r3, #2
 800068a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068c:	2300      	movs	r3, #0
 800068e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000690:	2310      	movs	r3, #16
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000694:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000698:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800069a:	2304      	movs	r3, #4
 800069c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800069e:	2302      	movs	r3, #2
 80006a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 fc86 	bl	8003fbc <HAL_RCC_OscConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006b6:	f000 f9c0 	bl	8000a3a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ba:	230f      	movs	r3, #15
 80006bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006be:	2302      	movs	r3, #2
 80006c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2102      	movs	r1, #2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 f986 	bl	80039e8 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006e2:	f000 f9aa 	bl	8000a3a <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3750      	adds	r7, #80	; 0x50
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0


  hi2c1.Instance = I2C1;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2C1_Init+0x50>)
 80006fe:	4a13      	ldr	r2, [pc, #76]	; (800074c <MX_I2C1_Init+0x54>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_I2C1_Init+0x50>)
 8000704:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_I2C1_Init+0x58>)
 8000706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_I2C1_Init+0x50>)
 8000710:	2220      	movs	r2, #32
 8000712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_I2C1_Init+0x50>)
 8000716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800071a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_I2C1_Init+0x50>)
 8000736:	f000 ff97 	bl	8001668 <HAL_I2C_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000740:	f000 f97b 	bl	8000a3a <Error_Handler>
  }


}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20003fe0 	.word	0x20003fe0
 800074c:	40005400 	.word	0x40005400
 8000750:	000186a0 	.word	0x000186a0

08000754 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000764:	463b      	mov	r3, r7
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000770:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <MX_TIM1_Init+0xa4>)
 8000772:	4a22      	ldr	r2, [pc, #136]	; (80007fc <MX_TIM1_Init+0xa8>)
 8000774:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8000776:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <MX_TIM1_Init+0xa4>)
 8000778:	2254      	movs	r2, #84	; 0x54
 800077a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077c:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <MX_TIM1_Init+0xa4>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000782:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <MX_TIM1_Init+0xa4>)
 8000784:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000788:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078a:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <MX_TIM1_Init+0xa4>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000790:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <MX_TIM1_Init+0xa4>)
 8000792:	2200      	movs	r2, #0
 8000794:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000796:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <MX_TIM1_Init+0xa4>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800079c:	4816      	ldr	r0, [pc, #88]	; (80007f8 <MX_TIM1_Init+0xa4>)
 800079e:	f003 ff75 	bl	800468c <HAL_TIM_IC_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80007a8:	f000 f947 	bl	8000a3a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	4619      	mov	r1, r3
 80007ba:	480f      	ldr	r0, [pc, #60]	; (80007f8 <MX_TIM1_Init+0xa4>)
 80007bc:	f004 fc9a 	bl	80050f4 <HAL_TIMEx_MasterConfigSynchronization>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80007c6:	f000 f938 	bl	8000a3a <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007ce:	2301      	movs	r3, #1
 80007d0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007da:	463b      	mov	r3, r7
 80007dc:	2200      	movs	r2, #0
 80007de:	4619      	mov	r1, r3
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_TIM1_Init+0xa4>)
 80007e2:	f004 f9d3 	bl	8004b8c <HAL_TIM_IC_ConfigChannel>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80007ec:	f000 f925 	bl	8000a3a <Error_Handler>
  }


}
 80007f0:	bf00      	nop
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	2000403c 	.word	0x2000403c
 80007fc:	40010000 	.word	0x40010000

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	4b36      	ldr	r3, [pc, #216]	; (80008f4 <MX_GPIO_Init+0xf4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a35      	ldr	r2, [pc, #212]	; (80008f4 <MX_GPIO_Init+0xf4>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b33      	ldr	r3, [pc, #204]	; (80008f4 <MX_GPIO_Init+0xf4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	4b2f      	ldr	r3, [pc, #188]	; (80008f4 <MX_GPIO_Init+0xf4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a2e      	ldr	r2, [pc, #184]	; (80008f4 <MX_GPIO_Init+0xf4>)
 800083c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b2c      	ldr	r3, [pc, #176]	; (80008f4 <MX_GPIO_Init+0xf4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <MX_GPIO_Init+0xf4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a27      	ldr	r2, [pc, #156]	; (80008f4 <MX_GPIO_Init+0xf4>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b25      	ldr	r3, [pc, #148]	; (80008f4 <MX_GPIO_Init+0xf4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <MX_GPIO_Init+0xf4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a20      	ldr	r2, [pc, #128]	; (80008f4 <MX_GPIO_Init+0xf4>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b1e      	ldr	r3, [pc, #120]	; (80008f4 <MX_GPIO_Init+0xf4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 7100 	mov.w	r1, #512	; 0x200
 800088c:	481a      	ldr	r0, [pc, #104]	; (80008f8 <MX_GPIO_Init+0xf8>)
 800088e:	f000 fed1 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000892:	230c      	movs	r3, #12
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008a2:	2307      	movs	r3, #7
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	4812      	ldr	r0, [pc, #72]	; (80008f8 <MX_GPIO_Init+0xf8>)
 80008ae:	f000 fc21 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	480b      	ldr	r0, [pc, #44]	; (80008f8 <MX_GPIO_Init+0xf8>)
 80008cc:	f000 fc12 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <MX_GPIO_Init+0xf8>)
 80008e6:	f000 fc05 	bl	80010f4 <HAL_GPIO_Init>

}
 80008ea:	bf00      	nop
 80008ec:	3728      	adds	r7, #40	; 0x28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020000 	.word	0x40020000

080008fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000904:	2001      	movs	r0, #1
 8000906:	f004 fcf0 	bl	80052ea <osDelay>
 800090a:	e7fb      	b.n	8000904 <StartDefaultTask+0x8>

0800090c <IRTask_Start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IRTask_Start */
void IRTask_Start(void const * argument)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000914:	2100      	movs	r1, #0
 8000916:	4812      	ldr	r0, [pc, #72]	; (8000960 <IRTask_Start+0x54>)
 8000918:	f003 ff08 	bl	800472c <HAL_TIM_IC_Start_IT>
  for(;;)
  {
	  xSemaphoreTake(I2CMutexHandle,portMAX_DELAY);
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <IRTask_Start+0x58>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000924:	4618      	mov	r0, r3
 8000926:	f005 f845 	bl	80059b4 <xQueueSemaphoreTake>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 800092a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800092e:	480e      	ldr	r0, [pc, #56]	; (8000968 <IRTask_Start+0x5c>)
 8000930:	f000 fe68 	bl	8001604 <HAL_GPIO_ReadPin>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d003      	beq.n	8000942 <IRTask_Start+0x36>
	  {
		tx_buf=0;
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <IRTask_Start+0x60>)
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]
 8000940:	e002      	b.n	8000948 <IRTask_Start+0x3c>
	  }
	  else
	  {
		  tx_buf=1;
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <IRTask_Start+0x60>)
 8000944:	2201      	movs	r2, #1
 8000946:	701a      	strb	r2, [r3, #0]
	  }
	  xSemaphoreGive(I2CMutexHandle);
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <IRTask_Start+0x58>)
 800094a:	6818      	ldr	r0, [r3, #0]
 800094c:	2300      	movs	r3, #0
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	f004 ff31 	bl	80057b8 <xQueueGenericSend>
    osDelay(20);
 8000956:	2014      	movs	r0, #20
 8000958:	f004 fcc7 	bl	80052ea <osDelay>
	  xSemaphoreTake(I2CMutexHandle,portMAX_DELAY);
 800095c:	e7de      	b.n	800091c <IRTask_Start+0x10>
 800095e:	bf00      	nop
 8000960:	2000403c 	.word	0x2000403c
 8000964:	20004084 	.word	0x20004084
 8000968:	40020000 	.word	0x40020000
 800096c:	20000280 	.word	0x20000280

08000970 <I2CSendTask_Start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_I2CSendTask_Start */
void I2CSendTask_Start(void const * argument)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2CSendTask_Start */
  /* Infinite loop */
  for(;;)
  {
	if ((sig = HAL_I2C_Slave_Receive(&hi2c1, (uint8_t*)&rx_buf, TXBUFSIZE, 0xFFFFFFFF))!=HAL_OK)
 8000978:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800097c:	2201      	movs	r2, #1
 800097e:	4922      	ldr	r1, [pc, #136]	; (8000a08 <I2CSendTask_Start+0x98>)
 8000980:	4822      	ldr	r0, [pc, #136]	; (8000a0c <I2CSendTask_Start+0x9c>)
 8000982:	f001 f8fb 	bl	8001b7c <HAL_I2C_Slave_Receive>
 8000986:	4603      	mov	r3, r0
 8000988:	461a      	mov	r2, r3
 800098a:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <I2CSendTask_Start+0xa0>)
 800098c:	701a      	strb	r2, [r3, #0]
 800098e:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <I2CSendTask_Start+0xa0>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d002      	beq.n	800099c <I2CSendTask_Start+0x2c>
	{
		ResetI2C(&hi2c1);
 8000996:	481d      	ldr	r0, [pc, #116]	; (8000a0c <I2CSendTask_Start+0x9c>)
 8000998:	f7ff fdd0 	bl	800053c <ResetI2C>
	}
	if ((sig == HAL_OK))
 800099c:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <I2CSendTask_Start+0xa0>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d12d      	bne.n	8000a00 <I2CSendTask_Start+0x90>
	{
		if((sig = HAL_I2C_Slave_Transmit(&hi2c1, (uint8_t*)&tx_buf, TXBUFSIZE, 0x01))!=HAL_OK)
 80009a4:	2301      	movs	r3, #1
 80009a6:	2201      	movs	r2, #1
 80009a8:	491a      	ldr	r1, [pc, #104]	; (8000a14 <I2CSendTask_Start+0xa4>)
 80009aa:	4818      	ldr	r0, [pc, #96]	; (8000a0c <I2CSendTask_Start+0x9c>)
 80009ac:	f000 ffd0 	bl	8001950 <HAL_I2C_Slave_Transmit>
 80009b0:	4603      	mov	r3, r0
 80009b2:	461a      	mov	r2, r3
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <I2CSendTask_Start+0xa0>)
 80009b6:	701a      	strb	r2, [r3, #0]
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <I2CSendTask_Start+0xa0>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d003      	beq.n	80009c8 <I2CSendTask_Start+0x58>
		{
			ResetI2C(&hi2c1);
 80009c0:	4812      	ldr	r0, [pc, #72]	; (8000a0c <I2CSendTask_Start+0x9c>)
 80009c2:	f7ff fdbb 	bl	800053c <ResetI2C>
 80009c6:	e01b      	b.n	8000a00 <I2CSendTask_Start+0x90>
		}
		else if (rx_buf == 0x02)
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <I2CSendTask_Start+0x98>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d116      	bne.n	8000a00 <I2CSendTask_Start+0x90>
		{
			rx_buf = 0;
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <I2CSendTask_Start+0x98>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	701a      	strb	r2, [r3, #0]
			xSemaphoreTake(I2CMutexHandle,portMAX_DELAY);
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <I2CSendTask_Start+0xa8>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009e0:	4618      	mov	r0, r3
 80009e2:	f004 ffe7 	bl	80059b4 <xQueueSemaphoreTake>
			HAL_I2C_Slave_Transmit(&hi2c1, (uint8_t*)&tx_buf, TXBUFSIZE, 0x01);
 80009e6:	2301      	movs	r3, #1
 80009e8:	2201      	movs	r2, #1
 80009ea:	490a      	ldr	r1, [pc, #40]	; (8000a14 <I2CSendTask_Start+0xa4>)
 80009ec:	4807      	ldr	r0, [pc, #28]	; (8000a0c <I2CSendTask_Start+0x9c>)
 80009ee:	f000 ffaf 	bl	8001950 <HAL_I2C_Slave_Transmit>
			xSemaphoreGive(I2CMutexHandle);
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <I2CSendTask_Start+0xa8>)
 80009f4:	6818      	ldr	r0, [r3, #0]
 80009f6:	2300      	movs	r3, #0
 80009f8:	2200      	movs	r2, #0
 80009fa:	2100      	movs	r1, #0
 80009fc:	f004 fedc 	bl	80057b8 <xQueueGenericSend>
		}
	}
    osDelay(20);
 8000a00:	2014      	movs	r0, #20
 8000a02:	f004 fc72 	bl	80052ea <osDelay>
	if ((sig = HAL_I2C_Slave_Receive(&hi2c1, (uint8_t*)&rx_buf, TXBUFSIZE, 0xFFFFFFFF))!=HAL_OK)
 8000a06:	e7b7      	b.n	8000978 <I2CSendTask_Start+0x8>
 8000a08:	20004038 	.word	0x20004038
 8000a0c:	20003fe0 	.word	0x20003fe0
 8000a10:	20000281 	.word	0x20000281
 8000a14:	20000280 	.word	0x20000280
 8000a18:	20004084 	.word	0x20004084

08000a1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a2c:	d101      	bne.n	8000a32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a2e:	f000 f9fd 	bl	8000e2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3e:	b672      	cpsid	i
}
 8000a40:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <Error_Handler+0x8>

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_MspInit+0x54>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	4a11      	ldr	r2, [pc, #68]	; (8000a98 <HAL_MspInit+0x54>)
 8000a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a58:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <HAL_MspInit+0x54>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <HAL_MspInit+0x54>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <HAL_MspInit+0x54>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	6413      	str	r3, [r2, #64]	; 0x40
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <HAL_MspInit+0x54>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	210f      	movs	r1, #15
 8000a86:	f06f 0001 	mvn.w	r0, #1
 8000a8a:	f000 facb 	bl	8001024 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800

08000a9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a21      	ldr	r2, [pc, #132]	; (8000b40 <HAL_I2C_MspInit+0xa4>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d13c      	bne.n	8000b38 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <HAL_I2C_MspInit+0xa8>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a1f      	ldr	r2, [pc, #124]	; (8000b44 <HAL_I2C_MspInit+0xa8>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <HAL_I2C_MspInit+0xa8>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ada:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae0:	2312      	movs	r3, #18
 8000ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aec:	2304      	movs	r3, #4
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	4814      	ldr	r0, [pc, #80]	; (8000b48 <HAL_I2C_MspInit+0xac>)
 8000af8:	f000 fafc 	bl	80010f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_I2C_MspInit+0xa8>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <HAL_I2C_MspInit+0xa8>)
 8000b06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0c:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <HAL_I2C_MspInit+0xa8>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2105      	movs	r1, #5
 8000b1c:	201f      	movs	r0, #31
 8000b1e:	f000 fa81 	bl	8001024 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b22:	201f      	movs	r0, #31
 8000b24:	f000 fa9a 	bl	800105c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2105      	movs	r1, #5
 8000b2c:	2020      	movs	r0, #32
 8000b2e:	f000 fa79 	bl	8001024 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b32:	2020      	movs	r0, #32
 8000b34:	f000 fa92 	bl	800105c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40005400 	.word	0x40005400
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020400 	.word	0x40020400

08000b4c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <HAL_I2C_MspDeInit+0x48>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d115      	bne.n	8000b8a <HAL_I2C_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_I2C_MspDeInit+0x4c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <HAL_I2C_MspDeInit+0x4c>)
 8000b64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8000b6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b6e:	480b      	ldr	r0, [pc, #44]	; (8000b9c <HAL_I2C_MspDeInit+0x50>)
 8000b70:	f000 fc54 	bl	800141c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8000b74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b78:	4808      	ldr	r0, [pc, #32]	; (8000b9c <HAL_I2C_MspDeInit+0x50>)
 8000b7a:	f000 fc4f 	bl	800141c <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8000b7e:	201f      	movs	r0, #31
 8000b80:	f000 fa7a 	bl	8001078 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8000b84:	2020      	movs	r0, #32
 8000b86:	f000 fa77 	bl	8001078 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40005400 	.word	0x40005400
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020400 	.word	0x40020400

08000ba0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a1d      	ldr	r2, [pc, #116]	; (8000c34 <HAL_TIM_IC_MspInit+0x94>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d134      	bne.n	8000c2c <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <HAL_TIM_IC_MspInit+0x98>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	4a1b      	ldr	r2, [pc, #108]	; (8000c38 <HAL_TIM_IC_MspInit+0x98>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <HAL_TIM_IC_MspInit+0x98>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <HAL_TIM_IC_MspInit+0x98>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <HAL_TIM_IC_MspInit+0x98>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <HAL_TIM_IC_MspInit+0x98>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	4809      	ldr	r0, [pc, #36]	; (8000c3c <HAL_TIM_IC_MspInit+0x9c>)
 8000c18:	f000 fa6c 	bl	80010f4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2105      	movs	r1, #5
 8000c20:	201b      	movs	r0, #27
 8000c22:	f000 f9ff 	bl	8001024 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000c26:	201b      	movs	r0, #27
 8000c28:	f000 fa18 	bl	800105c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c2c:	bf00      	nop
 8000c2e:	3728      	adds	r7, #40	; 0x28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40010000 	.word	0x40010000
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020000 	.word	0x40020000

08000c40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	; 0x30
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	201c      	movs	r0, #28
 8000c56:	f000 f9e5 	bl	8001024 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c5a:	201c      	movs	r0, #28
 8000c5c:	f000 f9fe 	bl	800105c <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <HAL_InitTick+0xa8>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	4a1f      	ldr	r2, [pc, #124]	; (8000ce8 <HAL_InitTick+0xa8>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c70:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <HAL_InitTick+0xa8>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c7c:	f107 0210 	add.w	r2, r7, #16
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4611      	mov	r1, r2
 8000c86:	4618      	mov	r0, r3
 8000c88:	f002 ffb4 	bl	8003bf4 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c8c:	f002 ff9e 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 8000c90:	4603      	mov	r3, r0
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c98:	4a14      	ldr	r2, [pc, #80]	; (8000cec <HAL_InitTick+0xac>)
 8000c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9e:	0c9b      	lsrs	r3, r3, #18
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_InitTick+0xb0>)
 8000ca6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000caa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000cac:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <HAL_InitTick+0xb0>)
 8000cae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cb2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000cb4:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <HAL_InitTick+0xb0>)
 8000cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000cba:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <HAL_InitTick+0xb0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_InitTick+0xb0>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000cc6:	480a      	ldr	r0, [pc, #40]	; (8000cf0 <HAL_InitTick+0xb0>)
 8000cc8:	f003 fc16 	bl	80044f8 <HAL_TIM_Base_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d104      	bne.n	8000cdc <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000cd2:	4807      	ldr	r0, [pc, #28]	; (8000cf0 <HAL_InitTick+0xb0>)
 8000cd4:	f003 fc6a 	bl	80045ac <HAL_TIM_Base_Start_IT>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	e000      	b.n	8000cde <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3730      	adds	r7, #48	; 0x30
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	431bde83 	.word	0x431bde83
 8000cf0:	20004088 	.word	0x20004088

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <MemManage_Handler+0x4>

08000d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d24:	4802      	ldr	r0, [pc, #8]	; (8000d30 <TIM1_CC_IRQHandler+0x10>)
 8000d26:	f003 fe29 	bl	800497c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2000403c 	.word	0x2000403c

08000d34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d38:	4802      	ldr	r0, [pc, #8]	; (8000d44 <TIM2_IRQHandler+0x10>)
 8000d3a:	f003 fe1f 	bl	800497c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20004088 	.word	0x20004088

08000d48 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <I2C1_EV_IRQHandler+0x10>)
 8000d4e:	f001 f81f 	bl	8001d90 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20003fe0 	.word	0x20003fe0

08000d5c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <I2C1_ER_IRQHandler+0x10>)
 8000d62:	f001 f986 	bl	8002072 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20003fe0 	.word	0x20003fe0

08000d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <SystemInit+0x20>)
 8000d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <SystemInit+0x20>)
 8000d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d98:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d9a:	490e      	ldr	r1, [pc, #56]	; (8000dd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d9c:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000db0:	4c0b      	ldr	r4, [pc, #44]	; (8000de0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dbe:	f7ff ffd7 	bl	8000d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f006 fbe3 	bl	800758c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fbc7 	bl	8000558 <main>
  bx  lr    
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000dd8:	080076c0 	.word	0x080076c0
  ldr r2, =_sbss
 8000ddc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000de0:	200040d4 	.word	0x200040d4

08000de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <HAL_Init+0x40>)
 8000df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <HAL_Init+0x40>)
 8000dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_Init+0x40>)
 8000e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 f8fc 	bl	800100e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e16:	200f      	movs	r0, #15
 8000e18:	f7ff ff12 	bl	8000c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1c:	f7ff fe12 	bl	8000a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023c00 	.word	0x40023c00

08000e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_IncTick+0x20>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_IncTick+0x24>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <HAL_IncTick+0x24>)
 8000e3e:	6013      	str	r3, [r2, #0]
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	200040d0 	.word	0x200040d0

08000e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return uwTick;
 8000e58:	4b03      	ldr	r3, [pc, #12]	; (8000e68 <HAL_GetTick+0x14>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	200040d0 	.word	0x200040d0

08000e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9e:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	60d3      	str	r3, [r2, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <__NVIC_GetPriorityGrouping+0x18>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	f003 0307 	and.w	r3, r3, #7
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	db0b      	blt.n	8000efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f003 021f 	and.w	r2, r3, #31
 8000ee8:	4907      	ldr	r1, [pc, #28]	; (8000f08 <__NVIC_EnableIRQ+0x38>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	095b      	lsrs	r3, r3, #5
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000e100 	.word	0xe000e100

08000f0c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	db12      	blt.n	8000f44 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f003 021f 	and.w	r2, r3, #31
 8000f24:	490a      	ldr	r1, [pc, #40]	; (8000f50 <__NVIC_DisableIRQ+0x44>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	095b      	lsrs	r3, r3, #5
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f32:	3320      	adds	r3, #32
 8000f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f38:	f3bf 8f4f 	dsb	sy
}
 8000f3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f3e:	f3bf 8f6f 	isb	sy
}
 8000f42:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000e100 	.word	0xe000e100

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	; (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	; (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf28      	it	cs
 8000fc6:	2304      	movcs	r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
         );
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ff28 	bl	8000e6c <__NVIC_SetPriorityGrouping>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001036:	f7ff ff3d 	bl	8000eb4 <__NVIC_GetPriorityGrouping>
 800103a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	68b9      	ldr	r1, [r7, #8]
 8001040:	6978      	ldr	r0, [r7, #20]
 8001042:	f7ff ffb1 	bl	8000fa8 <NVIC_EncodePriority>
 8001046:	4602      	mov	r2, r0
 8001048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104c:	4611      	mov	r1, r2
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ff80 	bl	8000f54 <__NVIC_SetPriority>
}
 8001054:	bf00      	nop
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff30 	bl	8000ed0 <__NVIC_EnableIRQ>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff40 	bl	8000f0c <__NVIC_DisableIRQ>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d004      	beq.n	80010b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2280      	movs	r2, #128	; 0x80
 80010ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00c      	b.n	80010cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2205      	movs	r2, #5
 80010b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0201 	bic.w	r2, r2, #1
 80010c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010e6:	b2db      	uxtb	r3, r3
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	; 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
 800110e:	e165      	b.n	80013dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001110:	2201      	movs	r2, #1
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	429a      	cmp	r2, r3
 800112a:	f040 8154 	bne.w	80013d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	2b01      	cmp	r3, #1
 8001138:	d005      	beq.n	8001146 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001142:	2b02      	cmp	r3, #2
 8001144:	d130      	bne.n	80011a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	68da      	ldr	r2, [r3, #12]
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800117c:	2201      	movs	r2, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	091b      	lsrs	r3, r3, #4
 8001192:	f003 0201 	and.w	r2, r3, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	d017      	beq.n	80011e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d123      	bne.n	8001238 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	08da      	lsrs	r2, r3, #3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3208      	adds	r2, #8
 80011f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	220f      	movs	r2, #15
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	691a      	ldr	r2, [r3, #16]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	08da      	lsrs	r2, r3, #3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3208      	adds	r2, #8
 8001232:	69b9      	ldr	r1, [r7, #24]
 8001234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	2203      	movs	r2, #3
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0203 	and.w	r2, r3, #3
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80ae 	beq.w	80013d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	4b5d      	ldr	r3, [pc, #372]	; (80013f4 <HAL_GPIO_Init+0x300>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	4a5c      	ldr	r2, [pc, #368]	; (80013f4 <HAL_GPIO_Init+0x300>)
 8001284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001288:	6453      	str	r3, [r2, #68]	; 0x44
 800128a:	4b5a      	ldr	r3, [pc, #360]	; (80013f4 <HAL_GPIO_Init+0x300>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001296:	4a58      	ldr	r2, [pc, #352]	; (80013f8 <HAL_GPIO_Init+0x304>)
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	3302      	adds	r3, #2
 800129e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	220f      	movs	r2, #15
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4f      	ldr	r2, [pc, #316]	; (80013fc <HAL_GPIO_Init+0x308>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d025      	beq.n	800130e <HAL_GPIO_Init+0x21a>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4e      	ldr	r2, [pc, #312]	; (8001400 <HAL_GPIO_Init+0x30c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d01f      	beq.n	800130a <HAL_GPIO_Init+0x216>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4d      	ldr	r2, [pc, #308]	; (8001404 <HAL_GPIO_Init+0x310>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d019      	beq.n	8001306 <HAL_GPIO_Init+0x212>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4c      	ldr	r2, [pc, #304]	; (8001408 <HAL_GPIO_Init+0x314>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d013      	beq.n	8001302 <HAL_GPIO_Init+0x20e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4b      	ldr	r2, [pc, #300]	; (800140c <HAL_GPIO_Init+0x318>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d00d      	beq.n	80012fe <HAL_GPIO_Init+0x20a>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4a      	ldr	r2, [pc, #296]	; (8001410 <HAL_GPIO_Init+0x31c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d007      	beq.n	80012fa <HAL_GPIO_Init+0x206>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a49      	ldr	r2, [pc, #292]	; (8001414 <HAL_GPIO_Init+0x320>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d101      	bne.n	80012f6 <HAL_GPIO_Init+0x202>
 80012f2:	2306      	movs	r3, #6
 80012f4:	e00c      	b.n	8001310 <HAL_GPIO_Init+0x21c>
 80012f6:	2307      	movs	r3, #7
 80012f8:	e00a      	b.n	8001310 <HAL_GPIO_Init+0x21c>
 80012fa:	2305      	movs	r3, #5
 80012fc:	e008      	b.n	8001310 <HAL_GPIO_Init+0x21c>
 80012fe:	2304      	movs	r3, #4
 8001300:	e006      	b.n	8001310 <HAL_GPIO_Init+0x21c>
 8001302:	2303      	movs	r3, #3
 8001304:	e004      	b.n	8001310 <HAL_GPIO_Init+0x21c>
 8001306:	2302      	movs	r3, #2
 8001308:	e002      	b.n	8001310 <HAL_GPIO_Init+0x21c>
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <HAL_GPIO_Init+0x21c>
 800130e:	2300      	movs	r3, #0
 8001310:	69fa      	ldr	r2, [r7, #28]
 8001312:	f002 0203 	and.w	r2, r2, #3
 8001316:	0092      	lsls	r2, r2, #2
 8001318:	4093      	lsls	r3, r2
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001320:	4935      	ldr	r1, [pc, #212]	; (80013f8 <HAL_GPIO_Init+0x304>)
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	089b      	lsrs	r3, r3, #2
 8001326:	3302      	adds	r3, #2
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800132e:	4b3a      	ldr	r3, [pc, #232]	; (8001418 <HAL_GPIO_Init+0x324>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001352:	4a31      	ldr	r2, [pc, #196]	; (8001418 <HAL_GPIO_Init+0x324>)
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001358:	4b2f      	ldr	r3, [pc, #188]	; (8001418 <HAL_GPIO_Init+0x324>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800137c:	4a26      	ldr	r2, [pc, #152]	; (8001418 <HAL_GPIO_Init+0x324>)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001382:	4b25      	ldr	r3, [pc, #148]	; (8001418 <HAL_GPIO_Init+0x324>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013a6:	4a1c      	ldr	r2, [pc, #112]	; (8001418 <HAL_GPIO_Init+0x324>)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013ac:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <HAL_GPIO_Init+0x324>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013d0:	4a11      	ldr	r2, [pc, #68]	; (8001418 <HAL_GPIO_Init+0x324>)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3301      	adds	r3, #1
 80013da:	61fb      	str	r3, [r7, #28]
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	2b0f      	cmp	r3, #15
 80013e0:	f67f ae96 	bls.w	8001110 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3724      	adds	r7, #36	; 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40013800 	.word	0x40013800
 80013fc:	40020000 	.word	0x40020000
 8001400:	40020400 	.word	0x40020400
 8001404:	40020800 	.word	0x40020800
 8001408:	40020c00 	.word	0x40020c00
 800140c:	40021000 	.word	0x40021000
 8001410:	40021400 	.word	0x40021400
 8001414:	40021800 	.word	0x40021800
 8001418:	40013c00 	.word	0x40013c00

0800141c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800141c:	b480      	push	{r7}
 800141e:	b087      	sub	sp, #28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	e0c7      	b.n	80015c8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001438:	2201      	movs	r2, #1
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	429a      	cmp	r2, r3
 8001450:	f040 80b7 	bne.w	80015c2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001454:	4a62      	ldr	r2, [pc, #392]	; (80015e0 <HAL_GPIO_DeInit+0x1c4>)
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	089b      	lsrs	r3, r3, #2
 800145a:	3302      	adds	r3, #2
 800145c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001460:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	220f      	movs	r2, #15
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	68ba      	ldr	r2, [r7, #8]
 8001472:	4013      	ands	r3, r2
 8001474:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a5a      	ldr	r2, [pc, #360]	; (80015e4 <HAL_GPIO_DeInit+0x1c8>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d025      	beq.n	80014ca <HAL_GPIO_DeInit+0xae>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a59      	ldr	r2, [pc, #356]	; (80015e8 <HAL_GPIO_DeInit+0x1cc>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d01f      	beq.n	80014c6 <HAL_GPIO_DeInit+0xaa>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a58      	ldr	r2, [pc, #352]	; (80015ec <HAL_GPIO_DeInit+0x1d0>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d019      	beq.n	80014c2 <HAL_GPIO_DeInit+0xa6>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a57      	ldr	r2, [pc, #348]	; (80015f0 <HAL_GPIO_DeInit+0x1d4>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d013      	beq.n	80014be <HAL_GPIO_DeInit+0xa2>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a56      	ldr	r2, [pc, #344]	; (80015f4 <HAL_GPIO_DeInit+0x1d8>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d00d      	beq.n	80014ba <HAL_GPIO_DeInit+0x9e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a55      	ldr	r2, [pc, #340]	; (80015f8 <HAL_GPIO_DeInit+0x1dc>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d007      	beq.n	80014b6 <HAL_GPIO_DeInit+0x9a>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a54      	ldr	r2, [pc, #336]	; (80015fc <HAL_GPIO_DeInit+0x1e0>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d101      	bne.n	80014b2 <HAL_GPIO_DeInit+0x96>
 80014ae:	2306      	movs	r3, #6
 80014b0:	e00c      	b.n	80014cc <HAL_GPIO_DeInit+0xb0>
 80014b2:	2307      	movs	r3, #7
 80014b4:	e00a      	b.n	80014cc <HAL_GPIO_DeInit+0xb0>
 80014b6:	2305      	movs	r3, #5
 80014b8:	e008      	b.n	80014cc <HAL_GPIO_DeInit+0xb0>
 80014ba:	2304      	movs	r3, #4
 80014bc:	e006      	b.n	80014cc <HAL_GPIO_DeInit+0xb0>
 80014be:	2303      	movs	r3, #3
 80014c0:	e004      	b.n	80014cc <HAL_GPIO_DeInit+0xb0>
 80014c2:	2302      	movs	r3, #2
 80014c4:	e002      	b.n	80014cc <HAL_GPIO_DeInit+0xb0>
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <HAL_GPIO_DeInit+0xb0>
 80014ca:	2300      	movs	r3, #0
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	f002 0203 	and.w	r2, r2, #3
 80014d2:	0092      	lsls	r2, r2, #2
 80014d4:	4093      	lsls	r3, r2
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d132      	bne.n	8001542 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80014dc:	4b48      	ldr	r3, [pc, #288]	; (8001600 <HAL_GPIO_DeInit+0x1e4>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	4946      	ldr	r1, [pc, #280]	; (8001600 <HAL_GPIO_DeInit+0x1e4>)
 80014e6:	4013      	ands	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80014ea:	4b45      	ldr	r3, [pc, #276]	; (8001600 <HAL_GPIO_DeInit+0x1e4>)
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	4943      	ldr	r1, [pc, #268]	; (8001600 <HAL_GPIO_DeInit+0x1e4>)
 80014f4:	4013      	ands	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80014f8:	4b41      	ldr	r3, [pc, #260]	; (8001600 <HAL_GPIO_DeInit+0x1e4>)
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	43db      	mvns	r3, r3
 8001500:	493f      	ldr	r1, [pc, #252]	; (8001600 <HAL_GPIO_DeInit+0x1e4>)
 8001502:	4013      	ands	r3, r2
 8001504:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001506:	4b3e      	ldr	r3, [pc, #248]	; (8001600 <HAL_GPIO_DeInit+0x1e4>)
 8001508:	68da      	ldr	r2, [r3, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	43db      	mvns	r3, r3
 800150e:	493c      	ldr	r1, [pc, #240]	; (8001600 <HAL_GPIO_DeInit+0x1e4>)
 8001510:	4013      	ands	r3, r2
 8001512:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	220f      	movs	r2, #15
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001524:	4a2e      	ldr	r2, [pc, #184]	; (80015e0 <HAL_GPIO_DeInit+0x1c4>)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	3302      	adds	r3, #2
 800152c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	43da      	mvns	r2, r3
 8001534:	482a      	ldr	r0, [pc, #168]	; (80015e0 <HAL_GPIO_DeInit+0x1c4>)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	089b      	lsrs	r3, r3, #2
 800153a:	400a      	ands	r2, r1
 800153c:	3302      	adds	r3, #2
 800153e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	2103      	movs	r1, #3
 800154c:	fa01 f303 	lsl.w	r3, r1, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	401a      	ands	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	220f      	movs	r2, #15
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	08d2      	lsrs	r2, r2, #3
 8001578:	4019      	ands	r1, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3208      	adds	r2, #8
 800157e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	2103      	movs	r1, #3
 800158c:	fa01 f303 	lsl.w	r3, r1, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	401a      	ands	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	2101      	movs	r1, #1
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	fa01 f303 	lsl.w	r3, r1, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	401a      	ands	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	2103      	movs	r1, #3
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	401a      	ands	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	3301      	adds	r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	2b0f      	cmp	r3, #15
 80015cc:	f67f af34 	bls.w	8001438 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	371c      	adds	r7, #28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40013800 	.word	0x40013800
 80015e4:	40020000 	.word	0x40020000
 80015e8:	40020400 	.word	0x40020400
 80015ec:	40020800 	.word	0x40020800
 80015f0:	40020c00 	.word	0x40020c00
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40021400 	.word	0x40021400
 80015fc:	40021800 	.word	0x40021800
 8001600:	40013c00 	.word	0x40013c00

08001604 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691a      	ldr	r2, [r3, #16]
 8001614:	887b      	ldrh	r3, [r7, #2]
 8001616:	4013      	ands	r3, r2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d002      	beq.n	8001622 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800161c:	2301      	movs	r3, #1
 800161e:	73fb      	strb	r3, [r7, #15]
 8001620:	e001      	b.n	8001626 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001622:	2300      	movs	r3, #0
 8001624:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001626:	7bfb      	ldrb	r3, [r7, #15]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
 8001640:	4613      	mov	r3, r2
 8001642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001644:	787b      	ldrb	r3, [r7, #1]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800164a:	887a      	ldrh	r2, [r7, #2]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001650:	e003      	b.n	800165a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001652:	887b      	ldrh	r3, [r7, #2]
 8001654:	041a      	lsls	r2, r3, #16
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	619a      	str	r2, [r3, #24]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e12b      	b.n	80018d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d106      	bne.n	8001694 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff fa04 	bl	8000a9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2224      	movs	r2, #36	; 0x24
 8001698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0201 	bic.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016cc:	f002 fa7e 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 80016d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	4a81      	ldr	r2, [pc, #516]	; (80018dc <HAL_I2C_Init+0x274>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d807      	bhi.n	80016ec <HAL_I2C_Init+0x84>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4a80      	ldr	r2, [pc, #512]	; (80018e0 <HAL_I2C_Init+0x278>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	bf94      	ite	ls
 80016e4:	2301      	movls	r3, #1
 80016e6:	2300      	movhi	r3, #0
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	e006      	b.n	80016fa <HAL_I2C_Init+0x92>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4a7d      	ldr	r2, [pc, #500]	; (80018e4 <HAL_I2C_Init+0x27c>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	bf94      	ite	ls
 80016f4:	2301      	movls	r3, #1
 80016f6:	2300      	movhi	r3, #0
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e0e7      	b.n	80018d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4a78      	ldr	r2, [pc, #480]	; (80018e8 <HAL_I2C_Init+0x280>)
 8001706:	fba2 2303 	umull	r2, r3, r2, r3
 800170a:	0c9b      	lsrs	r3, r3, #18
 800170c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68ba      	ldr	r2, [r7, #8]
 800171e:	430a      	orrs	r2, r1
 8001720:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	4a6a      	ldr	r2, [pc, #424]	; (80018dc <HAL_I2C_Init+0x274>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d802      	bhi.n	800173c <HAL_I2C_Init+0xd4>
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	3301      	adds	r3, #1
 800173a:	e009      	b.n	8001750 <HAL_I2C_Init+0xe8>
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001742:	fb02 f303 	mul.w	r3, r2, r3
 8001746:	4a69      	ldr	r2, [pc, #420]	; (80018ec <HAL_I2C_Init+0x284>)
 8001748:	fba2 2303 	umull	r2, r3, r2, r3
 800174c:	099b      	lsrs	r3, r3, #6
 800174e:	3301      	adds	r3, #1
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	430b      	orrs	r3, r1
 8001756:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001762:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	495c      	ldr	r1, [pc, #368]	; (80018dc <HAL_I2C_Init+0x274>)
 800176c:	428b      	cmp	r3, r1
 800176e:	d819      	bhi.n	80017a4 <HAL_I2C_Init+0x13c>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	1e59      	subs	r1, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	fbb1 f3f3 	udiv	r3, r1, r3
 800177e:	1c59      	adds	r1, r3, #1
 8001780:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001784:	400b      	ands	r3, r1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00a      	beq.n	80017a0 <HAL_I2C_Init+0x138>
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	1e59      	subs	r1, r3, #1
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fbb1 f3f3 	udiv	r3, r1, r3
 8001798:	3301      	adds	r3, #1
 800179a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800179e:	e051      	b.n	8001844 <HAL_I2C_Init+0x1dc>
 80017a0:	2304      	movs	r3, #4
 80017a2:	e04f      	b.n	8001844 <HAL_I2C_Init+0x1dc>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d111      	bne.n	80017d0 <HAL_I2C_Init+0x168>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1e58      	subs	r0, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6859      	ldr	r1, [r3, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	440b      	add	r3, r1
 80017ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80017be:	3301      	adds	r3, #1
 80017c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	bf0c      	ite	eq
 80017c8:	2301      	moveq	r3, #1
 80017ca:	2300      	movne	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	e012      	b.n	80017f6 <HAL_I2C_Init+0x18e>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	1e58      	subs	r0, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6859      	ldr	r1, [r3, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	0099      	lsls	r1, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e6:	3301      	adds	r3, #1
 80017e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bf0c      	ite	eq
 80017f0:	2301      	moveq	r3, #1
 80017f2:	2300      	movne	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_I2C_Init+0x196>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e022      	b.n	8001844 <HAL_I2C_Init+0x1dc>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10e      	bne.n	8001824 <HAL_I2C_Init+0x1bc>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1e58      	subs	r0, r3, #1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6859      	ldr	r1, [r3, #4]
 800180e:	460b      	mov	r3, r1
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	440b      	add	r3, r1
 8001814:	fbb0 f3f3 	udiv	r3, r0, r3
 8001818:	3301      	adds	r3, #1
 800181a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800181e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001822:	e00f      	b.n	8001844 <HAL_I2C_Init+0x1dc>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	1e58      	subs	r0, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	0099      	lsls	r1, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	fbb0 f3f3 	udiv	r3, r0, r3
 800183a:	3301      	adds	r3, #1
 800183c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001840:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	6809      	ldr	r1, [r1, #0]
 8001848:	4313      	orrs	r3, r2
 800184a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69da      	ldr	r2, [r3, #28]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001872:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6911      	ldr	r1, [r2, #16]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	68d2      	ldr	r2, [r2, #12]
 800187e:	4311      	orrs	r1, r2
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6812      	ldr	r2, [r2, #0]
 8001884:	430b      	orrs	r3, r1
 8001886:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695a      	ldr	r2, [r3, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0201 	orr.w	r2, r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2220      	movs	r2, #32
 80018be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	000186a0 	.word	0x000186a0
 80018e0:	001e847f 	.word	0x001e847f
 80018e4:	003d08ff 	.word	0x003d08ff
 80018e8:	431bde83 	.word	0x431bde83
 80018ec:	10624dd3 	.word	0x10624dd3

080018f0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e021      	b.n	8001946 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2224      	movs	r2, #36	; 0x24
 8001906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0201 	bic.w	r2, r2, #1
 8001918:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff f916 	bl	8000b4c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	; 0x28
 8001954:	af02      	add	r7, sp, #8
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	4613      	mov	r3, r2
 800195e:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001960:	f7ff fa78 	bl	8000e54 <HAL_GetTick>
 8001964:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b20      	cmp	r3, #32
 8001970:	f040 80fb 	bne.w	8001b6a <HAL_I2C_Slave_Transmit+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d002      	beq.n	8001980 <HAL_I2C_Slave_Transmit+0x30>
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e0f3      	b.n	8001b6c <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <HAL_I2C_Slave_Transmit+0x42>
 800198e:	2302      	movs	r3, #2
 8001990:	e0ec      	b.n	8001b6c <HAL_I2C_Slave_Transmit+0x21c>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d007      	beq.n	80019b8 <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019c6:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2221      	movs	r2, #33	; 0x21
 80019cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2220      	movs	r2, #32
 80019d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2200      	movs	r2, #0
 80019dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	88fa      	ldrh	r2, [r7, #6]
 80019e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4a5f      	ldr	r2, [pc, #380]	; (8001b74 <HAL_I2C_Slave_Transmit+0x224>)
 80019f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a08:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2200      	movs	r2, #0
 8001a12:	4959      	ldr	r1, [pc, #356]	; (8001b78 <HAL_I2C_Slave_Transmit+0x228>)
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f001 fe3f 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0a3      	b.n	8001b6c <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a24:	2300      	movs	r3, #0
 8001a26:	61bb      	str	r3, [r7, #24]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	61bb      	str	r3, [r7, #24]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	61bb      	str	r3, [r7, #24]
 8001a38:	69bb      	ldr	r3, [r7, #24]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001a42:	d165      	bne.n	8001b10 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	494a      	ldr	r1, [pc, #296]	; (8001b78 <HAL_I2C_Slave_Transmit+0x228>)
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f001 fe22 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e086      	b.n	8001b6c <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001a74:	e04c      	b.n	8001b10 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a76:	69fa      	ldr	r2, [r7, #28]
 8001a78:	6839      	ldr	r1, [r7, #0]
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f001 fe63 	bl	8003746 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d009      	beq.n	8001a9a <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a94:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e068      	b.n	8001b6c <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	781a      	ldrb	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d11b      	bne.n	8001b10 <HAL_I2C_Slave_Transmit+0x1c0>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d017      	beq.n	8001b10 <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	781a      	ldrb	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	1c5a      	adds	r2, r3, #1
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	3b01      	subs	r3, #1
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1ae      	bne.n	8001a76 <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f001 fdb7 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_I2C_Slave_Transmit+0x1e4>
    {
      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e01b      	b.n	8001b6c <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b3c:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2220      	movs	r2, #32
 8001b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e000      	b.n	8001b6c <HAL_I2C_Slave_Transmit+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001b6a:	2302      	movs	r3, #2
  }
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3720      	adds	r7, #32
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	ffff0000 	.word	0xffff0000
 8001b78:	00010002 	.word	0x00010002

08001b7c <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	; 0x28
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b8c:	f7ff f962 	bl	8000e54 <HAL_GetTick>
 8001b90:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b20      	cmp	r3, #32
 8001b9c:	f040 80ee 	bne.w	8001d7c <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <HAL_I2C_Slave_Receive+0x30>
 8001ba6:	88fb      	ldrh	r3, [r7, #6]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0e6      	b.n	8001d7e <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <HAL_I2C_Slave_Receive+0x42>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e0df      	b.n	8001d7e <HAL_I2C_Slave_Receive+0x202>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d007      	beq.n	8001be4 <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0201 	orr.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bf2:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2222      	movs	r2, #34	; 0x22
 8001bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	88fa      	ldrh	r2, [r7, #6]
 8001c14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4a59      	ldr	r2, [pc, #356]	; (8001d88 <HAL_I2C_Slave_Receive+0x20c>)
 8001c24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c34:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	4953      	ldr	r1, [pc, #332]	; (8001d8c <HAL_I2C_Slave_Receive+0x210>)
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f001 fd29 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e096      	b.n	8001d7e <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c50:	2300      	movs	r3, #0
 8001c52:	61bb      	str	r3, [r7, #24]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	61bb      	str	r3, [r7, #24]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	61bb      	str	r3, [r7, #24]
 8001c64:	69bb      	ldr	r3, [r7, #24]

    while (hi2c->XferSize > 0U)
 8001c66:	e04e      	b.n	8001d06 <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	6839      	ldr	r1, [r7, #0]
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f001 fe1b 	bl	80038a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d009      	beq.n	8001c8c <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c86:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e078      	b.n	8001d7e <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691a      	ldr	r2, [r3, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d11c      	bne.n	8001d06 <HAL_I2C_Slave_Receive+0x18a>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d018      	beq.n	8001d06 <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691a      	ldr	r2, [r3, #16]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1ac      	bne.n	8001c68 <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	6839      	ldr	r1, [r7, #0]
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f001 fd58 	bl	80037c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d009      	beq.n	8001d32 <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d2c:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e025      	b.n	8001d7e <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f042 0201 	orr.w	r2, r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	697b      	ldr	r3, [r7, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2220      	movs	r2, #32
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	e000      	b.n	8001d7e <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 8001d7c:	2302      	movs	r3, #2
  }
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3720      	adds	r7, #32
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	ffff0000 	.word	0xffff0000
 8001d8c:	00010002 	.word	0x00010002

08001d90 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001db0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	2b10      	cmp	r3, #16
 8001dbe:	d003      	beq.n	8001dc8 <HAL_I2C_EV_IRQHandler+0x38>
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	2b40      	cmp	r3, #64	; 0x40
 8001dc4:	f040 80c1 	bne.w	8001f4a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10d      	bne.n	8001dfe <HAL_I2C_EV_IRQHandler+0x6e>
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001de8:	d003      	beq.n	8001df2 <HAL_I2C_EV_IRQHandler+0x62>
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001df0:	d101      	bne.n	8001df6 <HAL_I2C_EV_IRQHandler+0x66>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <HAL_I2C_EV_IRQHandler+0x68>
 8001df6:	2300      	movs	r3, #0
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	f000 8132 	beq.w	8002062 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00c      	beq.n	8001e22 <HAL_I2C_EV_IRQHandler+0x92>
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	0a5b      	lsrs	r3, r3, #9
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d006      	beq.n	8001e22 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f001 fdcc 	bl	80039b2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 fd79 	bl	8002912 <I2C_Master_SB>
 8001e20:	e092      	b.n	8001f48 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	08db      	lsrs	r3, r3, #3
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d009      	beq.n	8001e42 <HAL_I2C_EV_IRQHandler+0xb2>
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	0a5b      	lsrs	r3, r3, #9
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 fdef 	bl	8002a1e <I2C_Master_ADD10>
 8001e40:	e082      	b.n	8001f48 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	085b      	lsrs	r3, r3, #1
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d009      	beq.n	8001e62 <HAL_I2C_EV_IRQHandler+0xd2>
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	0a5b      	lsrs	r3, r3, #9
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 fe09 	bl	8002a72 <I2C_Master_ADDR>
 8001e60:	e072      	b.n	8001f48 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	089b      	lsrs	r3, r3, #2
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d03b      	beq.n	8001ee6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e7c:	f000 80f3 	beq.w	8002066 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	09db      	lsrs	r3, r3, #7
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00f      	beq.n	8001eac <HAL_I2C_EV_IRQHandler+0x11c>
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	0a9b      	lsrs	r3, r3, #10
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d009      	beq.n	8001eac <HAL_I2C_EV_IRQHandler+0x11c>
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	089b      	lsrs	r3, r3, #2
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d103      	bne.n	8001eac <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f9f3 	bl	8002290 <I2C_MasterTransmit_TXE>
 8001eaa:	e04d      	b.n	8001f48 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 80d6 	beq.w	8002066 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	0a5b      	lsrs	r3, r3, #9
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 80cf 	beq.w	8002066 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001ec8:	7bbb      	ldrb	r3, [r7, #14]
 8001eca:	2b21      	cmp	r3, #33	; 0x21
 8001ecc:	d103      	bne.n	8001ed6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 fa7a 	bl	80023c8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ed4:	e0c7      	b.n	8002066 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	2b40      	cmp	r3, #64	; 0x40
 8001eda:	f040 80c4 	bne.w	8002066 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 fae8 	bl	80024b4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ee4:	e0bf      	b.n	8002066 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ef4:	f000 80b7 	beq.w	8002066 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	099b      	lsrs	r3, r3, #6
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00f      	beq.n	8001f24 <HAL_I2C_EV_IRQHandler+0x194>
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	0a9b      	lsrs	r3, r3, #10
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d009      	beq.n	8001f24 <HAL_I2C_EV_IRQHandler+0x194>
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	089b      	lsrs	r3, r3, #2
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d103      	bne.n	8001f24 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 fb5d 	bl	80025dc <I2C_MasterReceive_RXNE>
 8001f22:	e011      	b.n	8001f48 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	089b      	lsrs	r3, r3, #2
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 809a 	beq.w	8002066 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	0a5b      	lsrs	r3, r3, #9
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 8093 	beq.w	8002066 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 fbfc 	bl	800273e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f46:	e08e      	b.n	8002066 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001f48:	e08d      	b.n	8002066 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d004      	beq.n	8001f5c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	695b      	ldr	r3, [r3, #20]
 8001f58:	61fb      	str	r3, [r7, #28]
 8001f5a:	e007      	b.n	8001f6c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	085b      	lsrs	r3, r3, #1
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d012      	beq.n	8001f9e <HAL_I2C_EV_IRQHandler+0x20e>
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	0a5b      	lsrs	r3, r3, #9
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00c      	beq.n	8001f9e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001f94:	69b9      	ldr	r1, [r7, #24]
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 ffba 	bl	8002f10 <I2C_Slave_ADDR>
 8001f9c:	e066      	b.n	800206c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d009      	beq.n	8001fbe <HAL_I2C_EV_IRQHandler+0x22e>
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	0a5b      	lsrs	r3, r3, #9
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 fff4 	bl	8002fa4 <I2C_Slave_STOPF>
 8001fbc:	e056      	b.n	800206c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001fbe:	7bbb      	ldrb	r3, [r7, #14]
 8001fc0:	2b21      	cmp	r3, #33	; 0x21
 8001fc2:	d002      	beq.n	8001fca <HAL_I2C_EV_IRQHandler+0x23a>
 8001fc4:	7bbb      	ldrb	r3, [r7, #14]
 8001fc6:	2b29      	cmp	r3, #41	; 0x29
 8001fc8:	d125      	bne.n	8002016 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	09db      	lsrs	r3, r3, #7
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00f      	beq.n	8001ff6 <HAL_I2C_EV_IRQHandler+0x266>
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	0a9b      	lsrs	r3, r3, #10
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d009      	beq.n	8001ff6 <HAL_I2C_EV_IRQHandler+0x266>
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	089b      	lsrs	r3, r3, #2
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d103      	bne.n	8001ff6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 fed0 	bl	8002d94 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ff4:	e039      	b.n	800206a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	089b      	lsrs	r3, r3, #2
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d033      	beq.n	800206a <HAL_I2C_EV_IRQHandler+0x2da>
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	0a5b      	lsrs	r3, r3, #9
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d02d      	beq.n	800206a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 fefd 	bl	8002e0e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002014:	e029      	b.n	800206a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	099b      	lsrs	r3, r3, #6
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00f      	beq.n	8002042 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	0a9b      	lsrs	r3, r3, #10
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d009      	beq.n	8002042 <HAL_I2C_EV_IRQHandler+0x2b2>
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d103      	bne.n	8002042 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 ff08 	bl	8002e50 <I2C_SlaveReceive_RXNE>
 8002040:	e014      	b.n	800206c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00e      	beq.n	800206c <HAL_I2C_EV_IRQHandler+0x2dc>
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	0a5b      	lsrs	r3, r3, #9
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d008      	beq.n	800206c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 ff36 	bl	8002ecc <I2C_SlaveReceive_BTF>
 8002060:	e004      	b.n	800206c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002062:	bf00      	nop
 8002064:	e002      	b.n	800206c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002066:	bf00      	nop
 8002068:	e000      	b.n	800206c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800206a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800206c:	3720      	adds	r7, #32
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b08a      	sub	sp, #40	; 0x28
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800208a:	2300      	movs	r3, #0
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002094:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	0a1b      	lsrs	r3, r3, #8
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00e      	beq.n	80020c0 <HAL_I2C_ER_IRQHandler+0x4e>
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	0a1b      	lsrs	r3, r3, #8
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d008      	beq.n	80020c0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80020be:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	0a5b      	lsrs	r3, r3, #9
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00e      	beq.n	80020ea <HAL_I2C_ER_IRQHandler+0x78>
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d008      	beq.n	80020ea <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	f043 0302 	orr.w	r3, r3, #2
 80020de:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80020e8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020ea:	6a3b      	ldr	r3, [r7, #32]
 80020ec:	0a9b      	lsrs	r3, r3, #10
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d03f      	beq.n	8002176 <HAL_I2C_ER_IRQHandler+0x104>
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	0a1b      	lsrs	r3, r3, #8
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d039      	beq.n	8002176 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002102:	7efb      	ldrb	r3, [r7, #27]
 8002104:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210a:	b29b      	uxth	r3, r3
 800210c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002114:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800211c:	7ebb      	ldrb	r3, [r7, #26]
 800211e:	2b20      	cmp	r3, #32
 8002120:	d112      	bne.n	8002148 <HAL_I2C_ER_IRQHandler+0xd6>
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10f      	bne.n	8002148 <HAL_I2C_ER_IRQHandler+0xd6>
 8002128:	7cfb      	ldrb	r3, [r7, #19]
 800212a:	2b21      	cmp	r3, #33	; 0x21
 800212c:	d008      	beq.n	8002140 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800212e:	7cfb      	ldrb	r3, [r7, #19]
 8002130:	2b29      	cmp	r3, #41	; 0x29
 8002132:	d005      	beq.n	8002140 <HAL_I2C_ER_IRQHandler+0xce>
 8002134:	7cfb      	ldrb	r3, [r7, #19]
 8002136:	2b28      	cmp	r3, #40	; 0x28
 8002138:	d106      	bne.n	8002148 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b21      	cmp	r3, #33	; 0x21
 800213e:	d103      	bne.n	8002148 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f001 f85f 	bl	8003204 <I2C_Slave_AF>
 8002146:	e016      	b.n	8002176 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002150:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	f043 0304 	orr.w	r3, r3, #4
 8002158:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800215a:	7efb      	ldrb	r3, [r7, #27]
 800215c:	2b10      	cmp	r3, #16
 800215e:	d002      	beq.n	8002166 <HAL_I2C_ER_IRQHandler+0xf4>
 8002160:	7efb      	ldrb	r3, [r7, #27]
 8002162:	2b40      	cmp	r3, #64	; 0x40
 8002164:	d107      	bne.n	8002176 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002174:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002176:	6a3b      	ldr	r3, [r7, #32]
 8002178:	0adb      	lsrs	r3, r3, #11
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00e      	beq.n	80021a0 <HAL_I2C_ER_IRQHandler+0x12e>
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	0a1b      	lsrs	r3, r3, #8
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d008      	beq.n	80021a0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	f043 0308 	orr.w	r3, r3, #8
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800219e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d008      	beq.n	80021b8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	431a      	orrs	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f001 f896 	bl	80032e4 <I2C_ITError>
  }
}
 80021b8:	bf00      	nop
 80021ba:	3728      	adds	r7, #40	; 0x28
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	70fb      	strb	r3, [r7, #3]
 800221c:	4613      	mov	r3, r2
 800221e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800229e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022a6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ac:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d150      	bne.n	8002358 <I2C_MasterTransmit_TXE+0xc8>
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	2b21      	cmp	r3, #33	; 0x21
 80022ba:	d14d      	bne.n	8002358 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d01d      	beq.n	80022fe <I2C_MasterTransmit_TXE+0x6e>
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2b20      	cmp	r3, #32
 80022c6:	d01a      	beq.n	80022fe <I2C_MasterTransmit_TXE+0x6e>
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022ce:	d016      	beq.n	80022fe <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80022de:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2211      	movs	r2, #17
 80022e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2220      	movs	r2, #32
 80022f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff ff62 	bl	80021c0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022fc:	e060      	b.n	80023c0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800230c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800231c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2220      	movs	r2, #32
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b40      	cmp	r3, #64	; 0x40
 8002336:	d107      	bne.n	8002348 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff ff7d 	bl	8002240 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002346:	e03b      	b.n	80023c0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7ff ff35 	bl	80021c0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002356:	e033      	b.n	80023c0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	2b21      	cmp	r3, #33	; 0x21
 800235c:	d005      	beq.n	800236a <I2C_MasterTransmit_TXE+0xda>
 800235e:	7bbb      	ldrb	r3, [r7, #14]
 8002360:	2b40      	cmp	r3, #64	; 0x40
 8002362:	d12d      	bne.n	80023c0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	2b22      	cmp	r3, #34	; 0x22
 8002368:	d12a      	bne.n	80023c0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236e:	b29b      	uxth	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d108      	bne.n	8002386 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002382:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002384:	e01c      	b.n	80023c0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b40      	cmp	r3, #64	; 0x40
 8002390:	d103      	bne.n	800239a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f88e 	bl	80024b4 <I2C_MemoryTransmit_TXE_BTF>
}
 8002398:	e012      	b.n	80023c0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	781a      	ldrb	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80023be:	e7ff      	b.n	80023c0 <I2C_MasterTransmit_TXE+0x130>
 80023c0:	bf00      	nop
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b21      	cmp	r3, #33	; 0x21
 80023e0:	d164      	bne.n	80024ac <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d012      	beq.n	8002412 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	781a      	ldrb	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002406:	b29b      	uxth	r3, r3
 8002408:	3b01      	subs	r3, #1
 800240a:	b29a      	uxth	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002410:	e04c      	b.n	80024ac <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b08      	cmp	r3, #8
 8002416:	d01d      	beq.n	8002454 <I2C_MasterTransmit_BTF+0x8c>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2b20      	cmp	r3, #32
 800241c:	d01a      	beq.n	8002454 <I2C_MasterTransmit_BTF+0x8c>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002424:	d016      	beq.n	8002454 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002434:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2211      	movs	r2, #17
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff feb7 	bl	80021c0 <HAL_I2C_MasterTxCpltCallback>
}
 8002452:	e02b      	b.n	80024ac <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002462:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002472:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2220      	movs	r2, #32
 800247e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b40      	cmp	r3, #64	; 0x40
 800248c:	d107      	bne.n	800249e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff fed2 	bl	8002240 <HAL_I2C_MemTxCpltCallback>
}
 800249c:	e006      	b.n	80024ac <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff fe8a 	bl	80021c0 <HAL_I2C_MasterTxCpltCallback>
}
 80024ac:	bf00      	nop
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d11d      	bne.n	8002508 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d10b      	bne.n	80024ec <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e4:	1c9a      	adds	r2, r3, #2
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80024ea:	e073      	b.n	80025d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	121b      	asrs	r3, r3, #8
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002506:	e065      	b.n	80025d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800250c:	2b01      	cmp	r3, #1
 800250e:	d10b      	bne.n	8002528 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002514:	b2da      	uxtb	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002526:	e055      	b.n	80025d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800252c:	2b02      	cmp	r3, #2
 800252e:	d151      	bne.n	80025d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	2b22      	cmp	r3, #34	; 0x22
 8002534:	d10d      	bne.n	8002552 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002544:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800254a:	1c5a      	adds	r2, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002550:	e040      	b.n	80025d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002556:	b29b      	uxth	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d015      	beq.n	8002588 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	2b21      	cmp	r3, #33	; 0x21
 8002560:	d112      	bne.n	8002588 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	781a      	ldrb	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002586:	e025      	b.n	80025d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d120      	bne.n	80025d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	2b21      	cmp	r3, #33	; 0x21
 8002596:	d11d      	bne.n	80025d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025a6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2220      	movs	r2, #32
 80025c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff fe36 	bl	8002240 <HAL_I2C_MemTxCpltCallback>
}
 80025d4:	bf00      	nop
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b22      	cmp	r3, #34	; 0x22
 80025ee:	f040 80a2 	bne.w	8002736 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d921      	bls.n	8002644 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261c:	b29b      	uxth	r3, r3
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262a:	b29b      	uxth	r3, r3
 800262c:	2b03      	cmp	r3, #3
 800262e:	f040 8082 	bne.w	8002736 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002640:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002642:	e078      	b.n	8002736 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	2b02      	cmp	r3, #2
 800264a:	d074      	beq.n	8002736 <I2C_MasterReceive_RXNE+0x15a>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d002      	beq.n	8002658 <I2C_MasterReceive_RXNE+0x7c>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d16e      	bne.n	8002736 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f001 f8f3 	bl	8003844 <I2C_WaitOnSTOPRequestThroughIT>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d142      	bne.n	80026ea <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002672:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002682:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b40      	cmp	r3, #64	; 0x40
 80026bc:	d10a      	bne.n	80026d4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff fdc1 	bl	8002254 <HAL_I2C_MemRxCpltCallback>
}
 80026d2:	e030      	b.n	8002736 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2212      	movs	r2, #18
 80026e0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff fd76 	bl	80021d4 <HAL_I2C_MasterRxCpltCallback>
}
 80026e8:	e025      	b.n	8002736 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80026f8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	691a      	ldr	r2, [r3, #16]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002716:	b29b      	uxth	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff fd99 	bl	8002268 <HAL_I2C_ErrorCallback>
}
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b084      	sub	sp, #16
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002750:	b29b      	uxth	r3, r3
 8002752:	2b04      	cmp	r3, #4
 8002754:	d11b      	bne.n	800278e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002764:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800278c:	e0bd      	b.n	800290a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002792:	b29b      	uxth	r3, r3
 8002794:	2b03      	cmp	r3, #3
 8002796:	d129      	bne.n	80027ec <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d00a      	beq.n	80027c4 <I2C_MasterReceive_BTF+0x86>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d007      	beq.n	80027c4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027c2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691a      	ldr	r2, [r3, #16]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80027ea:	e08e      	b.n	800290a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d176      	bne.n	80028e4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d002      	beq.n	8002802 <I2C_MasterReceive_BTF+0xc4>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2b10      	cmp	r3, #16
 8002800:	d108      	bne.n	8002814 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	e019      	b.n	8002848 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2b04      	cmp	r3, #4
 8002818:	d002      	beq.n	8002820 <I2C_MasterReceive_BTF+0xe2>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d108      	bne.n	8002832 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	e00a      	b.n	8002848 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b10      	cmp	r3, #16
 8002836:	d007      	beq.n	8002848 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002846:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691a      	ldr	r2, [r3, #16]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002864:	b29b      	uxth	r3, r3
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288a:	b29b      	uxth	r3, r3
 800288c:	3b01      	subs	r3, #1
 800288e:	b29a      	uxth	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80028a2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b40      	cmp	r3, #64	; 0x40
 80028b6:	d10a      	bne.n	80028ce <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff fcc4 	bl	8002254 <HAL_I2C_MemRxCpltCallback>
}
 80028cc:	e01d      	b.n	800290a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2212      	movs	r2, #18
 80028da:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff fc79 	bl	80021d4 <HAL_I2C_MasterRxCpltCallback>
}
 80028e2:	e012      	b.n	800290a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691a      	ldr	r2, [r3, #16]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002900:	b29b      	uxth	r3, r3
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800290a:	bf00      	nop
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b40      	cmp	r3, #64	; 0x40
 8002924:	d117      	bne.n	8002956 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800292a:	2b00      	cmp	r3, #0
 800292c:	d109      	bne.n	8002942 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	b2db      	uxtb	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800293e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002940:	e067      	b.n	8002a12 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	b2db      	uxtb	r3, r3
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	b2da      	uxtb	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	611a      	str	r2, [r3, #16]
}
 8002954:	e05d      	b.n	8002a12 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800295e:	d133      	bne.n	80029c8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b21      	cmp	r3, #33	; 0x21
 800296a:	d109      	bne.n	8002980 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002970:	b2db      	uxtb	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800297c:	611a      	str	r2, [r3, #16]
 800297e:	e008      	b.n	8002992 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	b2da      	uxtb	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002996:	2b00      	cmp	r3, #0
 8002998:	d004      	beq.n	80029a4 <I2C_Master_SB+0x92>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d108      	bne.n	80029b6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d032      	beq.n	8002a12 <I2C_Master_SB+0x100>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d02d      	beq.n	8002a12 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029c4:	605a      	str	r2, [r3, #4]
}
 80029c6:	e024      	b.n	8002a12 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10e      	bne.n	80029ee <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	11db      	asrs	r3, r3, #7
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	f003 0306 	and.w	r3, r3, #6
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	f063 030f 	orn	r3, r3, #15
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	611a      	str	r2, [r3, #16]
}
 80029ec:	e011      	b.n	8002a12 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d10d      	bne.n	8002a12 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	11db      	asrs	r3, r3, #7
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	f003 0306 	and.w	r3, r3, #6
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	f063 030e 	orn	r3, r3, #14
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	611a      	str	r2, [r3, #16]
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d004      	beq.n	8002a44 <I2C_Master_ADD10+0x26>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d108      	bne.n	8002a56 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00c      	beq.n	8002a66 <I2C_Master_ADD10+0x48>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d007      	beq.n	8002a66 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a64:	605a      	str	r2, [r3, #4]
  }
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b091      	sub	sp, #68	; 0x44
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b22      	cmp	r3, #34	; 0x22
 8002a9a:	f040 8169 	bne.w	8002d70 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10f      	bne.n	8002ac6 <I2C_Master_ADDR+0x54>
 8002aa6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002aaa:	2b40      	cmp	r3, #64	; 0x40
 8002aac:	d10b      	bne.n	8002ac6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aae:	2300      	movs	r3, #0
 8002ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	633b      	str	r3, [r7, #48]	; 0x30
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	e160      	b.n	8002d88 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d11d      	bne.n	8002b0a <I2C_Master_ADDR+0x98>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002ad6:	d118      	bne.n	8002b0a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ad8:	2300      	movs	r3, #0
 8002ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002afc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	651a      	str	r2, [r3, #80]	; 0x50
 8002b08:	e13e      	b.n	8002d88 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d113      	bne.n	8002b3c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b14:	2300      	movs	r3, #0
 8002b16:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b28:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	e115      	b.n	8002d68 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	f040 808a 	bne.w	8002c5c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b4e:	d137      	bne.n	8002bc0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b5e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b6e:	d113      	bne.n	8002b98 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b7e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b80:	2300      	movs	r3, #0
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	e0e7      	b.n	8002d68 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b98:	2300      	movs	r3, #0
 8002b9a:	623b      	str	r3, [r7, #32]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	623b      	str	r3, [r7, #32]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	623b      	str	r3, [r7, #32]
 8002bac:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	e0d3      	b.n	8002d68 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc2:	2b08      	cmp	r3, #8
 8002bc4:	d02e      	beq.n	8002c24 <I2C_Master_ADDR+0x1b2>
 8002bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc8:	2b20      	cmp	r3, #32
 8002bca:	d02b      	beq.n	8002c24 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bce:	2b12      	cmp	r3, #18
 8002bd0:	d102      	bne.n	8002bd8 <I2C_Master_ADDR+0x166>
 8002bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d125      	bne.n	8002c24 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d00e      	beq.n	8002bfc <I2C_Master_ADDR+0x18a>
 8002bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d00b      	beq.n	8002bfc <I2C_Master_ADDR+0x18a>
 8002be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be6:	2b10      	cmp	r3, #16
 8002be8:	d008      	beq.n	8002bfc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	e007      	b.n	8002c0c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c0a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61fb      	str	r3, [r7, #28]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	61fb      	str	r3, [r7, #28]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	61fb      	str	r3, [r7, #28]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	e0a1      	b.n	8002d68 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c32:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c34:	2300      	movs	r3, #0
 8002c36:	61bb      	str	r3, [r7, #24]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	61bb      	str	r3, [r7, #24]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	61bb      	str	r3, [r7, #24]
 8002c48:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	e085      	b.n	8002d68 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d14d      	bne.n	8002d02 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d016      	beq.n	8002c9a <I2C_Master_ADDR+0x228>
 8002c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d013      	beq.n	8002c9a <I2C_Master_ADDR+0x228>
 8002c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c74:	2b10      	cmp	r3, #16
 8002c76:	d010      	beq.n	8002c9a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c86:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	e007      	b.n	8002caa <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ca8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cb8:	d117      	bne.n	8002cea <I2C_Master_ADDR+0x278>
 8002cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cc0:	d00b      	beq.n	8002cda <I2C_Master_ADDR+0x268>
 8002cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d008      	beq.n	8002cda <I2C_Master_ADDR+0x268>
 8002cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d005      	beq.n	8002cda <I2C_Master_ADDR+0x268>
 8002cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd0:	2b10      	cmp	r3, #16
 8002cd2:	d002      	beq.n	8002cda <I2C_Master_ADDR+0x268>
 8002cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	d107      	bne.n	8002cea <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ce8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	e032      	b.n	8002d68 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d10:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d20:	d117      	bne.n	8002d52 <I2C_Master_ADDR+0x2e0>
 8002d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d28:	d00b      	beq.n	8002d42 <I2C_Master_ADDR+0x2d0>
 8002d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d008      	beq.n	8002d42 <I2C_Master_ADDR+0x2d0>
 8002d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d005      	beq.n	8002d42 <I2C_Master_ADDR+0x2d0>
 8002d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d38:	2b10      	cmp	r3, #16
 8002d3a:	d002      	beq.n	8002d42 <I2C_Master_ADDR+0x2d0>
 8002d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3e:	2b20      	cmp	r3, #32
 8002d40:	d107      	bne.n	8002d52 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d50:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d52:	2300      	movs	r3, #0
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002d6e:	e00b      	b.n	8002d88 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d70:	2300      	movs	r3, #0
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]
}
 8002d86:	e7ff      	b.n	8002d88 <I2C_Master_ADDR+0x316>
 8002d88:	bf00      	nop
 8002d8a:	3744      	adds	r7, #68	; 0x44
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d02b      	beq.n	8002e06 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	781a      	ldrb	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	1c5a      	adds	r2, r3, #1
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d114      	bne.n	8002e06 <I2C_SlaveTransmit_TXE+0x72>
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	2b29      	cmp	r3, #41	; 0x29
 8002de0:	d111      	bne.n	8002e06 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2221      	movs	r2, #33	; 0x21
 8002df6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2228      	movs	r2, #40	; 0x28
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f7ff f9f1 	bl	80021e8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e06:	bf00      	nop
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d011      	beq.n	8002e44 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	781a      	ldrb	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d02c      	beq.n	8002ec4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d114      	bne.n	8002ec4 <I2C_SlaveReceive_RXNE+0x74>
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e9e:	d111      	bne.n	8002ec4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eae:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2222      	movs	r2, #34	; 0x22
 8002eb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2228      	movs	r2, #40	; 0x28
 8002eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff f99c 	bl	80021fc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002ec4:	bf00      	nop
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d012      	beq.n	8002f04 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	1c5a      	adds	r2, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f2a:	2b28      	cmp	r3, #40	; 0x28
 8002f2c:	d127      	bne.n	8002f7e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f3c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	089b      	lsrs	r3, r3, #2
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	09db      	lsrs	r3, r3, #7
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d103      	bne.n	8002f62 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	81bb      	strh	r3, [r7, #12]
 8002f60:	e002      	b.n	8002f68 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002f70:	89ba      	ldrh	r2, [r7, #12]
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	4619      	mov	r1, r3
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff f94a 	bl	8002210 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002f7c:	e00e      	b.n	8002f9c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60bb      	str	r3, [r7, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002f9c:	bf00      	nop
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fc2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0201 	orr.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ffc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003000:	d172      	bne.n	80030e8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	2b22      	cmp	r3, #34	; 0x22
 8003006:	d002      	beq.n	800300e <I2C_Slave_STOPF+0x6a>
 8003008:	7bfb      	ldrb	r3, [r7, #15]
 800300a:	2b2a      	cmp	r3, #42	; 0x2a
 800300c:	d135      	bne.n	800307a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	b29a      	uxth	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f043 0204 	orr.w	r2, r3, #4
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003040:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe f846 	bl	80010d8 <HAL_DMA_GetState>
 800304c:	4603      	mov	r3, r0
 800304e:	2b01      	cmp	r3, #1
 8003050:	d049      	beq.n	80030e6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003056:	4a69      	ldr	r2, [pc, #420]	; (80031fc <I2C_Slave_STOPF+0x258>)
 8003058:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305e:	4618      	mov	r0, r3
 8003060:	f7fe f818 	bl	8001094 <HAL_DMA_Abort_IT>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d03d      	beq.n	80030e6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003074:	4610      	mov	r0, r2
 8003076:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003078:	e035      	b.n	80030e6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	b29a      	uxth	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d005      	beq.n	800309e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f043 0204 	orr.w	r2, r3, #4
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe f810 	bl	80010d8 <HAL_DMA_GetState>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d014      	beq.n	80030e8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c2:	4a4e      	ldr	r2, [pc, #312]	; (80031fc <I2C_Slave_STOPF+0x258>)
 80030c4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fd ffe2 	bl	8001094 <HAL_DMA_Abort_IT>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d008      	beq.n	80030e8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030e0:	4610      	mov	r0, r2
 80030e2:	4798      	blx	r3
 80030e4:	e000      	b.n	80030e8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030e6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d03e      	beq.n	8003170 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d112      	bne.n	8003126 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311c:	b29b      	uxth	r3, r3
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003130:	2b40      	cmp	r3, #64	; 0x40
 8003132:	d112      	bne.n	800315a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691a      	ldr	r2, [r3, #16]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003150:	b29b      	uxth	r3, r3
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	f043 0204 	orr.w	r2, r3, #4
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f8b3 	bl	80032e4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800317e:	e039      	b.n	80031f4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	2b2a      	cmp	r3, #42	; 0x2a
 8003184:	d109      	bne.n	800319a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2228      	movs	r2, #40	; 0x28
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff f831 	bl	80021fc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b28      	cmp	r3, #40	; 0x28
 80031a4:	d111      	bne.n	80031ca <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a15      	ldr	r2, [pc, #84]	; (8003200 <I2C_Slave_STOPF+0x25c>)
 80031aa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff f832 	bl	800222c <HAL_I2C_ListenCpltCallback>
}
 80031c8:	e014      	b.n	80031f4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	2b22      	cmp	r3, #34	; 0x22
 80031d0:	d002      	beq.n	80031d8 <I2C_Slave_STOPF+0x234>
 80031d2:	7bfb      	ldrb	r3, [r7, #15]
 80031d4:	2b22      	cmp	r3, #34	; 0x22
 80031d6:	d10d      	bne.n	80031f4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7ff f804 	bl	80021fc <HAL_I2C_SlaveRxCpltCallback>
}
 80031f4:	bf00      	nop
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	08003549 	.word	0x08003549
 8003200:	ffff0000 	.word	0xffff0000

08003204 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003212:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b08      	cmp	r3, #8
 800321e:	d002      	beq.n	8003226 <I2C_Slave_AF+0x22>
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2b20      	cmp	r3, #32
 8003224:	d129      	bne.n	800327a <I2C_Slave_AF+0x76>
 8003226:	7bfb      	ldrb	r3, [r7, #15]
 8003228:	2b28      	cmp	r3, #40	; 0x28
 800322a:	d126      	bne.n	800327a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a2c      	ldr	r2, [pc, #176]	; (80032e0 <I2C_Slave_AF+0xdc>)
 8003230:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003240:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800324a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800325a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2220      	movs	r2, #32
 8003266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fe ffda 	bl	800222c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003278:	e02e      	b.n	80032d8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	2b21      	cmp	r3, #33	; 0x21
 800327e:	d126      	bne.n	80032ce <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a17      	ldr	r2, [pc, #92]	; (80032e0 <I2C_Slave_AF+0xdc>)
 8003284:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2221      	movs	r2, #33	; 0x21
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032aa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032b4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032c4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7fe ff8e 	bl	80021e8 <HAL_I2C_SlaveTxCpltCallback>
}
 80032cc:	e004      	b.n	80032d8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032d6:	615a      	str	r2, [r3, #20]
}
 80032d8:	bf00      	nop
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	ffff0000 	.word	0xffff0000

080032e4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80032fc:	7bbb      	ldrb	r3, [r7, #14]
 80032fe:	2b10      	cmp	r3, #16
 8003300:	d002      	beq.n	8003308 <I2C_ITError+0x24>
 8003302:	7bbb      	ldrb	r3, [r7, #14]
 8003304:	2b40      	cmp	r3, #64	; 0x40
 8003306:	d10a      	bne.n	800331e <I2C_ITError+0x3a>
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	2b22      	cmp	r3, #34	; 0x22
 800330c:	d107      	bne.n	800331e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800331c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800331e:	7bfb      	ldrb	r3, [r7, #15]
 8003320:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003324:	2b28      	cmp	r3, #40	; 0x28
 8003326:	d107      	bne.n	8003338 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2228      	movs	r2, #40	; 0x28
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003336:	e015      	b.n	8003364 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003346:	d00a      	beq.n	800335e <I2C_ITError+0x7a>
 8003348:	7bfb      	ldrb	r3, [r7, #15]
 800334a:	2b60      	cmp	r3, #96	; 0x60
 800334c:	d007      	beq.n	800335e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800336e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003372:	d162      	bne.n	800343a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003382:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003388:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b01      	cmp	r3, #1
 8003390:	d020      	beq.n	80033d4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003396:	4a6a      	ldr	r2, [pc, #424]	; (8003540 <I2C_ITError+0x25c>)
 8003398:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd fe78 	bl	8001094 <HAL_DMA_Abort_IT>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 8089 	beq.w	80034be <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0201 	bic.w	r2, r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033ce:	4610      	mov	r0, r2
 80033d0:	4798      	blx	r3
 80033d2:	e074      	b.n	80034be <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d8:	4a59      	ldr	r2, [pc, #356]	; (8003540 <I2C_ITError+0x25c>)
 80033da:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fd fe57 	bl	8001094 <HAL_DMA_Abort_IT>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d068      	beq.n	80034be <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f6:	2b40      	cmp	r3, #64	; 0x40
 80033f8:	d10b      	bne.n	8003412 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	691a      	ldr	r2, [r3, #16]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0201 	bic.w	r2, r2, #1
 8003420:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2220      	movs	r2, #32
 8003426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003434:	4610      	mov	r0, r2
 8003436:	4798      	blx	r3
 8003438:	e041      	b.n	80034be <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b60      	cmp	r3, #96	; 0x60
 8003444:	d125      	bne.n	8003492 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2220      	movs	r2, #32
 800344a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345e:	2b40      	cmp	r3, #64	; 0x40
 8003460:	d10b      	bne.n	800347a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 0201 	bic.w	r2, r2, #1
 8003488:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fe fef6 	bl	800227c <HAL_I2C_AbortCpltCallback>
 8003490:	e015      	b.n	80034be <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349c:	2b40      	cmp	r3, #64	; 0x40
 800349e:	d10b      	bne.n	80034b8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691a      	ldr	r2, [r3, #16]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7fe fed5 	bl	8002268 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10e      	bne.n	80034ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d109      	bne.n	80034ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d104      	bne.n	80034ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d007      	beq.n	80034fc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034fa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003502:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b04      	cmp	r3, #4
 800350e:	d113      	bne.n	8003538 <I2C_ITError+0x254>
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	2b28      	cmp	r3, #40	; 0x28
 8003514:	d110      	bne.n	8003538 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a0a      	ldr	r2, [pc, #40]	; (8003544 <I2C_ITError+0x260>)
 800351a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2220      	movs	r2, #32
 8003526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7fe fe7a 	bl	800222c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003538:	bf00      	nop
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	08003549 	.word	0x08003549
 8003544:	ffff0000 	.word	0xffff0000

08003548 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003558:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003560:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003562:	4b4b      	ldr	r3, [pc, #300]	; (8003690 <I2C_DMAAbort+0x148>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	08db      	lsrs	r3, r3, #3
 8003568:	4a4a      	ldr	r2, [pc, #296]	; (8003694 <I2C_DMAAbort+0x14c>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	0a1a      	lsrs	r2, r3, #8
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	00da      	lsls	r2, r3, #3
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f043 0220 	orr.w	r2, r3, #32
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800358e:	e00a      	b.n	80035a6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	3b01      	subs	r3, #1
 8003594:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035a4:	d0ea      	beq.n	800357c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b2:	2200      	movs	r2, #0
 80035b4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	2200      	movs	r2, #0
 80035c4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2200      	movs	r2, #0
 80035da:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e8:	2200      	movs	r2, #0
 80035ea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f8:	2200      	movs	r2, #0
 80035fa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0201 	bic.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b60      	cmp	r3, #96	; 0x60
 8003616:	d10e      	bne.n	8003636 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	2200      	movs	r2, #0
 800362c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800362e:	6978      	ldr	r0, [r7, #20]
 8003630:	f7fe fe24 	bl	800227c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003634:	e027      	b.n	8003686 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003636:	7cfb      	ldrb	r3, [r7, #19]
 8003638:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800363c:	2b28      	cmp	r3, #40	; 0x28
 800363e:	d117      	bne.n	8003670 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800365e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	2200      	movs	r2, #0
 8003664:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2228      	movs	r2, #40	; 0x28
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800366e:	e007      	b.n	8003680 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003680:	6978      	ldr	r0, [r7, #20]
 8003682:	f7fe fdf1 	bl	8002268 <HAL_I2C_ErrorCallback>
}
 8003686:	bf00      	nop
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000000 	.word	0x20000000
 8003694:	14f8b589 	.word	0x14f8b589

08003698 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	4613      	mov	r3, r2
 80036a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036a8:	e025      	b.n	80036f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036b0:	d021      	beq.n	80036f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b2:	f7fd fbcf 	bl	8000e54 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d302      	bcc.n	80036c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d116      	bne.n	80036f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	f043 0220 	orr.w	r2, r3, #32
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e023      	b.n	800373e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	0c1b      	lsrs	r3, r3, #16
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d10d      	bne.n	800371c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	43da      	mvns	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	4013      	ands	r3, r2
 800370c:	b29b      	uxth	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	bf0c      	ite	eq
 8003712:	2301      	moveq	r3, #1
 8003714:	2300      	movne	r3, #0
 8003716:	b2db      	uxtb	r3, r3
 8003718:	461a      	mov	r2, r3
 800371a:	e00c      	b.n	8003736 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	43da      	mvns	r2, r3
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	4013      	ands	r3, r2
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	bf0c      	ite	eq
 800372e:	2301      	moveq	r3, #1
 8003730:	2300      	movne	r3, #0
 8003732:	b2db      	uxtb	r3, r3
 8003734:	461a      	mov	r2, r3
 8003736:	79fb      	ldrb	r3, [r7, #7]
 8003738:	429a      	cmp	r2, r3
 800373a:	d0b6      	beq.n	80036aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b084      	sub	sp, #16
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003752:	e02d      	b.n	80037b0 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f8fd 	bl	8003954 <I2C_IsAcknowledgeFailed>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e02d      	b.n	80037c0 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800376a:	d021      	beq.n	80037b0 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376c:	f7fd fb72 	bl	8000e54 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	429a      	cmp	r2, r3
 800377a:	d302      	bcc.n	8003782 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d116      	bne.n	80037b0 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2220      	movs	r2, #32
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	f043 0220 	orr.w	r2, r3, #32
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e007      	b.n	80037c0 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ba:	2b80      	cmp	r3, #128	; 0x80
 80037bc:	d1ca      	bne.n	8003754 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037d4:	e029      	b.n	800382a <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 f8bc 	bl	8003954 <I2C_IsAcknowledgeFailed>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e029      	b.n	800383a <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e6:	f7fd fb35 	bl	8000e54 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d302      	bcc.n	80037fc <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d116      	bne.n	800382a <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f043 0220 	orr.w	r2, r3, #32
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e007      	b.n	800383a <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	f003 0310 	and.w	r3, r3, #16
 8003834:	2b10      	cmp	r3, #16
 8003836:	d1ce      	bne.n	80037d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003850:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	08db      	lsrs	r3, r3, #3
 8003856:	4a13      	ldr	r2, [pc, #76]	; (80038a4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	0a1a      	lsrs	r2, r3, #8
 800385e:	4613      	mov	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	3b01      	subs	r3, #1
 800386a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d107      	bne.n	8003882 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	f043 0220 	orr.w	r2, r3, #32
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e008      	b.n	8003894 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800388c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003890:	d0e9      	beq.n	8003866 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	20000000 	.word	0x20000000
 80038a4:	14f8b589 	.word	0x14f8b589

080038a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038b4:	e042      	b.n	800393c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	f003 0310 	and.w	r3, r3, #16
 80038c0:	2b10      	cmp	r3, #16
 80038c2:	d119      	bne.n	80038f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0210 	mvn.w	r2, #16
 80038cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e029      	b.n	800394c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f8:	f7fd faac 	bl	8000e54 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	429a      	cmp	r2, r3
 8003906:	d302      	bcc.n	800390e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d116      	bne.n	800393c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	f043 0220 	orr.w	r2, r3, #32
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e007      	b.n	800394c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003946:	2b40      	cmp	r3, #64	; 0x40
 8003948:	d1b5      	bne.n	80038b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800396a:	d11b      	bne.n	80039a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003974:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	f043 0204 	orr.w	r2, r3, #4
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039be:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80039c2:	d103      	bne.n	80039cc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80039ca:	e007      	b.n	80039dc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80039d4:	d102      	bne.n	80039dc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2208      	movs	r2, #8
 80039da:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0cc      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039fc:	4b68      	ldr	r3, [pc, #416]	; (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 030f 	and.w	r3, r3, #15
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d90c      	bls.n	8003a24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0a:	4b65      	ldr	r3, [pc, #404]	; (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a12:	4b63      	ldr	r3, [pc, #396]	; (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0b8      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d020      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a3c:	4b59      	ldr	r3, [pc, #356]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4a58      	ldr	r2, [pc, #352]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0308 	and.w	r3, r3, #8
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a54:	4b53      	ldr	r3, [pc, #332]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	4a52      	ldr	r2, [pc, #328]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a60:	4b50      	ldr	r3, [pc, #320]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	494d      	ldr	r1, [pc, #308]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d044      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d107      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a86:	4b47      	ldr	r3, [pc, #284]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d119      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e07f      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d003      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa6:	4b3f      	ldr	r3, [pc, #252]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d109      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e06f      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab6:	4b3b      	ldr	r3, [pc, #236]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e067      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ac6:	4b37      	ldr	r3, [pc, #220]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f023 0203 	bic.w	r2, r3, #3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	4934      	ldr	r1, [pc, #208]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ad8:	f7fd f9bc 	bl	8000e54 <HAL_GetTick>
 8003adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ade:	e00a      	b.n	8003af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae0:	f7fd f9b8 	bl	8000e54 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e04f      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af6:	4b2b      	ldr	r3, [pc, #172]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 020c 	and.w	r2, r3, #12
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d1eb      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b08:	4b25      	ldr	r3, [pc, #148]	; (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 030f 	and.w	r3, r3, #15
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d20c      	bcs.n	8003b30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b16:	4b22      	ldr	r3, [pc, #136]	; (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1e:	4b20      	ldr	r3, [pc, #128]	; (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e032      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b3c:	4b19      	ldr	r3, [pc, #100]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4916      	ldr	r1, [pc, #88]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d009      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b5a:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	490e      	ldr	r1, [pc, #56]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b6e:	f000 f873 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 8003b72:	4602      	mov	r2, r0
 8003b74:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	490a      	ldr	r1, [pc, #40]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b80:	5ccb      	ldrb	r3, [r1, r3]
 8003b82:	fa22 f303 	lsr.w	r3, r2, r3
 8003b86:	4a09      	ldr	r2, [pc, #36]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b8a:	4b09      	ldr	r3, [pc, #36]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fd f856 	bl	8000c40 <HAL_InitTick>

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40023c00 	.word	0x40023c00
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	08007698 	.word	0x08007698
 8003bac:	20000000 	.word	0x20000000
 8003bb0:	20000004 	.word	0x20000004

08003bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bb8:	4b03      	ldr	r3, [pc, #12]	; (8003bc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bba:	681b      	ldr	r3, [r3, #0]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20000000 	.word	0x20000000

08003bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bd0:	f7ff fff0 	bl	8003bb4 <HAL_RCC_GetHCLKFreq>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	4b05      	ldr	r3, [pc, #20]	; (8003bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	0a9b      	lsrs	r3, r3, #10
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	4903      	ldr	r1, [pc, #12]	; (8003bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003be2:	5ccb      	ldrb	r3, [r1, r3]
 8003be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	080076a8 	.word	0x080076a8

08003bf4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	220f      	movs	r2, #15
 8003c02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c04:	4b12      	ldr	r3, [pc, #72]	; (8003c50 <HAL_RCC_GetClockConfig+0x5c>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 0203 	and.w	r2, r3, #3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c10:	4b0f      	ldr	r3, [pc, #60]	; (8003c50 <HAL_RCC_GetClockConfig+0x5c>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <HAL_RCC_GetClockConfig+0x5c>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c28:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <HAL_RCC_GetClockConfig+0x5c>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	08db      	lsrs	r3, r3, #3
 8003c2e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c36:	4b07      	ldr	r3, [pc, #28]	; (8003c54 <HAL_RCC_GetClockConfig+0x60>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 020f 	and.w	r2, r3, #15
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	601a      	str	r2, [r3, #0]
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	40023800 	.word	0x40023800
 8003c54:	40023c00 	.word	0x40023c00

08003c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c5c:	b088      	sub	sp, #32
 8003c5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c74:	4bce      	ldr	r3, [pc, #824]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 030c 	and.w	r3, r3, #12
 8003c7c:	2b0c      	cmp	r3, #12
 8003c7e:	f200 818d 	bhi.w	8003f9c <HAL_RCC_GetSysClockFreq+0x344>
 8003c82:	a201      	add	r2, pc, #4	; (adr r2, 8003c88 <HAL_RCC_GetSysClockFreq+0x30>)
 8003c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c88:	08003cbd 	.word	0x08003cbd
 8003c8c:	08003f9d 	.word	0x08003f9d
 8003c90:	08003f9d 	.word	0x08003f9d
 8003c94:	08003f9d 	.word	0x08003f9d
 8003c98:	08003cc3 	.word	0x08003cc3
 8003c9c:	08003f9d 	.word	0x08003f9d
 8003ca0:	08003f9d 	.word	0x08003f9d
 8003ca4:	08003f9d 	.word	0x08003f9d
 8003ca8:	08003cc9 	.word	0x08003cc9
 8003cac:	08003f9d 	.word	0x08003f9d
 8003cb0:	08003f9d 	.word	0x08003f9d
 8003cb4:	08003f9d 	.word	0x08003f9d
 8003cb8:	08003e3d 	.word	0x08003e3d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cbc:	4bbd      	ldr	r3, [pc, #756]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003cbe:	61bb      	str	r3, [r7, #24]
       break;
 8003cc0:	e16f      	b.n	8003fa2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cc2:	4bbd      	ldr	r3, [pc, #756]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x360>)
 8003cc4:	61bb      	str	r3, [r7, #24]
      break;
 8003cc6:	e16c      	b.n	8003fa2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cc8:	4bb9      	ldr	r3, [pc, #740]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cd0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cd2:	4bb7      	ldr	r3, [pc, #732]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d053      	beq.n	8003d86 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cde:	4bb4      	ldr	r3, [pc, #720]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	099b      	lsrs	r3, r3, #6
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003cee:	f04f 0100 	mov.w	r1, #0
 8003cf2:	ea02 0400 	and.w	r4, r2, r0
 8003cf6:	603c      	str	r4, [r7, #0]
 8003cf8:	400b      	ands	r3, r1
 8003cfa:	607b      	str	r3, [r7, #4]
 8003cfc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d00:	4620      	mov	r0, r4
 8003d02:	4629      	mov	r1, r5
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	014b      	lsls	r3, r1, #5
 8003d0e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d12:	0142      	lsls	r2, r0, #5
 8003d14:	4610      	mov	r0, r2
 8003d16:	4619      	mov	r1, r3
 8003d18:	4623      	mov	r3, r4
 8003d1a:	1ac0      	subs	r0, r0, r3
 8003d1c:	462b      	mov	r3, r5
 8003d1e:	eb61 0103 	sbc.w	r1, r1, r3
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	018b      	lsls	r3, r1, #6
 8003d2c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d30:	0182      	lsls	r2, r0, #6
 8003d32:	1a12      	subs	r2, r2, r0
 8003d34:	eb63 0301 	sbc.w	r3, r3, r1
 8003d38:	f04f 0000 	mov.w	r0, #0
 8003d3c:	f04f 0100 	mov.w	r1, #0
 8003d40:	00d9      	lsls	r1, r3, #3
 8003d42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d46:	00d0      	lsls	r0, r2, #3
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4621      	mov	r1, r4
 8003d4e:	1852      	adds	r2, r2, r1
 8003d50:	4629      	mov	r1, r5
 8003d52:	eb43 0101 	adc.w	r1, r3, r1
 8003d56:	460b      	mov	r3, r1
 8003d58:	f04f 0000 	mov.w	r0, #0
 8003d5c:	f04f 0100 	mov.w	r1, #0
 8003d60:	0259      	lsls	r1, r3, #9
 8003d62:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003d66:	0250      	lsls	r0, r2, #9
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	4619      	mov	r1, r3
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	461a      	mov	r2, r3
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	f7fc fa4a 	bl	8000210 <__aeabi_uldivmod>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4613      	mov	r3, r2
 8003d82:	61fb      	str	r3, [r7, #28]
 8003d84:	e04c      	b.n	8003e20 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d86:	4b8a      	ldr	r3, [pc, #552]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	099b      	lsrs	r3, r3, #6
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	f04f 0300 	mov.w	r3, #0
 8003d92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d96:	f04f 0100 	mov.w	r1, #0
 8003d9a:	ea02 0a00 	and.w	sl, r2, r0
 8003d9e:	ea03 0b01 	and.w	fp, r3, r1
 8003da2:	4650      	mov	r0, sl
 8003da4:	4659      	mov	r1, fp
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	014b      	lsls	r3, r1, #5
 8003db0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003db4:	0142      	lsls	r2, r0, #5
 8003db6:	4610      	mov	r0, r2
 8003db8:	4619      	mov	r1, r3
 8003dba:	ebb0 000a 	subs.w	r0, r0, sl
 8003dbe:	eb61 010b 	sbc.w	r1, r1, fp
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	f04f 0300 	mov.w	r3, #0
 8003dca:	018b      	lsls	r3, r1, #6
 8003dcc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003dd0:	0182      	lsls	r2, r0, #6
 8003dd2:	1a12      	subs	r2, r2, r0
 8003dd4:	eb63 0301 	sbc.w	r3, r3, r1
 8003dd8:	f04f 0000 	mov.w	r0, #0
 8003ddc:	f04f 0100 	mov.w	r1, #0
 8003de0:	00d9      	lsls	r1, r3, #3
 8003de2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003de6:	00d0      	lsls	r0, r2, #3
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	eb12 020a 	adds.w	r2, r2, sl
 8003df0:	eb43 030b 	adc.w	r3, r3, fp
 8003df4:	f04f 0000 	mov.w	r0, #0
 8003df8:	f04f 0100 	mov.w	r1, #0
 8003dfc:	0299      	lsls	r1, r3, #10
 8003dfe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e02:	0290      	lsls	r0, r2, #10
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4610      	mov	r0, r2
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	f04f 0300 	mov.w	r3, #0
 8003e14:	f7fc f9fc 	bl	8000210 <__aeabi_uldivmod>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e20:	4b63      	ldr	r3, [pc, #396]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	0c1b      	lsrs	r3, r3, #16
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003e30:	69fa      	ldr	r2, [r7, #28]
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e38:	61bb      	str	r3, [r7, #24]
      break;
 8003e3a:	e0b2      	b.n	8003fa2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e3c:	4b5c      	ldr	r3, [pc, #368]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e44:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e46:	4b5a      	ldr	r3, [pc, #360]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d04d      	beq.n	8003eee <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e52:	4b57      	ldr	r3, [pc, #348]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	099b      	lsrs	r3, r3, #6
 8003e58:	461a      	mov	r2, r3
 8003e5a:	f04f 0300 	mov.w	r3, #0
 8003e5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e62:	f04f 0100 	mov.w	r1, #0
 8003e66:	ea02 0800 	and.w	r8, r2, r0
 8003e6a:	ea03 0901 	and.w	r9, r3, r1
 8003e6e:	4640      	mov	r0, r8
 8003e70:	4649      	mov	r1, r9
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	f04f 0300 	mov.w	r3, #0
 8003e7a:	014b      	lsls	r3, r1, #5
 8003e7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e80:	0142      	lsls	r2, r0, #5
 8003e82:	4610      	mov	r0, r2
 8003e84:	4619      	mov	r1, r3
 8003e86:	ebb0 0008 	subs.w	r0, r0, r8
 8003e8a:	eb61 0109 	sbc.w	r1, r1, r9
 8003e8e:	f04f 0200 	mov.w	r2, #0
 8003e92:	f04f 0300 	mov.w	r3, #0
 8003e96:	018b      	lsls	r3, r1, #6
 8003e98:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e9c:	0182      	lsls	r2, r0, #6
 8003e9e:	1a12      	subs	r2, r2, r0
 8003ea0:	eb63 0301 	sbc.w	r3, r3, r1
 8003ea4:	f04f 0000 	mov.w	r0, #0
 8003ea8:	f04f 0100 	mov.w	r1, #0
 8003eac:	00d9      	lsls	r1, r3, #3
 8003eae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003eb2:	00d0      	lsls	r0, r2, #3
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	eb12 0208 	adds.w	r2, r2, r8
 8003ebc:	eb43 0309 	adc.w	r3, r3, r9
 8003ec0:	f04f 0000 	mov.w	r0, #0
 8003ec4:	f04f 0100 	mov.w	r1, #0
 8003ec8:	0259      	lsls	r1, r3, #9
 8003eca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003ece:	0250      	lsls	r0, r2, #9
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	461a      	mov	r2, r3
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	f7fc f996 	bl	8000210 <__aeabi_uldivmod>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4613      	mov	r3, r2
 8003eea:	61fb      	str	r3, [r7, #28]
 8003eec:	e04a      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eee:	4b30      	ldr	r3, [pc, #192]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	099b      	lsrs	r3, r3, #6
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	f04f 0300 	mov.w	r3, #0
 8003efa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003efe:	f04f 0100 	mov.w	r1, #0
 8003f02:	ea02 0400 	and.w	r4, r2, r0
 8003f06:	ea03 0501 	and.w	r5, r3, r1
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	014b      	lsls	r3, r1, #5
 8003f18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f1c:	0142      	lsls	r2, r0, #5
 8003f1e:	4610      	mov	r0, r2
 8003f20:	4619      	mov	r1, r3
 8003f22:	1b00      	subs	r0, r0, r4
 8003f24:	eb61 0105 	sbc.w	r1, r1, r5
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	018b      	lsls	r3, r1, #6
 8003f32:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f36:	0182      	lsls	r2, r0, #6
 8003f38:	1a12      	subs	r2, r2, r0
 8003f3a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f3e:	f04f 0000 	mov.w	r0, #0
 8003f42:	f04f 0100 	mov.w	r1, #0
 8003f46:	00d9      	lsls	r1, r3, #3
 8003f48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f4c:	00d0      	lsls	r0, r2, #3
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	1912      	adds	r2, r2, r4
 8003f54:	eb45 0303 	adc.w	r3, r5, r3
 8003f58:	f04f 0000 	mov.w	r0, #0
 8003f5c:	f04f 0100 	mov.w	r1, #0
 8003f60:	0299      	lsls	r1, r3, #10
 8003f62:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f66:	0290      	lsls	r0, r2, #10
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	4619      	mov	r1, r3
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	461a      	mov	r2, r3
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	f7fc f94a 	bl	8000210 <__aeabi_uldivmod>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4613      	mov	r3, r2
 8003f82:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f84:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	0f1b      	lsrs	r3, r3, #28
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003f90:	69fa      	ldr	r2, [r7, #28]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f98:	61bb      	str	r3, [r7, #24]
      break;
 8003f9a:	e002      	b.n	8003fa2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f9c:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003f9e:	61bb      	str	r3, [r7, #24]
      break;
 8003fa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fa2:	69bb      	ldr	r3, [r7, #24]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3720      	adds	r7, #32
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fae:	bf00      	nop
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	00f42400 	.word	0x00f42400
 8003fb8:	007a1200 	.word	0x007a1200

08003fbc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e28d      	b.n	80044ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 8083 	beq.w	80040e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003fdc:	4b94      	ldr	r3, [pc, #592]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 030c 	and.w	r3, r3, #12
 8003fe4:	2b04      	cmp	r3, #4
 8003fe6:	d019      	beq.n	800401c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003fe8:	4b91      	ldr	r3, [pc, #580]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d106      	bne.n	8004002 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ff4:	4b8e      	ldr	r3, [pc, #568]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ffc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004000:	d00c      	beq.n	800401c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004002:	4b8b      	ldr	r3, [pc, #556]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800400a:	2b0c      	cmp	r3, #12
 800400c:	d112      	bne.n	8004034 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800400e:	4b88      	ldr	r3, [pc, #544]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004016:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800401a:	d10b      	bne.n	8004034 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800401c:	4b84      	ldr	r3, [pc, #528]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d05b      	beq.n	80040e0 <HAL_RCC_OscConfig+0x124>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d157      	bne.n	80040e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e25a      	b.n	80044ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800403c:	d106      	bne.n	800404c <HAL_RCC_OscConfig+0x90>
 800403e:	4b7c      	ldr	r3, [pc, #496]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a7b      	ldr	r2, [pc, #492]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 8004044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	e01d      	b.n	8004088 <HAL_RCC_OscConfig+0xcc>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004054:	d10c      	bne.n	8004070 <HAL_RCC_OscConfig+0xb4>
 8004056:	4b76      	ldr	r3, [pc, #472]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a75      	ldr	r2, [pc, #468]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 800405c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	4b73      	ldr	r3, [pc, #460]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a72      	ldr	r2, [pc, #456]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 8004068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	e00b      	b.n	8004088 <HAL_RCC_OscConfig+0xcc>
 8004070:	4b6f      	ldr	r3, [pc, #444]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a6e      	ldr	r2, [pc, #440]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 8004076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	4b6c      	ldr	r3, [pc, #432]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a6b      	ldr	r2, [pc, #428]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 8004082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d013      	beq.n	80040b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004090:	f7fc fee0 	bl	8000e54 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004098:	f7fc fedc 	bl	8000e54 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b64      	cmp	r3, #100	; 0x64
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e21f      	b.n	80044ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040aa:	4b61      	ldr	r3, [pc, #388]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f0      	beq.n	8004098 <HAL_RCC_OscConfig+0xdc>
 80040b6:	e014      	b.n	80040e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b8:	f7fc fecc 	bl	8000e54 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040c0:	f7fc fec8 	bl	8000e54 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b64      	cmp	r3, #100	; 0x64
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e20b      	b.n	80044ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040d2:	4b57      	ldr	r3, [pc, #348]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1f0      	bne.n	80040c0 <HAL_RCC_OscConfig+0x104>
 80040de:	e000      	b.n	80040e2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d06f      	beq.n	80041ce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80040ee:	4b50      	ldr	r3, [pc, #320]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 030c 	and.w	r3, r3, #12
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d017      	beq.n	800412a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040fa:	4b4d      	ldr	r3, [pc, #308]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004102:	2b08      	cmp	r3, #8
 8004104:	d105      	bne.n	8004112 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004106:	4b4a      	ldr	r3, [pc, #296]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00b      	beq.n	800412a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004112:	4b47      	ldr	r3, [pc, #284]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800411a:	2b0c      	cmp	r3, #12
 800411c:	d11c      	bne.n	8004158 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800411e:	4b44      	ldr	r3, [pc, #272]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d116      	bne.n	8004158 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800412a:	4b41      	ldr	r3, [pc, #260]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <HAL_RCC_OscConfig+0x186>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d001      	beq.n	8004142 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e1d3      	b.n	80044ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004142:	4b3b      	ldr	r3, [pc, #236]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	4937      	ldr	r1, [pc, #220]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 8004152:	4313      	orrs	r3, r2
 8004154:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004156:	e03a      	b.n	80041ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d020      	beq.n	80041a2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004160:	4b34      	ldr	r3, [pc, #208]	; (8004234 <HAL_RCC_OscConfig+0x278>)
 8004162:	2201      	movs	r2, #1
 8004164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004166:	f7fc fe75 	bl	8000e54 <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800416e:	f7fc fe71 	bl	8000e54 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e1b4      	b.n	80044ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004180:	4b2b      	ldr	r3, [pc, #172]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0f0      	beq.n	800416e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800418c:	4b28      	ldr	r3, [pc, #160]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	4925      	ldr	r1, [pc, #148]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 800419c:	4313      	orrs	r3, r2
 800419e:	600b      	str	r3, [r1, #0]
 80041a0:	e015      	b.n	80041ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041a2:	4b24      	ldr	r3, [pc, #144]	; (8004234 <HAL_RCC_OscConfig+0x278>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a8:	f7fc fe54 	bl	8000e54 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041b0:	f7fc fe50 	bl	8000e54 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e193      	b.n	80044ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041c2:	4b1b      	ldr	r3, [pc, #108]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f0      	bne.n	80041b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d036      	beq.n	8004248 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d016      	beq.n	8004210 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041e2:	4b15      	ldr	r3, [pc, #84]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 80041e4:	2201      	movs	r2, #1
 80041e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e8:	f7fc fe34 	bl	8000e54 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041f0:	f7fc fe30 	bl	8000e54 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e173      	b.n	80044ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004202:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <HAL_RCC_OscConfig+0x274>)
 8004204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0f0      	beq.n	80041f0 <HAL_RCC_OscConfig+0x234>
 800420e:	e01b      	b.n	8004248 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004210:	4b09      	ldr	r3, [pc, #36]	; (8004238 <HAL_RCC_OscConfig+0x27c>)
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004216:	f7fc fe1d 	bl	8000e54 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800421c:	e00e      	b.n	800423c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800421e:	f7fc fe19 	bl	8000e54 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d907      	bls.n	800423c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e15c      	b.n	80044ea <HAL_RCC_OscConfig+0x52e>
 8004230:	40023800 	.word	0x40023800
 8004234:	42470000 	.word	0x42470000
 8004238:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800423c:	4b8a      	ldr	r3, [pc, #552]	; (8004468 <HAL_RCC_OscConfig+0x4ac>)
 800423e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1ea      	bne.n	800421e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 8097 	beq.w	8004384 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004256:	2300      	movs	r3, #0
 8004258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800425a:	4b83      	ldr	r3, [pc, #524]	; (8004468 <HAL_RCC_OscConfig+0x4ac>)
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10f      	bne.n	8004286 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004266:	2300      	movs	r3, #0
 8004268:	60bb      	str	r3, [r7, #8]
 800426a:	4b7f      	ldr	r3, [pc, #508]	; (8004468 <HAL_RCC_OscConfig+0x4ac>)
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	4a7e      	ldr	r2, [pc, #504]	; (8004468 <HAL_RCC_OscConfig+0x4ac>)
 8004270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004274:	6413      	str	r3, [r2, #64]	; 0x40
 8004276:	4b7c      	ldr	r3, [pc, #496]	; (8004468 <HAL_RCC_OscConfig+0x4ac>)
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427e:	60bb      	str	r3, [r7, #8]
 8004280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004282:	2301      	movs	r3, #1
 8004284:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004286:	4b79      	ldr	r3, [pc, #484]	; (800446c <HAL_RCC_OscConfig+0x4b0>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428e:	2b00      	cmp	r3, #0
 8004290:	d118      	bne.n	80042c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004292:	4b76      	ldr	r3, [pc, #472]	; (800446c <HAL_RCC_OscConfig+0x4b0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a75      	ldr	r2, [pc, #468]	; (800446c <HAL_RCC_OscConfig+0x4b0>)
 8004298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800429c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800429e:	f7fc fdd9 	bl	8000e54 <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042a6:	f7fc fdd5 	bl	8000e54 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e118      	b.n	80044ea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b8:	4b6c      	ldr	r3, [pc, #432]	; (800446c <HAL_RCC_OscConfig+0x4b0>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0f0      	beq.n	80042a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d106      	bne.n	80042da <HAL_RCC_OscConfig+0x31e>
 80042cc:	4b66      	ldr	r3, [pc, #408]	; (8004468 <HAL_RCC_OscConfig+0x4ac>)
 80042ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d0:	4a65      	ldr	r2, [pc, #404]	; (8004468 <HAL_RCC_OscConfig+0x4ac>)
 80042d2:	f043 0301 	orr.w	r3, r3, #1
 80042d6:	6713      	str	r3, [r2, #112]	; 0x70
 80042d8:	e01c      	b.n	8004314 <HAL_RCC_OscConfig+0x358>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2b05      	cmp	r3, #5
 80042e0:	d10c      	bne.n	80042fc <HAL_RCC_OscConfig+0x340>
 80042e2:	4b61      	ldr	r3, [pc, #388]	; (8004468 <HAL_RCC_OscConfig+0x4ac>)
 80042e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e6:	4a60      	ldr	r2, [pc, #384]	; (8004468 <HAL_RCC_OscConfig+0x4ac>)
 80042e8:	f043 0304 	orr.w	r3, r3, #4
 80042ec:	6713      	str	r3, [r2, #112]	; 0x70
 80042ee:	4b5e      	ldr	r3, [pc, #376]	; (8004468 <HAL_RCC_OscConfig+0x4ac>)
 80042f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f2:	4a5d      	ldr	r2, [pc, #372]	; (8004468 <HAL_RCC_OscConfig+0x4ac>)
 80042f4:	f043 0301 	orr.w	r3, r3, #1
 80042f8:	6713      	str	r3, [r2, #112]	; 0x70
 80042fa:	e00b      	b.n	8004314 <HAL_RCC_OscConfig+0x358>
 80042fc:	4b5a      	ldr	r3, [pc, #360]	; (8004468 <HAL_RCC_OscConfig+0x4ac>)
 80042fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004300:	4a59      	ldr	r2, [pc, #356]	; (8004468 <HAL_RCC_OscConfig+0x4ac>)
 8004302:	f023 0301 	bic.w	r3, r3, #1
 8004306:	6713      	str	r3, [r2, #112]	; 0x70
 8004308:	4b57      	ldr	r3, [pc, #348]	; (8004468 <HAL_RCC_OscConfig+0x4ac>)
 800430a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430c:	4a56      	ldr	r2, [pc, #344]	; (8004468 <HAL_RCC_OscConfig+0x4ac>)
 800430e:	f023 0304 	bic.w	r3, r3, #4
 8004312:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d015      	beq.n	8004348 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800431c:	f7fc fd9a 	bl	8000e54 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004322:	e00a      	b.n	800433a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004324:	f7fc fd96 	bl	8000e54 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004332:	4293      	cmp	r3, r2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e0d7      	b.n	80044ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800433a:	4b4b      	ldr	r3, [pc, #300]	; (8004468 <HAL_RCC_OscConfig+0x4ac>)
 800433c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0ee      	beq.n	8004324 <HAL_RCC_OscConfig+0x368>
 8004346:	e014      	b.n	8004372 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004348:	f7fc fd84 	bl	8000e54 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800434e:	e00a      	b.n	8004366 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004350:	f7fc fd80 	bl	8000e54 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	f241 3288 	movw	r2, #5000	; 0x1388
 800435e:	4293      	cmp	r3, r2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e0c1      	b.n	80044ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004366:	4b40      	ldr	r3, [pc, #256]	; (8004468 <HAL_RCC_OscConfig+0x4ac>)
 8004368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1ee      	bne.n	8004350 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004372:	7dfb      	ldrb	r3, [r7, #23]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d105      	bne.n	8004384 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004378:	4b3b      	ldr	r3, [pc, #236]	; (8004468 <HAL_RCC_OscConfig+0x4ac>)
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	4a3a      	ldr	r2, [pc, #232]	; (8004468 <HAL_RCC_OscConfig+0x4ac>)
 800437e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004382:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 80ad 	beq.w	80044e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800438e:	4b36      	ldr	r3, [pc, #216]	; (8004468 <HAL_RCC_OscConfig+0x4ac>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 030c 	and.w	r3, r3, #12
 8004396:	2b08      	cmp	r3, #8
 8004398:	d060      	beq.n	800445c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d145      	bne.n	800442e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a2:	4b33      	ldr	r3, [pc, #204]	; (8004470 <HAL_RCC_OscConfig+0x4b4>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a8:	f7fc fd54 	bl	8000e54 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b0:	f7fc fd50 	bl	8000e54 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e093      	b.n	80044ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c2:	4b29      	ldr	r3, [pc, #164]	; (8004468 <HAL_RCC_OscConfig+0x4ac>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f0      	bne.n	80043b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69da      	ldr	r2, [r3, #28]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	019b      	lsls	r3, r3, #6
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e4:	085b      	lsrs	r3, r3, #1
 80043e6:	3b01      	subs	r3, #1
 80043e8:	041b      	lsls	r3, r3, #16
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	061b      	lsls	r3, r3, #24
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f8:	071b      	lsls	r3, r3, #28
 80043fa:	491b      	ldr	r1, [pc, #108]	; (8004468 <HAL_RCC_OscConfig+0x4ac>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004400:	4b1b      	ldr	r3, [pc, #108]	; (8004470 <HAL_RCC_OscConfig+0x4b4>)
 8004402:	2201      	movs	r2, #1
 8004404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004406:	f7fc fd25 	bl	8000e54 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800440e:	f7fc fd21 	bl	8000e54 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e064      	b.n	80044ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004420:	4b11      	ldr	r3, [pc, #68]	; (8004468 <HAL_RCC_OscConfig+0x4ac>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f0      	beq.n	800440e <HAL_RCC_OscConfig+0x452>
 800442c:	e05c      	b.n	80044e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800442e:	4b10      	ldr	r3, [pc, #64]	; (8004470 <HAL_RCC_OscConfig+0x4b4>)
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004434:	f7fc fd0e 	bl	8000e54 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800443c:	f7fc fd0a 	bl	8000e54 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e04d      	b.n	80044ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800444e:	4b06      	ldr	r3, [pc, #24]	; (8004468 <HAL_RCC_OscConfig+0x4ac>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f0      	bne.n	800443c <HAL_RCC_OscConfig+0x480>
 800445a:	e045      	b.n	80044e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d107      	bne.n	8004474 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e040      	b.n	80044ea <HAL_RCC_OscConfig+0x52e>
 8004468:	40023800 	.word	0x40023800
 800446c:	40007000 	.word	0x40007000
 8004470:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004474:	4b1f      	ldr	r3, [pc, #124]	; (80044f4 <HAL_RCC_OscConfig+0x538>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d030      	beq.n	80044e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800448c:	429a      	cmp	r2, r3
 800448e:	d129      	bne.n	80044e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800449a:	429a      	cmp	r2, r3
 800449c:	d122      	bne.n	80044e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044a4:	4013      	ands	r3, r2
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d119      	bne.n	80044e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ba:	085b      	lsrs	r3, r3, #1
 80044bc:	3b01      	subs	r3, #1
 80044be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d10f      	bne.n	80044e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d107      	bne.n	80044e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d001      	beq.n	80044e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3718      	adds	r7, #24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40023800 	.word	0x40023800

080044f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e041      	b.n	800458e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f839 	bl	8004596 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3304      	adds	r3, #4
 8004534:	4619      	mov	r1, r3
 8004536:	4610      	mov	r0, r2
 8004538:	f000 fbec 	bl	8004d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
	...

080045ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d001      	beq.n	80045c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e04e      	b.n	8004662 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a23      	ldr	r2, [pc, #140]	; (8004670 <HAL_TIM_Base_Start_IT+0xc4>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d022      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x80>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ee:	d01d      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x80>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a1f      	ldr	r2, [pc, #124]	; (8004674 <HAL_TIM_Base_Start_IT+0xc8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d018      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x80>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a1e      	ldr	r2, [pc, #120]	; (8004678 <HAL_TIM_Base_Start_IT+0xcc>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d013      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x80>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a1c      	ldr	r2, [pc, #112]	; (800467c <HAL_TIM_Base_Start_IT+0xd0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00e      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x80>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a1b      	ldr	r2, [pc, #108]	; (8004680 <HAL_TIM_Base_Start_IT+0xd4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d009      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x80>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a19      	ldr	r2, [pc, #100]	; (8004684 <HAL_TIM_Base_Start_IT+0xd8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d004      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x80>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a18      	ldr	r2, [pc, #96]	; (8004688 <HAL_TIM_Base_Start_IT+0xdc>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d111      	bne.n	8004650 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b06      	cmp	r3, #6
 800463c:	d010      	beq.n	8004660 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 0201 	orr.w	r2, r2, #1
 800464c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800464e:	e007      	b.n	8004660 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40010000 	.word	0x40010000
 8004674:	40000400 	.word	0x40000400
 8004678:	40000800 	.word	0x40000800
 800467c:	40000c00 	.word	0x40000c00
 8004680:	40010400 	.word	0x40010400
 8004684:	40014000 	.word	0x40014000
 8004688:	40001800 	.word	0x40001800

0800468c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e041      	b.n	8004722 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fc fa74 	bl	8000ba0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	3304      	adds	r3, #4
 80046c8:	4619      	mov	r1, r3
 80046ca:	4610      	mov	r0, r2
 80046cc:	f000 fb22 	bl	8004d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
	...

0800472c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004736:	2300      	movs	r3, #0
 8004738:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d104      	bne.n	800474a <HAL_TIM_IC_Start_IT+0x1e>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004746:	b2db      	uxtb	r3, r3
 8004748:	e013      	b.n	8004772 <HAL_TIM_IC_Start_IT+0x46>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b04      	cmp	r3, #4
 800474e:	d104      	bne.n	800475a <HAL_TIM_IC_Start_IT+0x2e>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004756:	b2db      	uxtb	r3, r3
 8004758:	e00b      	b.n	8004772 <HAL_TIM_IC_Start_IT+0x46>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b08      	cmp	r3, #8
 800475e:	d104      	bne.n	800476a <HAL_TIM_IC_Start_IT+0x3e>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004766:	b2db      	uxtb	r3, r3
 8004768:	e003      	b.n	8004772 <HAL_TIM_IC_Start_IT+0x46>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004770:	b2db      	uxtb	r3, r3
 8004772:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d104      	bne.n	8004784 <HAL_TIM_IC_Start_IT+0x58>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004780:	b2db      	uxtb	r3, r3
 8004782:	e013      	b.n	80047ac <HAL_TIM_IC_Start_IT+0x80>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	2b04      	cmp	r3, #4
 8004788:	d104      	bne.n	8004794 <HAL_TIM_IC_Start_IT+0x68>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004790:	b2db      	uxtb	r3, r3
 8004792:	e00b      	b.n	80047ac <HAL_TIM_IC_Start_IT+0x80>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2b08      	cmp	r3, #8
 8004798:	d104      	bne.n	80047a4 <HAL_TIM_IC_Start_IT+0x78>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	e003      	b.n	80047ac <HAL_TIM_IC_Start_IT+0x80>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80047ae:	7bbb      	ldrb	r3, [r7, #14]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d102      	bne.n	80047ba <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80047b4:	7b7b      	ldrb	r3, [r7, #13]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d001      	beq.n	80047be <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e0cc      	b.n	8004958 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d104      	bne.n	80047ce <HAL_TIM_IC_Start_IT+0xa2>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047cc:	e013      	b.n	80047f6 <HAL_TIM_IC_Start_IT+0xca>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	d104      	bne.n	80047de <HAL_TIM_IC_Start_IT+0xb2>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047dc:	e00b      	b.n	80047f6 <HAL_TIM_IC_Start_IT+0xca>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d104      	bne.n	80047ee <HAL_TIM_IC_Start_IT+0xc2>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047ec:	e003      	b.n	80047f6 <HAL_TIM_IC_Start_IT+0xca>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2202      	movs	r2, #2
 80047f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d104      	bne.n	8004806 <HAL_TIM_IC_Start_IT+0xda>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004804:	e013      	b.n	800482e <HAL_TIM_IC_Start_IT+0x102>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b04      	cmp	r3, #4
 800480a:	d104      	bne.n	8004816 <HAL_TIM_IC_Start_IT+0xea>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004814:	e00b      	b.n	800482e <HAL_TIM_IC_Start_IT+0x102>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b08      	cmp	r3, #8
 800481a:	d104      	bne.n	8004826 <HAL_TIM_IC_Start_IT+0xfa>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004824:	e003      	b.n	800482e <HAL_TIM_IC_Start_IT+0x102>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2202      	movs	r2, #2
 800482a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b0c      	cmp	r3, #12
 8004832:	d841      	bhi.n	80048b8 <HAL_TIM_IC_Start_IT+0x18c>
 8004834:	a201      	add	r2, pc, #4	; (adr r2, 800483c <HAL_TIM_IC_Start_IT+0x110>)
 8004836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483a:	bf00      	nop
 800483c:	08004871 	.word	0x08004871
 8004840:	080048b9 	.word	0x080048b9
 8004844:	080048b9 	.word	0x080048b9
 8004848:	080048b9 	.word	0x080048b9
 800484c:	08004883 	.word	0x08004883
 8004850:	080048b9 	.word	0x080048b9
 8004854:	080048b9 	.word	0x080048b9
 8004858:	080048b9 	.word	0x080048b9
 800485c:	08004895 	.word	0x08004895
 8004860:	080048b9 	.word	0x080048b9
 8004864:	080048b9 	.word	0x080048b9
 8004868:	080048b9 	.word	0x080048b9
 800486c:	080048a7 	.word	0x080048a7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0202 	orr.w	r2, r2, #2
 800487e:	60da      	str	r2, [r3, #12]
      break;
 8004880:	e01d      	b.n	80048be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0204 	orr.w	r2, r2, #4
 8004890:	60da      	str	r2, [r3, #12]
      break;
 8004892:	e014      	b.n	80048be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0208 	orr.w	r2, r2, #8
 80048a2:	60da      	str	r2, [r3, #12]
      break;
 80048a4:	e00b      	b.n	80048be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f042 0210 	orr.w	r2, r2, #16
 80048b4:	60da      	str	r2, [r3, #12]
      break;
 80048b6:	e002      	b.n	80048be <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	73fb      	strb	r3, [r7, #15]
      break;
 80048bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80048be:	7bfb      	ldrb	r3, [r7, #15]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d148      	bne.n	8004956 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2201      	movs	r2, #1
 80048ca:	6839      	ldr	r1, [r7, #0]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 fbeb 	bl	80050a8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a22      	ldr	r2, [pc, #136]	; (8004960 <HAL_TIM_IC_Start_IT+0x234>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d022      	beq.n	8004922 <HAL_TIM_IC_Start_IT+0x1f6>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e4:	d01d      	beq.n	8004922 <HAL_TIM_IC_Start_IT+0x1f6>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a1e      	ldr	r2, [pc, #120]	; (8004964 <HAL_TIM_IC_Start_IT+0x238>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d018      	beq.n	8004922 <HAL_TIM_IC_Start_IT+0x1f6>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a1c      	ldr	r2, [pc, #112]	; (8004968 <HAL_TIM_IC_Start_IT+0x23c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d013      	beq.n	8004922 <HAL_TIM_IC_Start_IT+0x1f6>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a1b      	ldr	r2, [pc, #108]	; (800496c <HAL_TIM_IC_Start_IT+0x240>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d00e      	beq.n	8004922 <HAL_TIM_IC_Start_IT+0x1f6>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a19      	ldr	r2, [pc, #100]	; (8004970 <HAL_TIM_IC_Start_IT+0x244>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d009      	beq.n	8004922 <HAL_TIM_IC_Start_IT+0x1f6>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a18      	ldr	r2, [pc, #96]	; (8004974 <HAL_TIM_IC_Start_IT+0x248>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d004      	beq.n	8004922 <HAL_TIM_IC_Start_IT+0x1f6>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a16      	ldr	r2, [pc, #88]	; (8004978 <HAL_TIM_IC_Start_IT+0x24c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d111      	bne.n	8004946 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b06      	cmp	r3, #6
 8004932:	d010      	beq.n	8004956 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004944:	e007      	b.n	8004956 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f042 0201 	orr.w	r2, r2, #1
 8004954:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004956:	7bfb      	ldrb	r3, [r7, #15]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40010000 	.word	0x40010000
 8004964:	40000400 	.word	0x40000400
 8004968:	40000800 	.word	0x40000800
 800496c:	40000c00 	.word	0x40000c00
 8004970:	40010400 	.word	0x40010400
 8004974:	40014000 	.word	0x40014000
 8004978:	40001800 	.word	0x40001800

0800497c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b02      	cmp	r3, #2
 8004990:	d122      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b02      	cmp	r3, #2
 800499e:	d11b      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0202 	mvn.w	r2, #2
 80049a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f98a 	bl	8004cd8 <HAL_TIM_IC_CaptureCallback>
 80049c4:	e005      	b.n	80049d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f97c 	bl	8004cc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f98d 	bl	8004cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d122      	bne.n	8004a2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d11b      	bne.n	8004a2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0204 	mvn.w	r2, #4
 80049fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2202      	movs	r2, #2
 8004a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f960 	bl	8004cd8 <HAL_TIM_IC_CaptureCallback>
 8004a18:	e005      	b.n	8004a26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f952 	bl	8004cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f963 	bl	8004cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d122      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d11b      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0208 	mvn.w	r2, #8
 8004a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2204      	movs	r2, #4
 8004a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f936 	bl	8004cd8 <HAL_TIM_IC_CaptureCallback>
 8004a6c:	e005      	b.n	8004a7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f928 	bl	8004cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f939 	bl	8004cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0310 	and.w	r3, r3, #16
 8004a8a:	2b10      	cmp	r3, #16
 8004a8c:	d122      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0310 	and.w	r3, r3, #16
 8004a98:	2b10      	cmp	r3, #16
 8004a9a:	d11b      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0210 	mvn.w	r2, #16
 8004aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2208      	movs	r2, #8
 8004aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f90c 	bl	8004cd8 <HAL_TIM_IC_CaptureCallback>
 8004ac0:	e005      	b.n	8004ace <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f8fe 	bl	8004cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f90f 	bl	8004cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d10e      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d107      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f06f 0201 	mvn.w	r2, #1
 8004af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fb ff8e 	bl	8000a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0a:	2b80      	cmp	r3, #128	; 0x80
 8004b0c:	d10e      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b18:	2b80      	cmp	r3, #128	; 0x80
 8004b1a:	d107      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fb6a 	bl	8005200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b36:	2b40      	cmp	r3, #64	; 0x40
 8004b38:	d10e      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b44:	2b40      	cmp	r3, #64	; 0x40
 8004b46:	d107      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f8d4 	bl	8004d00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	d10e      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f003 0320 	and.w	r3, r3, #32
 8004b70:	2b20      	cmp	r3, #32
 8004b72:	d107      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f06f 0220 	mvn.w	r2, #32
 8004b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fb34 	bl	80051ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b84:	bf00      	nop
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d101      	bne.n	8004baa <HAL_TIM_IC_ConfigChannel+0x1e>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	e088      	b.n	8004cbc <HAL_TIM_IC_ConfigChannel+0x130>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d11b      	bne.n	8004bf0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6818      	ldr	r0, [r3, #0]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	6819      	ldr	r1, [r3, #0]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f000 f944 	bl	8004e54 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699a      	ldr	r2, [r3, #24]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 020c 	bic.w	r2, r2, #12
 8004bda:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6999      	ldr	r1, [r3, #24]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	689a      	ldr	r2, [r3, #8]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	619a      	str	r2, [r3, #24]
 8004bee:	e060      	b.n	8004cb2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d11c      	bne.n	8004c30 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6818      	ldr	r0, [r3, #0]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	6819      	ldr	r1, [r3, #0]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f000 f999 	bl	8004f3c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	699a      	ldr	r2, [r3, #24]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004c18:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6999      	ldr	r1, [r3, #24]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	021a      	lsls	r2, r3, #8
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	619a      	str	r2, [r3, #24]
 8004c2e:	e040      	b.n	8004cb2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b08      	cmp	r3, #8
 8004c34:	d11b      	bne.n	8004c6e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	6819      	ldr	r1, [r3, #0]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f000 f9b6 	bl	8004fb6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69da      	ldr	r2, [r3, #28]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 020c 	bic.w	r2, r2, #12
 8004c58:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69d9      	ldr	r1, [r3, #28]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	61da      	str	r2, [r3, #28]
 8004c6c:	e021      	b.n	8004cb2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b0c      	cmp	r3, #12
 8004c72:	d11c      	bne.n	8004cae <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6818      	ldr	r0, [r3, #0]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	6819      	ldr	r1, [r3, #0]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f000 f9d3 	bl	800502e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	69da      	ldr	r2, [r3, #28]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004c96:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	69d9      	ldr	r1, [r3, #28]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	021a      	lsls	r2, r3, #8
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	61da      	str	r2, [r3, #28]
 8004cac:	e001      	b.n	8004cb2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a40      	ldr	r2, [pc, #256]	; (8004e28 <TIM_Base_SetConfig+0x114>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d013      	beq.n	8004d54 <TIM_Base_SetConfig+0x40>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d32:	d00f      	beq.n	8004d54 <TIM_Base_SetConfig+0x40>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a3d      	ldr	r2, [pc, #244]	; (8004e2c <TIM_Base_SetConfig+0x118>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d00b      	beq.n	8004d54 <TIM_Base_SetConfig+0x40>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a3c      	ldr	r2, [pc, #240]	; (8004e30 <TIM_Base_SetConfig+0x11c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d007      	beq.n	8004d54 <TIM_Base_SetConfig+0x40>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a3b      	ldr	r2, [pc, #236]	; (8004e34 <TIM_Base_SetConfig+0x120>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d003      	beq.n	8004d54 <TIM_Base_SetConfig+0x40>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a3a      	ldr	r2, [pc, #232]	; (8004e38 <TIM_Base_SetConfig+0x124>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d108      	bne.n	8004d66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a2f      	ldr	r2, [pc, #188]	; (8004e28 <TIM_Base_SetConfig+0x114>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d02b      	beq.n	8004dc6 <TIM_Base_SetConfig+0xb2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d74:	d027      	beq.n	8004dc6 <TIM_Base_SetConfig+0xb2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a2c      	ldr	r2, [pc, #176]	; (8004e2c <TIM_Base_SetConfig+0x118>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d023      	beq.n	8004dc6 <TIM_Base_SetConfig+0xb2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a2b      	ldr	r2, [pc, #172]	; (8004e30 <TIM_Base_SetConfig+0x11c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d01f      	beq.n	8004dc6 <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a2a      	ldr	r2, [pc, #168]	; (8004e34 <TIM_Base_SetConfig+0x120>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d01b      	beq.n	8004dc6 <TIM_Base_SetConfig+0xb2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a29      	ldr	r2, [pc, #164]	; (8004e38 <TIM_Base_SetConfig+0x124>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d017      	beq.n	8004dc6 <TIM_Base_SetConfig+0xb2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a28      	ldr	r2, [pc, #160]	; (8004e3c <TIM_Base_SetConfig+0x128>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d013      	beq.n	8004dc6 <TIM_Base_SetConfig+0xb2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a27      	ldr	r2, [pc, #156]	; (8004e40 <TIM_Base_SetConfig+0x12c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00f      	beq.n	8004dc6 <TIM_Base_SetConfig+0xb2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a26      	ldr	r2, [pc, #152]	; (8004e44 <TIM_Base_SetConfig+0x130>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d00b      	beq.n	8004dc6 <TIM_Base_SetConfig+0xb2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a25      	ldr	r2, [pc, #148]	; (8004e48 <TIM_Base_SetConfig+0x134>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d007      	beq.n	8004dc6 <TIM_Base_SetConfig+0xb2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a24      	ldr	r2, [pc, #144]	; (8004e4c <TIM_Base_SetConfig+0x138>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d003      	beq.n	8004dc6 <TIM_Base_SetConfig+0xb2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a23      	ldr	r2, [pc, #140]	; (8004e50 <TIM_Base_SetConfig+0x13c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d108      	bne.n	8004dd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a0a      	ldr	r2, [pc, #40]	; (8004e28 <TIM_Base_SetConfig+0x114>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d003      	beq.n	8004e0c <TIM_Base_SetConfig+0xf8>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a0c      	ldr	r2, [pc, #48]	; (8004e38 <TIM_Base_SetConfig+0x124>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d103      	bne.n	8004e14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	691a      	ldr	r2, [r3, #16]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	615a      	str	r2, [r3, #20]
}
 8004e1a:	bf00      	nop
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40010000 	.word	0x40010000
 8004e2c:	40000400 	.word	0x40000400
 8004e30:	40000800 	.word	0x40000800
 8004e34:	40000c00 	.word	0x40000c00
 8004e38:	40010400 	.word	0x40010400
 8004e3c:	40014000 	.word	0x40014000
 8004e40:	40014400 	.word	0x40014400
 8004e44:	40014800 	.word	0x40014800
 8004e48:	40001800 	.word	0x40001800
 8004e4c:	40001c00 	.word	0x40001c00
 8004e50:	40002000 	.word	0x40002000

08004e54 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
 8004e60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	f023 0201 	bic.w	r2, r3, #1
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4a28      	ldr	r2, [pc, #160]	; (8004f20 <TIM_TI1_SetConfig+0xcc>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d01b      	beq.n	8004eba <TIM_TI1_SetConfig+0x66>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e88:	d017      	beq.n	8004eba <TIM_TI1_SetConfig+0x66>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4a25      	ldr	r2, [pc, #148]	; (8004f24 <TIM_TI1_SetConfig+0xd0>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d013      	beq.n	8004eba <TIM_TI1_SetConfig+0x66>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4a24      	ldr	r2, [pc, #144]	; (8004f28 <TIM_TI1_SetConfig+0xd4>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00f      	beq.n	8004eba <TIM_TI1_SetConfig+0x66>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4a23      	ldr	r2, [pc, #140]	; (8004f2c <TIM_TI1_SetConfig+0xd8>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00b      	beq.n	8004eba <TIM_TI1_SetConfig+0x66>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4a22      	ldr	r2, [pc, #136]	; (8004f30 <TIM_TI1_SetConfig+0xdc>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d007      	beq.n	8004eba <TIM_TI1_SetConfig+0x66>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4a21      	ldr	r2, [pc, #132]	; (8004f34 <TIM_TI1_SetConfig+0xe0>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d003      	beq.n	8004eba <TIM_TI1_SetConfig+0x66>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4a20      	ldr	r2, [pc, #128]	; (8004f38 <TIM_TI1_SetConfig+0xe4>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d101      	bne.n	8004ebe <TIM_TI1_SetConfig+0x6a>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e000      	b.n	8004ec0 <TIM_TI1_SetConfig+0x6c>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d008      	beq.n	8004ed6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f023 0303 	bic.w	r3, r3, #3
 8004eca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	e003      	b.n	8004ede <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f043 0301 	orr.w	r3, r3, #1
 8004edc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ee4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	f023 030a 	bic.w	r3, r3, #10
 8004ef8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	f003 030a 	and.w	r3, r3, #10
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	621a      	str	r2, [r3, #32]
}
 8004f12:	bf00      	nop
 8004f14:	371c      	adds	r7, #28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	40010000 	.word	0x40010000
 8004f24:	40000400 	.word	0x40000400
 8004f28:	40000800 	.word	0x40000800
 8004f2c:	40000c00 	.word	0x40000c00
 8004f30:	40010400 	.word	0x40010400
 8004f34:	40014000 	.word	0x40014000
 8004f38:	40001800 	.word	0x40001800

08004f3c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	f023 0210 	bic.w	r2, r3, #16
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	021b      	lsls	r3, r3, #8
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	031b      	lsls	r3, r3, #12
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f8e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	621a      	str	r2, [r3, #32]
}
 8004faa:	bf00      	nop
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b087      	sub	sp, #28
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	607a      	str	r2, [r7, #4]
 8004fc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f023 0303 	bic.w	r3, r3, #3
 8004fe2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ff2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005006:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	021b      	lsls	r3, r3, #8
 800500c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4313      	orrs	r3, r2
 8005014:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	621a      	str	r2, [r3, #32]
}
 8005022:	bf00      	nop
 8005024:	371c      	adds	r7, #28
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800502e:	b480      	push	{r7}
 8005030:	b087      	sub	sp, #28
 8005032:	af00      	add	r7, sp, #0
 8005034:	60f8      	str	r0, [r7, #12]
 8005036:	60b9      	str	r1, [r7, #8]
 8005038:	607a      	str	r2, [r7, #4]
 800503a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800505a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	021b      	lsls	r3, r3, #8
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	4313      	orrs	r3, r2
 8005064:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800506c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	031b      	lsls	r3, r3, #12
 8005072:	b29b      	uxth	r3, r3
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005080:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	031b      	lsls	r3, r3, #12
 8005086:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	4313      	orrs	r3, r2
 800508e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	621a      	str	r2, [r3, #32]
}
 800509c:	bf00      	nop
 800509e:	371c      	adds	r7, #28
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f003 031f 	and.w	r3, r3, #31
 80050ba:	2201      	movs	r2, #1
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6a1a      	ldr	r2, [r3, #32]
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	43db      	mvns	r3, r3
 80050ca:	401a      	ands	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6a1a      	ldr	r2, [r3, #32]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f003 031f 	and.w	r3, r3, #31
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	fa01 f303 	lsl.w	r3, r1, r3
 80050e0:	431a      	orrs	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	621a      	str	r2, [r3, #32]
}
 80050e6:	bf00      	nop
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
	...

080050f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005108:	2302      	movs	r3, #2
 800510a:	e05a      	b.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005132:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a21      	ldr	r2, [pc, #132]	; (80051d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d022      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005158:	d01d      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a1d      	ldr	r2, [pc, #116]	; (80051d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d018      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a1b      	ldr	r2, [pc, #108]	; (80051d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d013      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a1a      	ldr	r2, [pc, #104]	; (80051dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d00e      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a18      	ldr	r2, [pc, #96]	; (80051e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d009      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a17      	ldr	r2, [pc, #92]	; (80051e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d004      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a15      	ldr	r2, [pc, #84]	; (80051e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d10c      	bne.n	80051b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800519c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40010000 	.word	0x40010000
 80051d4:	40000400 	.word	0x40000400
 80051d8:	40000800 	.word	0x40000800
 80051dc:	40000c00 	.word	0x40000c00
 80051e0:	40010400 	.word	0x40010400
 80051e4:	40014000 	.word	0x40014000
 80051e8:	40001800 	.word	0x40001800

080051ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	4603      	mov	r3, r0
 800521c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800521e:	2300      	movs	r3, #0
 8005220:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005226:	2b84      	cmp	r3, #132	; 0x84
 8005228:	d005      	beq.n	8005236 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800522a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	4413      	add	r3, r2
 8005232:	3303      	adds	r3, #3
 8005234:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005236:	68fb      	ldr	r3, [r7, #12]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005248:	f000 ff8a 	bl	8006160 <vTaskStartScheduler>
  
  return osOK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	bd80      	pop	{r7, pc}

08005252 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005252:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005254:	b089      	sub	sp, #36	; 0x24
 8005256:	af04      	add	r7, sp, #16
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d020      	beq.n	80052a6 <osThreadCreate+0x54>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d01c      	beq.n	80052a6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685c      	ldr	r4, [r3, #4]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681d      	ldr	r5, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691e      	ldr	r6, [r3, #16]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800527e:	4618      	mov	r0, r3
 8005280:	f7ff ffc8 	bl	8005214 <makeFreeRtosPriority>
 8005284:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800528e:	9202      	str	r2, [sp, #8]
 8005290:	9301      	str	r3, [sp, #4]
 8005292:	9100      	str	r1, [sp, #0]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	4632      	mov	r2, r6
 8005298:	4629      	mov	r1, r5
 800529a:	4620      	mov	r0, r4
 800529c:	f000 fd98 	bl	8005dd0 <xTaskCreateStatic>
 80052a0:	4603      	mov	r3, r0
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	e01c      	b.n	80052e0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685c      	ldr	r4, [r3, #4]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052b2:	b29e      	uxth	r6, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7ff ffaa 	bl	8005214 <makeFreeRtosPriority>
 80052c0:	4602      	mov	r2, r0
 80052c2:	f107 030c 	add.w	r3, r7, #12
 80052c6:	9301      	str	r3, [sp, #4]
 80052c8:	9200      	str	r2, [sp, #0]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	4632      	mov	r2, r6
 80052ce:	4629      	mov	r1, r5
 80052d0:	4620      	mov	r0, r4
 80052d2:	f000 fdda 	bl	8005e8a <xTaskCreate>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d001      	beq.n	80052e0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80052dc:	2300      	movs	r3, #0
 80052de:	e000      	b.n	80052e2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80052e0:	68fb      	ldr	r3, [r7, #12]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052ea <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b084      	sub	sp, #16
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <osDelay+0x16>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	e000      	b.n	8005302 <osDelay+0x18>
 8005300:	2301      	movs	r3, #1
 8005302:	4618      	mov	r0, r3
 8005304:	f000 fef8 	bl	80060f8 <vTaskDelay>
  
  return osOK;
 8005308:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b082      	sub	sp, #8
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d007      	beq.n	8005332 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	4619      	mov	r1, r3
 8005328:	2001      	movs	r0, #1
 800532a:	f000 fa2a 	bl	8005782 <xQueueCreateMutexStatic>
 800532e:	4603      	mov	r3, r0
 8005330:	e003      	b.n	800533a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005332:	2001      	movs	r0, #1
 8005334:	f000 fa0d 	bl	8005752 <xQueueCreateMutex>
 8005338:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800533a:	4618      	mov	r0, r3
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f103 0208 	add.w	r2, r3, #8
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800535a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f103 0208 	add.w	r2, r3, #8
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f103 0208 	add.w	r2, r3, #8
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005382:	b480      	push	{r7}
 8005384:	b083      	sub	sp, #12
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	601a      	str	r2, [r3, #0]
}
 80053d8:	bf00      	nop
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053fa:	d103      	bne.n	8005404 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	60fb      	str	r3, [r7, #12]
 8005402:	e00c      	b.n	800541e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	3308      	adds	r3, #8
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	e002      	b.n	8005412 <vListInsert+0x2e>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	429a      	cmp	r2, r3
 800541c:	d2f6      	bcs.n	800540c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	601a      	str	r2, [r3, #0]
}
 800544a:	bf00      	nop
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005456:	b480      	push	{r7}
 8005458:	b085      	sub	sp, #20
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	6892      	ldr	r2, [r2, #8]
 800546c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	6852      	ldr	r2, [r2, #4]
 8005476:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	429a      	cmp	r2, r3
 8005480:	d103      	bne.n	800548a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689a      	ldr	r2, [r3, #8]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	1e5a      	subs	r2, r3, #1
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
	...

080054ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10a      	bne.n	80054d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054d2:	bf00      	nop
 80054d4:	e7fe      	b.n	80054d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80054d6:	f001 fd8d 	bl	8006ff4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e2:	68f9      	ldr	r1, [r7, #12]
 80054e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054e6:	fb01 f303 	mul.w	r3, r1, r3
 80054ea:	441a      	add	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005506:	3b01      	subs	r3, #1
 8005508:	68f9      	ldr	r1, [r7, #12]
 800550a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800550c:	fb01 f303 	mul.w	r3, r1, r3
 8005510:	441a      	add	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	22ff      	movs	r2, #255	; 0xff
 800551a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	22ff      	movs	r2, #255	; 0xff
 8005522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d114      	bne.n	8005556 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01a      	beq.n	800556a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	3310      	adds	r3, #16
 8005538:	4618      	mov	r0, r3
 800553a:	f001 f853 	bl	80065e4 <xTaskRemoveFromEventList>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d012      	beq.n	800556a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005544:	4b0c      	ldr	r3, [pc, #48]	; (8005578 <xQueueGenericReset+0xcc>)
 8005546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	f3bf 8f6f 	isb	sy
 8005554:	e009      	b.n	800556a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	3310      	adds	r3, #16
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff fef1 	bl	8005342 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	3324      	adds	r3, #36	; 0x24
 8005564:	4618      	mov	r0, r3
 8005566:	f7ff feec 	bl	8005342 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800556a:	f001 fd73 	bl	8007054 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800556e:	2301      	movs	r3, #1
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	e000ed04 	.word	0xe000ed04

0800557c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800557c:	b580      	push	{r7, lr}
 800557e:	b08e      	sub	sp, #56	; 0x38
 8005580:	af02      	add	r7, sp, #8
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10a      	bne.n	80055a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055a2:	bf00      	nop
 80055a4:	e7fe      	b.n	80055a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10a      	bne.n	80055c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055be:	bf00      	nop
 80055c0:	e7fe      	b.n	80055c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <xQueueGenericCreateStatic+0x52>
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <xQueueGenericCreateStatic+0x56>
 80055ce:	2301      	movs	r3, #1
 80055d0:	e000      	b.n	80055d4 <xQueueGenericCreateStatic+0x58>
 80055d2:	2300      	movs	r3, #0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10a      	bne.n	80055ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80055d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055dc:	f383 8811 	msr	BASEPRI, r3
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	623b      	str	r3, [r7, #32]
}
 80055ea:	bf00      	nop
 80055ec:	e7fe      	b.n	80055ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d102      	bne.n	80055fa <xQueueGenericCreateStatic+0x7e>
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <xQueueGenericCreateStatic+0x82>
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <xQueueGenericCreateStatic+0x84>
 80055fe:	2300      	movs	r3, #0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10a      	bne.n	800561a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	61fb      	str	r3, [r7, #28]
}
 8005616:	bf00      	nop
 8005618:	e7fe      	b.n	8005618 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800561a:	2348      	movs	r3, #72	; 0x48
 800561c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2b48      	cmp	r3, #72	; 0x48
 8005622:	d00a      	beq.n	800563a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	61bb      	str	r3, [r7, #24]
}
 8005636:	bf00      	nop
 8005638:	e7fe      	b.n	8005638 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800563a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00d      	beq.n	8005662 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800564e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	4613      	mov	r3, r2
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	68b9      	ldr	r1, [r7, #8]
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 f83f 	bl	80056e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005664:	4618      	mov	r0, r3
 8005666:	3730      	adds	r7, #48	; 0x30
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800566c:	b580      	push	{r7, lr}
 800566e:	b08a      	sub	sp, #40	; 0x28
 8005670:	af02      	add	r7, sp, #8
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	4613      	mov	r3, r2
 8005678:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10a      	bne.n	8005696 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	613b      	str	r3, [r7, #16]
}
 8005692:	bf00      	nop
 8005694:	e7fe      	b.n	8005694 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	fb02 f303 	mul.w	r3, r2, r3
 800569e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	3348      	adds	r3, #72	; 0x48
 80056a4:	4618      	mov	r0, r3
 80056a6:	f001 fd87 	bl	80071b8 <pvPortMalloc>
 80056aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d011      	beq.n	80056d6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	3348      	adds	r3, #72	; 0x48
 80056ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056c4:	79fa      	ldrb	r2, [r7, #7]
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	4613      	mov	r3, r2
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	68b9      	ldr	r1, [r7, #8]
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 f805 	bl	80056e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80056d6:	69bb      	ldr	r3, [r7, #24]
	}
 80056d8:	4618      	mov	r0, r3
 80056da:	3720      	adds	r7, #32
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d103      	bne.n	80056fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	e002      	b.n	8005702 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800570e:	2101      	movs	r1, #1
 8005710:	69b8      	ldr	r0, [r7, #24]
 8005712:	f7ff fecb 	bl	80054ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005716:	bf00      	nop
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800571e:	b580      	push	{r7, lr}
 8005720:	b082      	sub	sp, #8
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00e      	beq.n	800574a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800573e:	2300      	movs	r3, #0
 8005740:	2200      	movs	r2, #0
 8005742:	2100      	movs	r1, #0
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f837 	bl	80057b8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800574a:	bf00      	nop
 800574c:	3708      	adds	r7, #8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005752:	b580      	push	{r7, lr}
 8005754:	b086      	sub	sp, #24
 8005756:	af00      	add	r7, sp, #0
 8005758:	4603      	mov	r3, r0
 800575a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800575c:	2301      	movs	r3, #1
 800575e:	617b      	str	r3, [r7, #20]
 8005760:	2300      	movs	r3, #0
 8005762:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005764:	79fb      	ldrb	r3, [r7, #7]
 8005766:	461a      	mov	r2, r3
 8005768:	6939      	ldr	r1, [r7, #16]
 800576a:	6978      	ldr	r0, [r7, #20]
 800576c:	f7ff ff7e 	bl	800566c <xQueueGenericCreate>
 8005770:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f7ff ffd3 	bl	800571e <prvInitialiseMutex>

		return xNewQueue;
 8005778:	68fb      	ldr	r3, [r7, #12]
	}
 800577a:	4618      	mov	r0, r3
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005782:	b580      	push	{r7, lr}
 8005784:	b088      	sub	sp, #32
 8005786:	af02      	add	r7, sp, #8
 8005788:	4603      	mov	r3, r0
 800578a:	6039      	str	r1, [r7, #0]
 800578c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800578e:	2301      	movs	r3, #1
 8005790:	617b      	str	r3, [r7, #20]
 8005792:	2300      	movs	r3, #0
 8005794:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005796:	79fb      	ldrb	r3, [r7, #7]
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2200      	movs	r2, #0
 800579e:	6939      	ldr	r1, [r7, #16]
 80057a0:	6978      	ldr	r0, [r7, #20]
 80057a2:	f7ff feeb 	bl	800557c <xQueueGenericCreateStatic>
 80057a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f7ff ffb8 	bl	800571e <prvInitialiseMutex>

		return xNewQueue;
 80057ae:	68fb      	ldr	r3, [r7, #12]
	}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3718      	adds	r7, #24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08e      	sub	sp, #56	; 0x38
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80057c6:	2300      	movs	r3, #0
 80057c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10a      	bne.n	80057ea <xQueueGenericSend+0x32>
	__asm volatile
 80057d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d8:	f383 8811 	msr	BASEPRI, r3
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80057e6:	bf00      	nop
 80057e8:	e7fe      	b.n	80057e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d103      	bne.n	80057f8 <xQueueGenericSend+0x40>
 80057f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <xQueueGenericSend+0x44>
 80057f8:	2301      	movs	r3, #1
 80057fa:	e000      	b.n	80057fe <xQueueGenericSend+0x46>
 80057fc:	2300      	movs	r3, #0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10a      	bne.n	8005818 <xQueueGenericSend+0x60>
	__asm volatile
 8005802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005806:	f383 8811 	msr	BASEPRI, r3
 800580a:	f3bf 8f6f 	isb	sy
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005814:	bf00      	nop
 8005816:	e7fe      	b.n	8005816 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2b02      	cmp	r3, #2
 800581c:	d103      	bne.n	8005826 <xQueueGenericSend+0x6e>
 800581e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005822:	2b01      	cmp	r3, #1
 8005824:	d101      	bne.n	800582a <xQueueGenericSend+0x72>
 8005826:	2301      	movs	r3, #1
 8005828:	e000      	b.n	800582c <xQueueGenericSend+0x74>
 800582a:	2300      	movs	r3, #0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10a      	bne.n	8005846 <xQueueGenericSend+0x8e>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	623b      	str	r3, [r7, #32]
}
 8005842:	bf00      	nop
 8005844:	e7fe      	b.n	8005844 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005846:	f001 f889 	bl	800695c <xTaskGetSchedulerState>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d102      	bne.n	8005856 <xQueueGenericSend+0x9e>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <xQueueGenericSend+0xa2>
 8005856:	2301      	movs	r3, #1
 8005858:	e000      	b.n	800585c <xQueueGenericSend+0xa4>
 800585a:	2300      	movs	r3, #0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10a      	bne.n	8005876 <xQueueGenericSend+0xbe>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	61fb      	str	r3, [r7, #28]
}
 8005872:	bf00      	nop
 8005874:	e7fe      	b.n	8005874 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005876:	f001 fbbd 	bl	8006ff4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800587a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005882:	429a      	cmp	r2, r3
 8005884:	d302      	bcc.n	800588c <xQueueGenericSend+0xd4>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b02      	cmp	r3, #2
 800588a:	d129      	bne.n	80058e0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	68b9      	ldr	r1, [r7, #8]
 8005890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005892:	f000 f9b3 	bl	8005bfc <prvCopyDataToQueue>
 8005896:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	2b00      	cmp	r3, #0
 800589e:	d010      	beq.n	80058c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a2:	3324      	adds	r3, #36	; 0x24
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 fe9d 	bl	80065e4 <xTaskRemoveFromEventList>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d013      	beq.n	80058d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80058b0:	4b3f      	ldr	r3, [pc, #252]	; (80059b0 <xQueueGenericSend+0x1f8>)
 80058b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	e00a      	b.n	80058d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80058c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d007      	beq.n	80058d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80058c8:	4b39      	ldr	r3, [pc, #228]	; (80059b0 <xQueueGenericSend+0x1f8>)
 80058ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80058d8:	f001 fbbc 	bl	8007054 <vPortExitCritical>
				return pdPASS;
 80058dc:	2301      	movs	r3, #1
 80058de:	e063      	b.n	80059a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d103      	bne.n	80058ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058e6:	f001 fbb5 	bl	8007054 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80058ea:	2300      	movs	r3, #0
 80058ec:	e05c      	b.n	80059a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d106      	bne.n	8005902 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058f4:	f107 0314 	add.w	r3, r7, #20
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 fed5 	bl	80066a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058fe:	2301      	movs	r3, #1
 8005900:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005902:	f001 fba7 	bl	8007054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005906:	f000 fc8b 	bl	8006220 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800590a:	f001 fb73 	bl	8006ff4 <vPortEnterCritical>
 800590e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005910:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005914:	b25b      	sxtb	r3, r3
 8005916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800591a:	d103      	bne.n	8005924 <xQueueGenericSend+0x16c>
 800591c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005926:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800592a:	b25b      	sxtb	r3, r3
 800592c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005930:	d103      	bne.n	800593a <xQueueGenericSend+0x182>
 8005932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800593a:	f001 fb8b 	bl	8007054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800593e:	1d3a      	adds	r2, r7, #4
 8005940:	f107 0314 	add.w	r3, r7, #20
 8005944:	4611      	mov	r1, r2
 8005946:	4618      	mov	r0, r3
 8005948:	f000 fec4 	bl	80066d4 <xTaskCheckForTimeOut>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d124      	bne.n	800599c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005952:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005954:	f000 fa24 	bl	8005da0 <prvIsQueueFull>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d018      	beq.n	8005990 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800595e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005960:	3310      	adds	r3, #16
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	4611      	mov	r1, r2
 8005966:	4618      	mov	r0, r3
 8005968:	f000 fe18 	bl	800659c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800596c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800596e:	f000 f9af 	bl	8005cd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005972:	f000 fc63 	bl	800623c <xTaskResumeAll>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	f47f af7c 	bne.w	8005876 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800597e:	4b0c      	ldr	r3, [pc, #48]	; (80059b0 <xQueueGenericSend+0x1f8>)
 8005980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	e772      	b.n	8005876 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005992:	f000 f99d 	bl	8005cd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005996:	f000 fc51 	bl	800623c <xTaskResumeAll>
 800599a:	e76c      	b.n	8005876 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800599c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800599e:	f000 f997 	bl	8005cd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059a2:	f000 fc4b 	bl	800623c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80059a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3738      	adds	r7, #56	; 0x38
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	e000ed04 	.word	0xe000ed04

080059b4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08e      	sub	sp, #56	; 0x38
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80059be:	2300      	movs	r3, #0
 80059c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80059c6:	2300      	movs	r3, #0
 80059c8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10a      	bne.n	80059e6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80059d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d4:	f383 8811 	msr	BASEPRI, r3
 80059d8:	f3bf 8f6f 	isb	sy
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	623b      	str	r3, [r7, #32]
}
 80059e2:	bf00      	nop
 80059e4:	e7fe      	b.n	80059e4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80059e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	61fb      	str	r3, [r7, #28]
}
 8005a00:	bf00      	nop
 8005a02:	e7fe      	b.n	8005a02 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a04:	f000 ffaa 	bl	800695c <xTaskGetSchedulerState>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d102      	bne.n	8005a14 <xQueueSemaphoreTake+0x60>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <xQueueSemaphoreTake+0x64>
 8005a14:	2301      	movs	r3, #1
 8005a16:	e000      	b.n	8005a1a <xQueueSemaphoreTake+0x66>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10a      	bne.n	8005a34 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	61bb      	str	r3, [r7, #24]
}
 8005a30:	bf00      	nop
 8005a32:	e7fe      	b.n	8005a32 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a34:	f001 fade 	bl	8006ff4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d024      	beq.n	8005a8e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a46:	1e5a      	subs	r2, r3, #1
 8005a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d104      	bne.n	8005a5e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005a54:	f001 f92a 	bl	8006cac <pvTaskIncrementMutexHeldCount>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00f      	beq.n	8005a86 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a68:	3310      	adds	r3, #16
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 fdba 	bl	80065e4 <xTaskRemoveFromEventList>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d007      	beq.n	8005a86 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a76:	4b54      	ldr	r3, [pc, #336]	; (8005bc8 <xQueueSemaphoreTake+0x214>)
 8005a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a86:	f001 fae5 	bl	8007054 <vPortExitCritical>
				return pdPASS;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e097      	b.n	8005bbe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d111      	bne.n	8005ab8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	617b      	str	r3, [r7, #20]
}
 8005aac:	bf00      	nop
 8005aae:	e7fe      	b.n	8005aae <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005ab0:	f001 fad0 	bl	8007054 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	e082      	b.n	8005bbe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d106      	bne.n	8005acc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005abe:	f107 030c 	add.w	r3, r7, #12
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 fdf0 	bl	80066a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005acc:	f001 fac2 	bl	8007054 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ad0:	f000 fba6 	bl	8006220 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ad4:	f001 fa8e 	bl	8006ff4 <vPortEnterCritical>
 8005ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ada:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ade:	b25b      	sxtb	r3, r3
 8005ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ae4:	d103      	bne.n	8005aee <xQueueSemaphoreTake+0x13a>
 8005ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005af4:	b25b      	sxtb	r3, r3
 8005af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005afa:	d103      	bne.n	8005b04 <xQueueSemaphoreTake+0x150>
 8005afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b04:	f001 faa6 	bl	8007054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b08:	463a      	mov	r2, r7
 8005b0a:	f107 030c 	add.w	r3, r7, #12
 8005b0e:	4611      	mov	r1, r2
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 fddf 	bl	80066d4 <xTaskCheckForTimeOut>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d132      	bne.n	8005b82 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b1e:	f000 f929 	bl	8005d74 <prvIsQueueEmpty>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d026      	beq.n	8005b76 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d109      	bne.n	8005b44 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005b30:	f001 fa60 	bl	8006ff4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 ff2d 	bl	8006998 <xTaskPriorityInherit>
 8005b3e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005b40:	f001 fa88 	bl	8007054 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b46:	3324      	adds	r3, #36	; 0x24
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	4611      	mov	r1, r2
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 fd25 	bl	800659c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b54:	f000 f8bc 	bl	8005cd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b58:	f000 fb70 	bl	800623c <xTaskResumeAll>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f47f af68 	bne.w	8005a34 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005b64:	4b18      	ldr	r3, [pc, #96]	; (8005bc8 <xQueueSemaphoreTake+0x214>)
 8005b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	e75e      	b.n	8005a34 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005b76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b78:	f000 f8aa 	bl	8005cd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b7c:	f000 fb5e 	bl	800623c <xTaskResumeAll>
 8005b80:	e758      	b.n	8005a34 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005b82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b84:	f000 f8a4 	bl	8005cd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b88:	f000 fb58 	bl	800623c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b8e:	f000 f8f1 	bl	8005d74 <prvIsQueueEmpty>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f43f af4d 	beq.w	8005a34 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00d      	beq.n	8005bbc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005ba0:	f001 fa28 	bl	8006ff4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005ba4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ba6:	f000 f811 	bl	8005bcc <prvGetDisinheritPriorityAfterTimeout>
 8005baa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 ffec 	bl	8006b90 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005bb8:	f001 fa4c 	bl	8007054 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005bbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3738      	adds	r7, #56	; 0x38
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	e000ed04 	.word	0xe000ed04

08005bcc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d006      	beq.n	8005bea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f1c3 0307 	rsb	r3, r3, #7
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	e001      	b.n	8005bee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005bea:	2300      	movs	r3, #0
 8005bec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005bee:	68fb      	ldr	r3, [r7, #12]
	}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10d      	bne.n	8005c36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d14d      	bne.n	8005cbe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 ff2c 	bl	8006a84 <xTaskPriorityDisinherit>
 8005c2c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	609a      	str	r2, [r3, #8]
 8005c34:	e043      	b.n	8005cbe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d119      	bne.n	8005c70 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6858      	ldr	r0, [r3, #4]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	461a      	mov	r2, r3
 8005c46:	68b9      	ldr	r1, [r7, #8]
 8005c48:	f001 fcc4 	bl	80075d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c54:	441a      	add	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d32b      	bcc.n	8005cbe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	605a      	str	r2, [r3, #4]
 8005c6e:	e026      	b.n	8005cbe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	68d8      	ldr	r0, [r3, #12]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c78:	461a      	mov	r2, r3
 8005c7a:	68b9      	ldr	r1, [r7, #8]
 8005c7c:	f001 fcaa 	bl	80075d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c88:	425b      	negs	r3, r3
 8005c8a:	441a      	add	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	68da      	ldr	r2, [r3, #12]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d207      	bcs.n	8005cac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca4:	425b      	negs	r3, r3
 8005ca6:	441a      	add	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d105      	bne.n	8005cbe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005cc6:	697b      	ldr	r3, [r7, #20]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cd8:	f001 f98c 	bl	8006ff4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ce2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ce4:	e011      	b.n	8005d0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d012      	beq.n	8005d14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	3324      	adds	r3, #36	; 0x24
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fc76 	bl	80065e4 <xTaskRemoveFromEventList>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005cfe:	f000 fd4b 	bl	8006798 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d02:	7bfb      	ldrb	r3, [r7, #15]
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	dce9      	bgt.n	8005ce6 <prvUnlockQueue+0x16>
 8005d12:	e000      	b.n	8005d16 <prvUnlockQueue+0x46>
					break;
 8005d14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	22ff      	movs	r2, #255	; 0xff
 8005d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d1e:	f001 f999 	bl	8007054 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d22:	f001 f967 	bl	8006ff4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d2e:	e011      	b.n	8005d54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d012      	beq.n	8005d5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3310      	adds	r3, #16
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f000 fc51 	bl	80065e4 <xTaskRemoveFromEventList>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d48:	f000 fd26 	bl	8006798 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d4c:	7bbb      	ldrb	r3, [r7, #14]
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	dce9      	bgt.n	8005d30 <prvUnlockQueue+0x60>
 8005d5c:	e000      	b.n	8005d60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	22ff      	movs	r2, #255	; 0xff
 8005d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d68:	f001 f974 	bl	8007054 <vPortExitCritical>
}
 8005d6c:	bf00      	nop
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d7c:	f001 f93a 	bl	8006ff4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d102      	bne.n	8005d8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	e001      	b.n	8005d92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d92:	f001 f95f 	bl	8007054 <vPortExitCritical>

	return xReturn;
 8005d96:	68fb      	ldr	r3, [r7, #12]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005da8:	f001 f924 	bl	8006ff4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d102      	bne.n	8005dbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005db8:	2301      	movs	r3, #1
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	e001      	b.n	8005dc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dc2:	f001 f947 	bl	8007054 <vPortExitCritical>

	return xReturn;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08e      	sub	sp, #56	; 0x38
 8005dd4:	af04      	add	r7, sp, #16
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10a      	bne.n	8005dfa <xTaskCreateStatic+0x2a>
	__asm volatile
 8005de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	623b      	str	r3, [r7, #32]
}
 8005df6:	bf00      	nop
 8005df8:	e7fe      	b.n	8005df8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10a      	bne.n	8005e16 <xTaskCreateStatic+0x46>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	61fb      	str	r3, [r7, #28]
}
 8005e12:	bf00      	nop
 8005e14:	e7fe      	b.n	8005e14 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e16:	2354      	movs	r3, #84	; 0x54
 8005e18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	2b54      	cmp	r3, #84	; 0x54
 8005e1e:	d00a      	beq.n	8005e36 <xTaskCreateStatic+0x66>
	__asm volatile
 8005e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	61bb      	str	r3, [r7, #24]
}
 8005e32:	bf00      	nop
 8005e34:	e7fe      	b.n	8005e34 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e36:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d01e      	beq.n	8005e7c <xTaskCreateStatic+0xac>
 8005e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d01b      	beq.n	8005e7c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	2202      	movs	r2, #2
 8005e52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e56:	2300      	movs	r3, #0
 8005e58:	9303      	str	r3, [sp, #12]
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	9302      	str	r3, [sp, #8]
 8005e5e:	f107 0314 	add.w	r3, r7, #20
 8005e62:	9301      	str	r3, [sp, #4]
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	68b9      	ldr	r1, [r7, #8]
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 f850 	bl	8005f14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e76:	f000 f8d5 	bl	8006024 <prvAddNewTaskToReadyList>
 8005e7a:	e001      	b.n	8005e80 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e80:	697b      	ldr	r3, [r7, #20]
	}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3728      	adds	r7, #40	; 0x28
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b08c      	sub	sp, #48	; 0x30
 8005e8e:	af04      	add	r7, sp, #16
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	603b      	str	r3, [r7, #0]
 8005e96:	4613      	mov	r3, r2
 8005e98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e9a:	88fb      	ldrh	r3, [r7, #6]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f001 f98a 	bl	80071b8 <pvPortMalloc>
 8005ea4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00e      	beq.n	8005eca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005eac:	2054      	movs	r0, #84	; 0x54
 8005eae:	f001 f983 	bl	80071b8 <pvPortMalloc>
 8005eb2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	631a      	str	r2, [r3, #48]	; 0x30
 8005ec0:	e005      	b.n	8005ece <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ec2:	6978      	ldr	r0, [r7, #20]
 8005ec4:	f001 fa44 	bl	8007350 <vPortFree>
 8005ec8:	e001      	b.n	8005ece <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d017      	beq.n	8005f04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005edc:	88fa      	ldrh	r2, [r7, #6]
 8005ede:	2300      	movs	r3, #0
 8005ee0:	9303      	str	r3, [sp, #12]
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	9302      	str	r3, [sp, #8]
 8005ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee8:	9301      	str	r3, [sp, #4]
 8005eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	68b9      	ldr	r1, [r7, #8]
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 f80e 	bl	8005f14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ef8:	69f8      	ldr	r0, [r7, #28]
 8005efa:	f000 f893 	bl	8006024 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005efe:	2301      	movs	r3, #1
 8005f00:	61bb      	str	r3, [r7, #24]
 8005f02:	e002      	b.n	8005f0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f0a:	69bb      	ldr	r3, [r7, #24]
	}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3720      	adds	r7, #32
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b088      	sub	sp, #32
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
 8005f20:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	f023 0307 	bic.w	r3, r3, #7
 8005f3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <prvInitialiseNewTask+0x48>
	__asm volatile
 8005f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	617b      	str	r3, [r7, #20]
}
 8005f58:	bf00      	nop
 8005f5a:	e7fe      	b.n	8005f5a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d01f      	beq.n	8005fa2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f62:	2300      	movs	r3, #0
 8005f64:	61fb      	str	r3, [r7, #28]
 8005f66:	e012      	b.n	8005f8e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	7819      	ldrb	r1, [r3, #0]
 8005f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	4413      	add	r3, r2
 8005f76:	3334      	adds	r3, #52	; 0x34
 8005f78:	460a      	mov	r2, r1
 8005f7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	4413      	add	r3, r2
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d006      	beq.n	8005f96 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	61fb      	str	r3, [r7, #28]
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	2b0f      	cmp	r3, #15
 8005f92:	d9e9      	bls.n	8005f68 <prvInitialiseNewTask+0x54>
 8005f94:	e000      	b.n	8005f98 <prvInitialiseNewTask+0x84>
			{
				break;
 8005f96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fa0:	e003      	b.n	8005faa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fac:	2b06      	cmp	r3, #6
 8005fae:	d901      	bls.n	8005fb4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005fb0:	2306      	movs	r3, #6
 8005fb2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fb8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fbe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	3304      	adds	r3, #4
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7ff f9d9 	bl	8005382 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	3318      	adds	r3, #24
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7ff f9d4 	bl	8005382 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe2:	f1c3 0207 	rsb	r2, r3, #7
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	68f9      	ldr	r1, [r7, #12]
 8006002:	69b8      	ldr	r0, [r7, #24]
 8006004:	f000 fecc 	bl	8006da0 <pxPortInitialiseStack>
 8006008:	4602      	mov	r2, r0
 800600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800600e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006010:	2b00      	cmp	r3, #0
 8006012:	d002      	beq.n	800601a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006018:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800601a:	bf00      	nop
 800601c:	3720      	adds	r7, #32
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
	...

08006024 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800602c:	f000 ffe2 	bl	8006ff4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006030:	4b2a      	ldr	r3, [pc, #168]	; (80060dc <prvAddNewTaskToReadyList+0xb8>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3301      	adds	r3, #1
 8006036:	4a29      	ldr	r2, [pc, #164]	; (80060dc <prvAddNewTaskToReadyList+0xb8>)
 8006038:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800603a:	4b29      	ldr	r3, [pc, #164]	; (80060e0 <prvAddNewTaskToReadyList+0xbc>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d109      	bne.n	8006056 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006042:	4a27      	ldr	r2, [pc, #156]	; (80060e0 <prvAddNewTaskToReadyList+0xbc>)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006048:	4b24      	ldr	r3, [pc, #144]	; (80060dc <prvAddNewTaskToReadyList+0xb8>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d110      	bne.n	8006072 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006050:	f000 fbc6 	bl	80067e0 <prvInitialiseTaskLists>
 8006054:	e00d      	b.n	8006072 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006056:	4b23      	ldr	r3, [pc, #140]	; (80060e4 <prvAddNewTaskToReadyList+0xc0>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d109      	bne.n	8006072 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800605e:	4b20      	ldr	r3, [pc, #128]	; (80060e0 <prvAddNewTaskToReadyList+0xbc>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006068:	429a      	cmp	r2, r3
 800606a:	d802      	bhi.n	8006072 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800606c:	4a1c      	ldr	r2, [pc, #112]	; (80060e0 <prvAddNewTaskToReadyList+0xbc>)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006072:	4b1d      	ldr	r3, [pc, #116]	; (80060e8 <prvAddNewTaskToReadyList+0xc4>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3301      	adds	r3, #1
 8006078:	4a1b      	ldr	r2, [pc, #108]	; (80060e8 <prvAddNewTaskToReadyList+0xc4>)
 800607a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006080:	2201      	movs	r2, #1
 8006082:	409a      	lsls	r2, r3
 8006084:	4b19      	ldr	r3, [pc, #100]	; (80060ec <prvAddNewTaskToReadyList+0xc8>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4313      	orrs	r3, r2
 800608a:	4a18      	ldr	r2, [pc, #96]	; (80060ec <prvAddNewTaskToReadyList+0xc8>)
 800608c:	6013      	str	r3, [r2, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006092:	4613      	mov	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4a15      	ldr	r2, [pc, #84]	; (80060f0 <prvAddNewTaskToReadyList+0xcc>)
 800609c:	441a      	add	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	3304      	adds	r3, #4
 80060a2:	4619      	mov	r1, r3
 80060a4:	4610      	mov	r0, r2
 80060a6:	f7ff f979 	bl	800539c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060aa:	f000 ffd3 	bl	8007054 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060ae:	4b0d      	ldr	r3, [pc, #52]	; (80060e4 <prvAddNewTaskToReadyList+0xc0>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00e      	beq.n	80060d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060b6:	4b0a      	ldr	r3, [pc, #40]	; (80060e0 <prvAddNewTaskToReadyList+0xbc>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d207      	bcs.n	80060d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060c4:	4b0b      	ldr	r3, [pc, #44]	; (80060f4 <prvAddNewTaskToReadyList+0xd0>)
 80060c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060d4:	bf00      	nop
 80060d6:	3708      	adds	r7, #8
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	20000384 	.word	0x20000384
 80060e0:	20000284 	.word	0x20000284
 80060e4:	20000390 	.word	0x20000390
 80060e8:	200003a0 	.word	0x200003a0
 80060ec:	2000038c 	.word	0x2000038c
 80060f0:	20000288 	.word	0x20000288
 80060f4:	e000ed04 	.word	0xe000ed04

080060f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006100:	2300      	movs	r3, #0
 8006102:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d017      	beq.n	800613a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800610a:	4b13      	ldr	r3, [pc, #76]	; (8006158 <vTaskDelay+0x60>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00a      	beq.n	8006128 <vTaskDelay+0x30>
	__asm volatile
 8006112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	60bb      	str	r3, [r7, #8]
}
 8006124:	bf00      	nop
 8006126:	e7fe      	b.n	8006126 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006128:	f000 f87a 	bl	8006220 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800612c:	2100      	movs	r1, #0
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 fdd0 	bl	8006cd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006134:	f000 f882 	bl	800623c <xTaskResumeAll>
 8006138:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d107      	bne.n	8006150 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006140:	4b06      	ldr	r3, [pc, #24]	; (800615c <vTaskDelay+0x64>)
 8006142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006146:	601a      	str	r2, [r3, #0]
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006150:	bf00      	nop
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	200003ac 	.word	0x200003ac
 800615c:	e000ed04 	.word	0xe000ed04

08006160 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08a      	sub	sp, #40	; 0x28
 8006164:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006166:	2300      	movs	r3, #0
 8006168:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800616a:	2300      	movs	r3, #0
 800616c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800616e:	463a      	mov	r2, r7
 8006170:	1d39      	adds	r1, r7, #4
 8006172:	f107 0308 	add.w	r3, r7, #8
 8006176:	4618      	mov	r0, r3
 8006178:	f7fa f9c6 	bl	8000508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800617c:	6839      	ldr	r1, [r7, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	9202      	str	r2, [sp, #8]
 8006184:	9301      	str	r3, [sp, #4]
 8006186:	2300      	movs	r3, #0
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	2300      	movs	r3, #0
 800618c:	460a      	mov	r2, r1
 800618e:	491e      	ldr	r1, [pc, #120]	; (8006208 <vTaskStartScheduler+0xa8>)
 8006190:	481e      	ldr	r0, [pc, #120]	; (800620c <vTaskStartScheduler+0xac>)
 8006192:	f7ff fe1d 	bl	8005dd0 <xTaskCreateStatic>
 8006196:	4603      	mov	r3, r0
 8006198:	4a1d      	ldr	r2, [pc, #116]	; (8006210 <vTaskStartScheduler+0xb0>)
 800619a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800619c:	4b1c      	ldr	r3, [pc, #112]	; (8006210 <vTaskStartScheduler+0xb0>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80061a4:	2301      	movs	r3, #1
 80061a6:	617b      	str	r3, [r7, #20]
 80061a8:	e001      	b.n	80061ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80061aa:	2300      	movs	r3, #0
 80061ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d116      	bne.n	80061e2 <vTaskStartScheduler+0x82>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	613b      	str	r3, [r7, #16]
}
 80061c6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061c8:	4b12      	ldr	r3, [pc, #72]	; (8006214 <vTaskStartScheduler+0xb4>)
 80061ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061d0:	4b11      	ldr	r3, [pc, #68]	; (8006218 <vTaskStartScheduler+0xb8>)
 80061d2:	2201      	movs	r2, #1
 80061d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80061d6:	4b11      	ldr	r3, [pc, #68]	; (800621c <vTaskStartScheduler+0xbc>)
 80061d8:	2200      	movs	r2, #0
 80061da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061dc:	f000 fe68 	bl	8006eb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061e0:	e00e      	b.n	8006200 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061e8:	d10a      	bne.n	8006200 <vTaskStartScheduler+0xa0>
	__asm volatile
 80061ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	60fb      	str	r3, [r7, #12]
}
 80061fc:	bf00      	nop
 80061fe:	e7fe      	b.n	80061fe <vTaskStartScheduler+0x9e>
}
 8006200:	bf00      	nop
 8006202:	3718      	adds	r7, #24
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	08007690 	.word	0x08007690
 800620c:	080067b1 	.word	0x080067b1
 8006210:	200003a8 	.word	0x200003a8
 8006214:	200003a4 	.word	0x200003a4
 8006218:	20000390 	.word	0x20000390
 800621c:	20000388 	.word	0x20000388

08006220 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006220:	b480      	push	{r7}
 8006222:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006224:	4b04      	ldr	r3, [pc, #16]	; (8006238 <vTaskSuspendAll+0x18>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3301      	adds	r3, #1
 800622a:	4a03      	ldr	r2, [pc, #12]	; (8006238 <vTaskSuspendAll+0x18>)
 800622c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800622e:	bf00      	nop
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr
 8006238:	200003ac 	.word	0x200003ac

0800623c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006242:	2300      	movs	r3, #0
 8006244:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006246:	2300      	movs	r3, #0
 8006248:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800624a:	4b41      	ldr	r3, [pc, #260]	; (8006350 <xTaskResumeAll+0x114>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10a      	bne.n	8006268 <xTaskResumeAll+0x2c>
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	603b      	str	r3, [r7, #0]
}
 8006264:	bf00      	nop
 8006266:	e7fe      	b.n	8006266 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006268:	f000 fec4 	bl	8006ff4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800626c:	4b38      	ldr	r3, [pc, #224]	; (8006350 <xTaskResumeAll+0x114>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3b01      	subs	r3, #1
 8006272:	4a37      	ldr	r2, [pc, #220]	; (8006350 <xTaskResumeAll+0x114>)
 8006274:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006276:	4b36      	ldr	r3, [pc, #216]	; (8006350 <xTaskResumeAll+0x114>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d161      	bne.n	8006342 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800627e:	4b35      	ldr	r3, [pc, #212]	; (8006354 <xTaskResumeAll+0x118>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d05d      	beq.n	8006342 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006286:	e02e      	b.n	80062e6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006288:	4b33      	ldr	r3, [pc, #204]	; (8006358 <xTaskResumeAll+0x11c>)
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	3318      	adds	r3, #24
 8006294:	4618      	mov	r0, r3
 8006296:	f7ff f8de 	bl	8005456 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	3304      	adds	r3, #4
 800629e:	4618      	mov	r0, r3
 80062a0:	f7ff f8d9 	bl	8005456 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a8:	2201      	movs	r2, #1
 80062aa:	409a      	lsls	r2, r3
 80062ac:	4b2b      	ldr	r3, [pc, #172]	; (800635c <xTaskResumeAll+0x120>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	4a2a      	ldr	r2, [pc, #168]	; (800635c <xTaskResumeAll+0x120>)
 80062b4:	6013      	str	r3, [r2, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ba:	4613      	mov	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4413      	add	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4a27      	ldr	r2, [pc, #156]	; (8006360 <xTaskResumeAll+0x124>)
 80062c4:	441a      	add	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3304      	adds	r3, #4
 80062ca:	4619      	mov	r1, r3
 80062cc:	4610      	mov	r0, r2
 80062ce:	f7ff f865 	bl	800539c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d6:	4b23      	ldr	r3, [pc, #140]	; (8006364 <xTaskResumeAll+0x128>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062dc:	429a      	cmp	r2, r3
 80062de:	d302      	bcc.n	80062e6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80062e0:	4b21      	ldr	r3, [pc, #132]	; (8006368 <xTaskResumeAll+0x12c>)
 80062e2:	2201      	movs	r2, #1
 80062e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062e6:	4b1c      	ldr	r3, [pc, #112]	; (8006358 <xTaskResumeAll+0x11c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1cc      	bne.n	8006288 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062f4:	f000 fb12 	bl	800691c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80062f8:	4b1c      	ldr	r3, [pc, #112]	; (800636c <xTaskResumeAll+0x130>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d010      	beq.n	8006326 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006304:	f000 f836 	bl	8006374 <xTaskIncrementTick>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d002      	beq.n	8006314 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800630e:	4b16      	ldr	r3, [pc, #88]	; (8006368 <xTaskResumeAll+0x12c>)
 8006310:	2201      	movs	r2, #1
 8006312:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	3b01      	subs	r3, #1
 8006318:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1f1      	bne.n	8006304 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006320:	4b12      	ldr	r3, [pc, #72]	; (800636c <xTaskResumeAll+0x130>)
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006326:	4b10      	ldr	r3, [pc, #64]	; (8006368 <xTaskResumeAll+0x12c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d009      	beq.n	8006342 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800632e:	2301      	movs	r3, #1
 8006330:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006332:	4b0f      	ldr	r3, [pc, #60]	; (8006370 <xTaskResumeAll+0x134>)
 8006334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006342:	f000 fe87 	bl	8007054 <vPortExitCritical>

	return xAlreadyYielded;
 8006346:	68bb      	ldr	r3, [r7, #8]
}
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	200003ac 	.word	0x200003ac
 8006354:	20000384 	.word	0x20000384
 8006358:	20000344 	.word	0x20000344
 800635c:	2000038c 	.word	0x2000038c
 8006360:	20000288 	.word	0x20000288
 8006364:	20000284 	.word	0x20000284
 8006368:	20000398 	.word	0x20000398
 800636c:	20000394 	.word	0x20000394
 8006370:	e000ed04 	.word	0xe000ed04

08006374 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800637a:	2300      	movs	r3, #0
 800637c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800637e:	4b4e      	ldr	r3, [pc, #312]	; (80064b8 <xTaskIncrementTick+0x144>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	f040 808e 	bne.w	80064a4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006388:	4b4c      	ldr	r3, [pc, #304]	; (80064bc <xTaskIncrementTick+0x148>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3301      	adds	r3, #1
 800638e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006390:	4a4a      	ldr	r2, [pc, #296]	; (80064bc <xTaskIncrementTick+0x148>)
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d120      	bne.n	80063de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800639c:	4b48      	ldr	r3, [pc, #288]	; (80064c0 <xTaskIncrementTick+0x14c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <xTaskIncrementTick+0x48>
	__asm volatile
 80063a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	603b      	str	r3, [r7, #0]
}
 80063b8:	bf00      	nop
 80063ba:	e7fe      	b.n	80063ba <xTaskIncrementTick+0x46>
 80063bc:	4b40      	ldr	r3, [pc, #256]	; (80064c0 <xTaskIncrementTick+0x14c>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	60fb      	str	r3, [r7, #12]
 80063c2:	4b40      	ldr	r3, [pc, #256]	; (80064c4 <xTaskIncrementTick+0x150>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a3e      	ldr	r2, [pc, #248]	; (80064c0 <xTaskIncrementTick+0x14c>)
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	4a3e      	ldr	r2, [pc, #248]	; (80064c4 <xTaskIncrementTick+0x150>)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6013      	str	r3, [r2, #0]
 80063d0:	4b3d      	ldr	r3, [pc, #244]	; (80064c8 <xTaskIncrementTick+0x154>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3301      	adds	r3, #1
 80063d6:	4a3c      	ldr	r2, [pc, #240]	; (80064c8 <xTaskIncrementTick+0x154>)
 80063d8:	6013      	str	r3, [r2, #0]
 80063da:	f000 fa9f 	bl	800691c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063de:	4b3b      	ldr	r3, [pc, #236]	; (80064cc <xTaskIncrementTick+0x158>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d348      	bcc.n	800647a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063e8:	4b35      	ldr	r3, [pc, #212]	; (80064c0 <xTaskIncrementTick+0x14c>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d104      	bne.n	80063fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063f2:	4b36      	ldr	r3, [pc, #216]	; (80064cc <xTaskIncrementTick+0x158>)
 80063f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063f8:	601a      	str	r2, [r3, #0]
					break;
 80063fa:	e03e      	b.n	800647a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063fc:	4b30      	ldr	r3, [pc, #192]	; (80064c0 <xTaskIncrementTick+0x14c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	429a      	cmp	r2, r3
 8006412:	d203      	bcs.n	800641c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006414:	4a2d      	ldr	r2, [pc, #180]	; (80064cc <xTaskIncrementTick+0x158>)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800641a:	e02e      	b.n	800647a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	3304      	adds	r3, #4
 8006420:	4618      	mov	r0, r3
 8006422:	f7ff f818 	bl	8005456 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642a:	2b00      	cmp	r3, #0
 800642c:	d004      	beq.n	8006438 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	3318      	adds	r3, #24
 8006432:	4618      	mov	r0, r3
 8006434:	f7ff f80f 	bl	8005456 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643c:	2201      	movs	r2, #1
 800643e:	409a      	lsls	r2, r3
 8006440:	4b23      	ldr	r3, [pc, #140]	; (80064d0 <xTaskIncrementTick+0x15c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4313      	orrs	r3, r2
 8006446:	4a22      	ldr	r2, [pc, #136]	; (80064d0 <xTaskIncrementTick+0x15c>)
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800644e:	4613      	mov	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4a1f      	ldr	r2, [pc, #124]	; (80064d4 <xTaskIncrementTick+0x160>)
 8006458:	441a      	add	r2, r3
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	3304      	adds	r3, #4
 800645e:	4619      	mov	r1, r3
 8006460:	4610      	mov	r0, r2
 8006462:	f7fe ff9b 	bl	800539c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800646a:	4b1b      	ldr	r3, [pc, #108]	; (80064d8 <xTaskIncrementTick+0x164>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006470:	429a      	cmp	r2, r3
 8006472:	d3b9      	bcc.n	80063e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006474:	2301      	movs	r3, #1
 8006476:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006478:	e7b6      	b.n	80063e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800647a:	4b17      	ldr	r3, [pc, #92]	; (80064d8 <xTaskIncrementTick+0x164>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006480:	4914      	ldr	r1, [pc, #80]	; (80064d4 <xTaskIncrementTick+0x160>)
 8006482:	4613      	mov	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4413      	add	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	440b      	add	r3, r1
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d901      	bls.n	8006496 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006492:	2301      	movs	r3, #1
 8006494:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006496:	4b11      	ldr	r3, [pc, #68]	; (80064dc <xTaskIncrementTick+0x168>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d007      	beq.n	80064ae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800649e:	2301      	movs	r3, #1
 80064a0:	617b      	str	r3, [r7, #20]
 80064a2:	e004      	b.n	80064ae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80064a4:	4b0e      	ldr	r3, [pc, #56]	; (80064e0 <xTaskIncrementTick+0x16c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	3301      	adds	r3, #1
 80064aa:	4a0d      	ldr	r2, [pc, #52]	; (80064e0 <xTaskIncrementTick+0x16c>)
 80064ac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80064ae:	697b      	ldr	r3, [r7, #20]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	200003ac 	.word	0x200003ac
 80064bc:	20000388 	.word	0x20000388
 80064c0:	2000033c 	.word	0x2000033c
 80064c4:	20000340 	.word	0x20000340
 80064c8:	2000039c 	.word	0x2000039c
 80064cc:	200003a4 	.word	0x200003a4
 80064d0:	2000038c 	.word	0x2000038c
 80064d4:	20000288 	.word	0x20000288
 80064d8:	20000284 	.word	0x20000284
 80064dc:	20000398 	.word	0x20000398
 80064e0:	20000394 	.word	0x20000394

080064e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064ea:	4b27      	ldr	r3, [pc, #156]	; (8006588 <vTaskSwitchContext+0xa4>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80064f2:	4b26      	ldr	r3, [pc, #152]	; (800658c <vTaskSwitchContext+0xa8>)
 80064f4:	2201      	movs	r2, #1
 80064f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80064f8:	e03f      	b.n	800657a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80064fa:	4b24      	ldr	r3, [pc, #144]	; (800658c <vTaskSwitchContext+0xa8>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006500:	4b23      	ldr	r3, [pc, #140]	; (8006590 <vTaskSwitchContext+0xac>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	fab3 f383 	clz	r3, r3
 800650c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800650e:	7afb      	ldrb	r3, [r7, #11]
 8006510:	f1c3 031f 	rsb	r3, r3, #31
 8006514:	617b      	str	r3, [r7, #20]
 8006516:	491f      	ldr	r1, [pc, #124]	; (8006594 <vTaskSwitchContext+0xb0>)
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	4613      	mov	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	440b      	add	r3, r1
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10a      	bne.n	8006540 <vTaskSwitchContext+0x5c>
	__asm volatile
 800652a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	607b      	str	r3, [r7, #4]
}
 800653c:	bf00      	nop
 800653e:	e7fe      	b.n	800653e <vTaskSwitchContext+0x5a>
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	4613      	mov	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4a12      	ldr	r2, [pc, #72]	; (8006594 <vTaskSwitchContext+0xb0>)
 800654c:	4413      	add	r3, r2
 800654e:	613b      	str	r3, [r7, #16]
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	605a      	str	r2, [r3, #4]
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	3308      	adds	r3, #8
 8006562:	429a      	cmp	r2, r3
 8006564:	d104      	bne.n	8006570 <vTaskSwitchContext+0x8c>
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	605a      	str	r2, [r3, #4]
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	4a08      	ldr	r2, [pc, #32]	; (8006598 <vTaskSwitchContext+0xb4>)
 8006578:	6013      	str	r3, [r2, #0]
}
 800657a:	bf00      	nop
 800657c:	371c      	adds	r7, #28
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	200003ac 	.word	0x200003ac
 800658c:	20000398 	.word	0x20000398
 8006590:	2000038c 	.word	0x2000038c
 8006594:	20000288 	.word	0x20000288
 8006598:	20000284 	.word	0x20000284

0800659c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10a      	bne.n	80065c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80065ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	60fb      	str	r3, [r7, #12]
}
 80065be:	bf00      	nop
 80065c0:	e7fe      	b.n	80065c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065c2:	4b07      	ldr	r3, [pc, #28]	; (80065e0 <vTaskPlaceOnEventList+0x44>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	3318      	adds	r3, #24
 80065c8:	4619      	mov	r1, r3
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7fe ff0a 	bl	80053e4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065d0:	2101      	movs	r1, #1
 80065d2:	6838      	ldr	r0, [r7, #0]
 80065d4:	f000 fb7e 	bl	8006cd4 <prvAddCurrentTaskToDelayedList>
}
 80065d8:	bf00      	nop
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	20000284 	.word	0x20000284

080065e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10a      	bne.n	8006610 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	60fb      	str	r3, [r7, #12]
}
 800660c:	bf00      	nop
 800660e:	e7fe      	b.n	800660e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	3318      	adds	r3, #24
 8006614:	4618      	mov	r0, r3
 8006616:	f7fe ff1e 	bl	8005456 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800661a:	4b1d      	ldr	r3, [pc, #116]	; (8006690 <xTaskRemoveFromEventList+0xac>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d11c      	bne.n	800665c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	3304      	adds	r3, #4
 8006626:	4618      	mov	r0, r3
 8006628:	f7fe ff15 	bl	8005456 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006630:	2201      	movs	r2, #1
 8006632:	409a      	lsls	r2, r3
 8006634:	4b17      	ldr	r3, [pc, #92]	; (8006694 <xTaskRemoveFromEventList+0xb0>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4313      	orrs	r3, r2
 800663a:	4a16      	ldr	r2, [pc, #88]	; (8006694 <xTaskRemoveFromEventList+0xb0>)
 800663c:	6013      	str	r3, [r2, #0]
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006642:	4613      	mov	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4a13      	ldr	r2, [pc, #76]	; (8006698 <xTaskRemoveFromEventList+0xb4>)
 800664c:	441a      	add	r2, r3
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	3304      	adds	r3, #4
 8006652:	4619      	mov	r1, r3
 8006654:	4610      	mov	r0, r2
 8006656:	f7fe fea1 	bl	800539c <vListInsertEnd>
 800665a:	e005      	b.n	8006668 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	3318      	adds	r3, #24
 8006660:	4619      	mov	r1, r3
 8006662:	480e      	ldr	r0, [pc, #56]	; (800669c <xTaskRemoveFromEventList+0xb8>)
 8006664:	f7fe fe9a 	bl	800539c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800666c:	4b0c      	ldr	r3, [pc, #48]	; (80066a0 <xTaskRemoveFromEventList+0xbc>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006672:	429a      	cmp	r2, r3
 8006674:	d905      	bls.n	8006682 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006676:	2301      	movs	r3, #1
 8006678:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800667a:	4b0a      	ldr	r3, [pc, #40]	; (80066a4 <xTaskRemoveFromEventList+0xc0>)
 800667c:	2201      	movs	r2, #1
 800667e:	601a      	str	r2, [r3, #0]
 8006680:	e001      	b.n	8006686 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006682:	2300      	movs	r3, #0
 8006684:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006686:	697b      	ldr	r3, [r7, #20]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3718      	adds	r7, #24
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	200003ac 	.word	0x200003ac
 8006694:	2000038c 	.word	0x2000038c
 8006698:	20000288 	.word	0x20000288
 800669c:	20000344 	.word	0x20000344
 80066a0:	20000284 	.word	0x20000284
 80066a4:	20000398 	.word	0x20000398

080066a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066b0:	4b06      	ldr	r3, [pc, #24]	; (80066cc <vTaskInternalSetTimeOutState+0x24>)
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066b8:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <vTaskInternalSetTimeOutState+0x28>)
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	605a      	str	r2, [r3, #4]
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	2000039c 	.word	0x2000039c
 80066d0:	20000388 	.word	0x20000388

080066d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b088      	sub	sp, #32
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10a      	bne.n	80066fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80066e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	613b      	str	r3, [r7, #16]
}
 80066f6:	bf00      	nop
 80066f8:	e7fe      	b.n	80066f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10a      	bne.n	8006716 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	60fb      	str	r3, [r7, #12]
}
 8006712:	bf00      	nop
 8006714:	e7fe      	b.n	8006714 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006716:	f000 fc6d 	bl	8006ff4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800671a:	4b1d      	ldr	r3, [pc, #116]	; (8006790 <xTaskCheckForTimeOut+0xbc>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	69ba      	ldr	r2, [r7, #24]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006732:	d102      	bne.n	800673a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006734:	2300      	movs	r3, #0
 8006736:	61fb      	str	r3, [r7, #28]
 8006738:	e023      	b.n	8006782 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	4b15      	ldr	r3, [pc, #84]	; (8006794 <xTaskCheckForTimeOut+0xc0>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	429a      	cmp	r2, r3
 8006744:	d007      	beq.n	8006756 <xTaskCheckForTimeOut+0x82>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	429a      	cmp	r2, r3
 800674e:	d302      	bcc.n	8006756 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006750:	2301      	movs	r3, #1
 8006752:	61fb      	str	r3, [r7, #28]
 8006754:	e015      	b.n	8006782 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	429a      	cmp	r2, r3
 800675e:	d20b      	bcs.n	8006778 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	1ad2      	subs	r2, r2, r3
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7ff ff9b 	bl	80066a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006772:	2300      	movs	r3, #0
 8006774:	61fb      	str	r3, [r7, #28]
 8006776:	e004      	b.n	8006782 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	2200      	movs	r2, #0
 800677c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800677e:	2301      	movs	r3, #1
 8006780:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006782:	f000 fc67 	bl	8007054 <vPortExitCritical>

	return xReturn;
 8006786:	69fb      	ldr	r3, [r7, #28]
}
 8006788:	4618      	mov	r0, r3
 800678a:	3720      	adds	r7, #32
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	20000388 	.word	0x20000388
 8006794:	2000039c 	.word	0x2000039c

08006798 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006798:	b480      	push	{r7}
 800679a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800679c:	4b03      	ldr	r3, [pc, #12]	; (80067ac <vTaskMissedYield+0x14>)
 800679e:	2201      	movs	r2, #1
 80067a0:	601a      	str	r2, [r3, #0]
}
 80067a2:	bf00      	nop
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	20000398 	.word	0x20000398

080067b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067b8:	f000 f852 	bl	8006860 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067bc:	4b06      	ldr	r3, [pc, #24]	; (80067d8 <prvIdleTask+0x28>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d9f9      	bls.n	80067b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80067c4:	4b05      	ldr	r3, [pc, #20]	; (80067dc <prvIdleTask+0x2c>)
 80067c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ca:	601a      	str	r2, [r3, #0]
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80067d4:	e7f0      	b.n	80067b8 <prvIdleTask+0x8>
 80067d6:	bf00      	nop
 80067d8:	20000288 	.word	0x20000288
 80067dc:	e000ed04 	.word	0xe000ed04

080067e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067e6:	2300      	movs	r3, #0
 80067e8:	607b      	str	r3, [r7, #4]
 80067ea:	e00c      	b.n	8006806 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	4613      	mov	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4a12      	ldr	r2, [pc, #72]	; (8006840 <prvInitialiseTaskLists+0x60>)
 80067f8:	4413      	add	r3, r2
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fe fda1 	bl	8005342 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	3301      	adds	r3, #1
 8006804:	607b      	str	r3, [r7, #4]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b06      	cmp	r3, #6
 800680a:	d9ef      	bls.n	80067ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800680c:	480d      	ldr	r0, [pc, #52]	; (8006844 <prvInitialiseTaskLists+0x64>)
 800680e:	f7fe fd98 	bl	8005342 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006812:	480d      	ldr	r0, [pc, #52]	; (8006848 <prvInitialiseTaskLists+0x68>)
 8006814:	f7fe fd95 	bl	8005342 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006818:	480c      	ldr	r0, [pc, #48]	; (800684c <prvInitialiseTaskLists+0x6c>)
 800681a:	f7fe fd92 	bl	8005342 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800681e:	480c      	ldr	r0, [pc, #48]	; (8006850 <prvInitialiseTaskLists+0x70>)
 8006820:	f7fe fd8f 	bl	8005342 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006824:	480b      	ldr	r0, [pc, #44]	; (8006854 <prvInitialiseTaskLists+0x74>)
 8006826:	f7fe fd8c 	bl	8005342 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800682a:	4b0b      	ldr	r3, [pc, #44]	; (8006858 <prvInitialiseTaskLists+0x78>)
 800682c:	4a05      	ldr	r2, [pc, #20]	; (8006844 <prvInitialiseTaskLists+0x64>)
 800682e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006830:	4b0a      	ldr	r3, [pc, #40]	; (800685c <prvInitialiseTaskLists+0x7c>)
 8006832:	4a05      	ldr	r2, [pc, #20]	; (8006848 <prvInitialiseTaskLists+0x68>)
 8006834:	601a      	str	r2, [r3, #0]
}
 8006836:	bf00      	nop
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20000288 	.word	0x20000288
 8006844:	20000314 	.word	0x20000314
 8006848:	20000328 	.word	0x20000328
 800684c:	20000344 	.word	0x20000344
 8006850:	20000358 	.word	0x20000358
 8006854:	20000370 	.word	0x20000370
 8006858:	2000033c 	.word	0x2000033c
 800685c:	20000340 	.word	0x20000340

08006860 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006866:	e019      	b.n	800689c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006868:	f000 fbc4 	bl	8006ff4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800686c:	4b10      	ldr	r3, [pc, #64]	; (80068b0 <prvCheckTasksWaitingTermination+0x50>)
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3304      	adds	r3, #4
 8006878:	4618      	mov	r0, r3
 800687a:	f7fe fdec 	bl	8005456 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800687e:	4b0d      	ldr	r3, [pc, #52]	; (80068b4 <prvCheckTasksWaitingTermination+0x54>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3b01      	subs	r3, #1
 8006884:	4a0b      	ldr	r2, [pc, #44]	; (80068b4 <prvCheckTasksWaitingTermination+0x54>)
 8006886:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006888:	4b0b      	ldr	r3, [pc, #44]	; (80068b8 <prvCheckTasksWaitingTermination+0x58>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3b01      	subs	r3, #1
 800688e:	4a0a      	ldr	r2, [pc, #40]	; (80068b8 <prvCheckTasksWaitingTermination+0x58>)
 8006890:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006892:	f000 fbdf 	bl	8007054 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f810 	bl	80068bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800689c:	4b06      	ldr	r3, [pc, #24]	; (80068b8 <prvCheckTasksWaitingTermination+0x58>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1e1      	bne.n	8006868 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop
 80068a8:	3708      	adds	r7, #8
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	20000358 	.word	0x20000358
 80068b4:	20000384 	.word	0x20000384
 80068b8:	2000036c 	.word	0x2000036c

080068bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d108      	bne.n	80068e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fd3c 	bl	8007350 <vPortFree>
				vPortFree( pxTCB );
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 fd39 	bl	8007350 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80068de:	e018      	b.n	8006912 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d103      	bne.n	80068f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fd30 	bl	8007350 <vPortFree>
	}
 80068f0:	e00f      	b.n	8006912 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d00a      	beq.n	8006912 <prvDeleteTCB+0x56>
	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	60fb      	str	r3, [r7, #12]
}
 800690e:	bf00      	nop
 8006910:	e7fe      	b.n	8006910 <prvDeleteTCB+0x54>
	}
 8006912:	bf00      	nop
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006922:	4b0c      	ldr	r3, [pc, #48]	; (8006954 <prvResetNextTaskUnblockTime+0x38>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d104      	bne.n	8006936 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800692c:	4b0a      	ldr	r3, [pc, #40]	; (8006958 <prvResetNextTaskUnblockTime+0x3c>)
 800692e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006932:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006934:	e008      	b.n	8006948 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006936:	4b07      	ldr	r3, [pc, #28]	; (8006954 <prvResetNextTaskUnblockTime+0x38>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	4a04      	ldr	r2, [pc, #16]	; (8006958 <prvResetNextTaskUnblockTime+0x3c>)
 8006946:	6013      	str	r3, [r2, #0]
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr
 8006954:	2000033c 	.word	0x2000033c
 8006958:	200003a4 	.word	0x200003a4

0800695c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006962:	4b0b      	ldr	r3, [pc, #44]	; (8006990 <xTaskGetSchedulerState+0x34>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d102      	bne.n	8006970 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800696a:	2301      	movs	r3, #1
 800696c:	607b      	str	r3, [r7, #4]
 800696e:	e008      	b.n	8006982 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006970:	4b08      	ldr	r3, [pc, #32]	; (8006994 <xTaskGetSchedulerState+0x38>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d102      	bne.n	800697e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006978:	2302      	movs	r3, #2
 800697a:	607b      	str	r3, [r7, #4]
 800697c:	e001      	b.n	8006982 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800697e:	2300      	movs	r3, #0
 8006980:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006982:	687b      	ldr	r3, [r7, #4]
	}
 8006984:	4618      	mov	r0, r3
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	20000390 	.word	0x20000390
 8006994:	200003ac 	.word	0x200003ac

08006998 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80069a4:	2300      	movs	r3, #0
 80069a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d05e      	beq.n	8006a6c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b2:	4b31      	ldr	r3, [pc, #196]	; (8006a78 <xTaskPriorityInherit+0xe0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d24e      	bcs.n	8006a5a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	db06      	blt.n	80069d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069c4:	4b2c      	ldr	r3, [pc, #176]	; (8006a78 <xTaskPriorityInherit+0xe0>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ca:	f1c3 0207 	rsb	r2, r3, #7
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	6959      	ldr	r1, [r3, #20]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4a26      	ldr	r2, [pc, #152]	; (8006a7c <xTaskPriorityInherit+0xe4>)
 80069e4:	4413      	add	r3, r2
 80069e6:	4299      	cmp	r1, r3
 80069e8:	d12f      	bne.n	8006a4a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	3304      	adds	r3, #4
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fe fd31 	bl	8005456 <uxListRemove>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10a      	bne.n	8006a10 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fe:	2201      	movs	r2, #1
 8006a00:	fa02 f303 	lsl.w	r3, r2, r3
 8006a04:	43da      	mvns	r2, r3
 8006a06:	4b1e      	ldr	r3, [pc, #120]	; (8006a80 <xTaskPriorityInherit+0xe8>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	4a1c      	ldr	r2, [pc, #112]	; (8006a80 <xTaskPriorityInherit+0xe8>)
 8006a0e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a10:	4b19      	ldr	r3, [pc, #100]	; (8006a78 <xTaskPriorityInherit+0xe0>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1e:	2201      	movs	r2, #1
 8006a20:	409a      	lsls	r2, r3
 8006a22:	4b17      	ldr	r3, [pc, #92]	; (8006a80 <xTaskPriorityInherit+0xe8>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	4a15      	ldr	r2, [pc, #84]	; (8006a80 <xTaskPriorityInherit+0xe8>)
 8006a2a:	6013      	str	r3, [r2, #0]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a30:	4613      	mov	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4a10      	ldr	r2, [pc, #64]	; (8006a7c <xTaskPriorityInherit+0xe4>)
 8006a3a:	441a      	add	r2, r3
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	3304      	adds	r3, #4
 8006a40:	4619      	mov	r1, r3
 8006a42:	4610      	mov	r0, r2
 8006a44:	f7fe fcaa 	bl	800539c <vListInsertEnd>
 8006a48:	e004      	b.n	8006a54 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a4a:	4b0b      	ldr	r3, [pc, #44]	; (8006a78 <xTaskPriorityInherit+0xe0>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006a54:	2301      	movs	r3, #1
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	e008      	b.n	8006a6c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a5e:	4b06      	ldr	r3, [pc, #24]	; (8006a78 <xTaskPriorityInherit+0xe0>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d201      	bcs.n	8006a6c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
	}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	20000284 	.word	0x20000284
 8006a7c:	20000288 	.word	0x20000288
 8006a80:	2000038c 	.word	0x2000038c

08006a84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a90:	2300      	movs	r3, #0
 8006a92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d06e      	beq.n	8006b78 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a9a:	4b3a      	ldr	r3, [pc, #232]	; (8006b84 <xTaskPriorityDisinherit+0x100>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d00a      	beq.n	8006aba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa8:	f383 8811 	msr	BASEPRI, r3
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	60fb      	str	r3, [r7, #12]
}
 8006ab6:	bf00      	nop
 8006ab8:	e7fe      	b.n	8006ab8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10a      	bne.n	8006ad8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac6:	f383 8811 	msr	BASEPRI, r3
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	60bb      	str	r3, [r7, #8]
}
 8006ad4:	bf00      	nop
 8006ad6:	e7fe      	b.n	8006ad6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006adc:	1e5a      	subs	r2, r3, #1
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d044      	beq.n	8006b78 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d140      	bne.n	8006b78 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	3304      	adds	r3, #4
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fe fcab 	bl	8005456 <uxListRemove>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d115      	bne.n	8006b32 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0a:	491f      	ldr	r1, [pc, #124]	; (8006b88 <xTaskPriorityDisinherit+0x104>)
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	440b      	add	r3, r1
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10a      	bne.n	8006b32 <xTaskPriorityDisinherit+0xae>
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b20:	2201      	movs	r2, #1
 8006b22:	fa02 f303 	lsl.w	r3, r2, r3
 8006b26:	43da      	mvns	r2, r3
 8006b28:	4b18      	ldr	r3, [pc, #96]	; (8006b8c <xTaskPriorityDisinherit+0x108>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	4a17      	ldr	r2, [pc, #92]	; (8006b8c <xTaskPriorityDisinherit+0x108>)
 8006b30:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3e:	f1c3 0207 	rsb	r2, r3, #7
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	409a      	lsls	r2, r3
 8006b4e:	4b0f      	ldr	r3, [pc, #60]	; (8006b8c <xTaskPriorityDisinherit+0x108>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	4a0d      	ldr	r2, [pc, #52]	; (8006b8c <xTaskPriorityDisinherit+0x108>)
 8006b56:	6013      	str	r3, [r2, #0]
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4a08      	ldr	r2, [pc, #32]	; (8006b88 <xTaskPriorityDisinherit+0x104>)
 8006b66:	441a      	add	r2, r3
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4610      	mov	r0, r2
 8006b70:	f7fe fc14 	bl	800539c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b74:	2301      	movs	r3, #1
 8006b76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b78:	697b      	ldr	r3, [r7, #20]
	}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3718      	adds	r7, #24
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	20000284 	.word	0x20000284
 8006b88:	20000288 	.word	0x20000288
 8006b8c:	2000038c 	.word	0x2000038c

08006b90 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b088      	sub	sp, #32
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d077      	beq.n	8006c98 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10a      	bne.n	8006bc6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb4:	f383 8811 	msr	BASEPRI, r3
 8006bb8:	f3bf 8f6f 	isb	sy
 8006bbc:	f3bf 8f4f 	dsb	sy
 8006bc0:	60fb      	str	r3, [r7, #12]
}
 8006bc2:	bf00      	nop
 8006bc4:	e7fe      	b.n	8006bc4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d902      	bls.n	8006bd6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	61fb      	str	r3, [r7, #28]
 8006bd4:	e002      	b.n	8006bdc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bda:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be0:	69fa      	ldr	r2, [r7, #28]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d058      	beq.n	8006c98 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d153      	bne.n	8006c98 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006bf0:	4b2b      	ldr	r3, [pc, #172]	; (8006ca0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d10a      	bne.n	8006c10 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfe:	f383 8811 	msr	BASEPRI, r3
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	60bb      	str	r3, [r7, #8]
}
 8006c0c:	bf00      	nop
 8006c0e:	e7fe      	b.n	8006c0e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c14:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	69fa      	ldr	r2, [r7, #28]
 8006c1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	db04      	blt.n	8006c2e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	f1c3 0207 	rsb	r2, r3, #7
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	6959      	ldr	r1, [r3, #20]
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	4613      	mov	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4a19      	ldr	r2, [pc, #100]	; (8006ca4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006c3e:	4413      	add	r3, r2
 8006c40:	4299      	cmp	r1, r3
 8006c42:	d129      	bne.n	8006c98 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	3304      	adds	r3, #4
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7fe fc04 	bl	8005456 <uxListRemove>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10a      	bne.n	8006c6a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c58:	2201      	movs	r2, #1
 8006c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5e:	43da      	mvns	r2, r3
 8006c60:	4b11      	ldr	r3, [pc, #68]	; (8006ca8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4013      	ands	r3, r2
 8006c66:	4a10      	ldr	r2, [pc, #64]	; (8006ca8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006c68:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6e:	2201      	movs	r2, #1
 8006c70:	409a      	lsls	r2, r3
 8006c72:	4b0d      	ldr	r3, [pc, #52]	; (8006ca8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	4a0b      	ldr	r2, [pc, #44]	; (8006ca8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006c7a:	6013      	str	r3, [r2, #0]
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c80:	4613      	mov	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4413      	add	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4a06      	ldr	r2, [pc, #24]	; (8006ca4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006c8a:	441a      	add	r2, r3
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	3304      	adds	r3, #4
 8006c90:	4619      	mov	r1, r3
 8006c92:	4610      	mov	r0, r2
 8006c94:	f7fe fb82 	bl	800539c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c98:	bf00      	nop
 8006c9a:	3720      	adds	r7, #32
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	20000284 	.word	0x20000284
 8006ca4:	20000288 	.word	0x20000288
 8006ca8:	2000038c 	.word	0x2000038c

08006cac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006cac:	b480      	push	{r7}
 8006cae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006cb0:	4b07      	ldr	r3, [pc, #28]	; (8006cd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d004      	beq.n	8006cc2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006cb8:	4b05      	ldr	r3, [pc, #20]	; (8006cd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cbe:	3201      	adds	r2, #1
 8006cc0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006cc2:	4b03      	ldr	r3, [pc, #12]	; (8006cd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
	}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	20000284 	.word	0x20000284

08006cd4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006cde:	4b29      	ldr	r3, [pc, #164]	; (8006d84 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ce4:	4b28      	ldr	r3, [pc, #160]	; (8006d88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	3304      	adds	r3, #4
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fe fbb3 	bl	8005456 <uxListRemove>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10b      	bne.n	8006d0e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006cf6:	4b24      	ldr	r3, [pc, #144]	; (8006d88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006d02:	43da      	mvns	r2, r3
 8006d04:	4b21      	ldr	r3, [pc, #132]	; (8006d8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4013      	ands	r3, r2
 8006d0a:	4a20      	ldr	r2, [pc, #128]	; (8006d8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d0c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d14:	d10a      	bne.n	8006d2c <prvAddCurrentTaskToDelayedList+0x58>
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d007      	beq.n	8006d2c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d1c:	4b1a      	ldr	r3, [pc, #104]	; (8006d88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3304      	adds	r3, #4
 8006d22:	4619      	mov	r1, r3
 8006d24:	481a      	ldr	r0, [pc, #104]	; (8006d90 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006d26:	f7fe fb39 	bl	800539c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d2a:	e026      	b.n	8006d7a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4413      	add	r3, r2
 8006d32:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d34:	4b14      	ldr	r3, [pc, #80]	; (8006d88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d209      	bcs.n	8006d58 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d44:	4b13      	ldr	r3, [pc, #76]	; (8006d94 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	4b0f      	ldr	r3, [pc, #60]	; (8006d88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	4619      	mov	r1, r3
 8006d50:	4610      	mov	r0, r2
 8006d52:	f7fe fb47 	bl	80053e4 <vListInsert>
}
 8006d56:	e010      	b.n	8006d7a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d58:	4b0f      	ldr	r3, [pc, #60]	; (8006d98 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	4b0a      	ldr	r3, [pc, #40]	; (8006d88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3304      	adds	r3, #4
 8006d62:	4619      	mov	r1, r3
 8006d64:	4610      	mov	r0, r2
 8006d66:	f7fe fb3d 	bl	80053e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d6a:	4b0c      	ldr	r3, [pc, #48]	; (8006d9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d202      	bcs.n	8006d7a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006d74:	4a09      	ldr	r2, [pc, #36]	; (8006d9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	6013      	str	r3, [r2, #0]
}
 8006d7a:	bf00      	nop
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	20000388 	.word	0x20000388
 8006d88:	20000284 	.word	0x20000284
 8006d8c:	2000038c 	.word	0x2000038c
 8006d90:	20000370 	.word	0x20000370
 8006d94:	20000340 	.word	0x20000340
 8006d98:	2000033c 	.word	0x2000033c
 8006d9c:	200003a4 	.word	0x200003a4

08006da0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	3b04      	subs	r3, #4
 8006db0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006db8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3b04      	subs	r3, #4
 8006dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	f023 0201 	bic.w	r2, r3, #1
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	3b04      	subs	r3, #4
 8006dce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006dd0:	4a0c      	ldr	r2, [pc, #48]	; (8006e04 <pxPortInitialiseStack+0x64>)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	3b14      	subs	r3, #20
 8006dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	3b04      	subs	r3, #4
 8006de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f06f 0202 	mvn.w	r2, #2
 8006dee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	3b20      	subs	r3, #32
 8006df4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006df6:	68fb      	ldr	r3, [r7, #12]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	08006e09 	.word	0x08006e09

08006e08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e12:	4b12      	ldr	r3, [pc, #72]	; (8006e5c <prvTaskExitError+0x54>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e1a:	d00a      	beq.n	8006e32 <prvTaskExitError+0x2a>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	60fb      	str	r3, [r7, #12]
}
 8006e2e:	bf00      	nop
 8006e30:	e7fe      	b.n	8006e30 <prvTaskExitError+0x28>
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	60bb      	str	r3, [r7, #8]
}
 8006e44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e46:	bf00      	nop
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d0fc      	beq.n	8006e48 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e4e:	bf00      	nop
 8006e50:	bf00      	nop
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	2000000c 	.word	0x2000000c

08006e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e60:	4b07      	ldr	r3, [pc, #28]	; (8006e80 <pxCurrentTCBConst2>)
 8006e62:	6819      	ldr	r1, [r3, #0]
 8006e64:	6808      	ldr	r0, [r1, #0]
 8006e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e6a:	f380 8809 	msr	PSP, r0
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f04f 0000 	mov.w	r0, #0
 8006e76:	f380 8811 	msr	BASEPRI, r0
 8006e7a:	4770      	bx	lr
 8006e7c:	f3af 8000 	nop.w

08006e80 <pxCurrentTCBConst2>:
 8006e80:	20000284 	.word	0x20000284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e84:	bf00      	nop
 8006e86:	bf00      	nop

08006e88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006e88:	4808      	ldr	r0, [pc, #32]	; (8006eac <prvPortStartFirstTask+0x24>)
 8006e8a:	6800      	ldr	r0, [r0, #0]
 8006e8c:	6800      	ldr	r0, [r0, #0]
 8006e8e:	f380 8808 	msr	MSP, r0
 8006e92:	f04f 0000 	mov.w	r0, #0
 8006e96:	f380 8814 	msr	CONTROL, r0
 8006e9a:	b662      	cpsie	i
 8006e9c:	b661      	cpsie	f
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	df00      	svc	0
 8006ea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006eaa:	bf00      	nop
 8006eac:	e000ed08 	.word	0xe000ed08

08006eb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006eb6:	4b46      	ldr	r3, [pc, #280]	; (8006fd0 <xPortStartScheduler+0x120>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a46      	ldr	r2, [pc, #280]	; (8006fd4 <xPortStartScheduler+0x124>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d10a      	bne.n	8006ed6 <xPortStartScheduler+0x26>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	613b      	str	r3, [r7, #16]
}
 8006ed2:	bf00      	nop
 8006ed4:	e7fe      	b.n	8006ed4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ed6:	4b3e      	ldr	r3, [pc, #248]	; (8006fd0 <xPortStartScheduler+0x120>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a3f      	ldr	r2, [pc, #252]	; (8006fd8 <xPortStartScheduler+0x128>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d10a      	bne.n	8006ef6 <xPortStartScheduler+0x46>
	__asm volatile
 8006ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	60fb      	str	r3, [r7, #12]
}
 8006ef2:	bf00      	nop
 8006ef4:	e7fe      	b.n	8006ef4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ef6:	4b39      	ldr	r3, [pc, #228]	; (8006fdc <xPortStartScheduler+0x12c>)
 8006ef8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	22ff      	movs	r2, #255	; 0xff
 8006f06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f10:	78fb      	ldrb	r3, [r7, #3]
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f18:	b2da      	uxtb	r2, r3
 8006f1a:	4b31      	ldr	r3, [pc, #196]	; (8006fe0 <xPortStartScheduler+0x130>)
 8006f1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f1e:	4b31      	ldr	r3, [pc, #196]	; (8006fe4 <xPortStartScheduler+0x134>)
 8006f20:	2207      	movs	r2, #7
 8006f22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f24:	e009      	b.n	8006f3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006f26:	4b2f      	ldr	r3, [pc, #188]	; (8006fe4 <xPortStartScheduler+0x134>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	4a2d      	ldr	r2, [pc, #180]	; (8006fe4 <xPortStartScheduler+0x134>)
 8006f2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f30:	78fb      	ldrb	r3, [r7, #3]
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	005b      	lsls	r3, r3, #1
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f3a:	78fb      	ldrb	r3, [r7, #3]
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f42:	2b80      	cmp	r3, #128	; 0x80
 8006f44:	d0ef      	beq.n	8006f26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f46:	4b27      	ldr	r3, [pc, #156]	; (8006fe4 <xPortStartScheduler+0x134>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f1c3 0307 	rsb	r3, r3, #7
 8006f4e:	2b04      	cmp	r3, #4
 8006f50:	d00a      	beq.n	8006f68 <xPortStartScheduler+0xb8>
	__asm volatile
 8006f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	60bb      	str	r3, [r7, #8]
}
 8006f64:	bf00      	nop
 8006f66:	e7fe      	b.n	8006f66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f68:	4b1e      	ldr	r3, [pc, #120]	; (8006fe4 <xPortStartScheduler+0x134>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	021b      	lsls	r3, r3, #8
 8006f6e:	4a1d      	ldr	r2, [pc, #116]	; (8006fe4 <xPortStartScheduler+0x134>)
 8006f70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f72:	4b1c      	ldr	r3, [pc, #112]	; (8006fe4 <xPortStartScheduler+0x134>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f7a:	4a1a      	ldr	r2, [pc, #104]	; (8006fe4 <xPortStartScheduler+0x134>)
 8006f7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	b2da      	uxtb	r2, r3
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f86:	4b18      	ldr	r3, [pc, #96]	; (8006fe8 <xPortStartScheduler+0x138>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a17      	ldr	r2, [pc, #92]	; (8006fe8 <xPortStartScheduler+0x138>)
 8006f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f92:	4b15      	ldr	r3, [pc, #84]	; (8006fe8 <xPortStartScheduler+0x138>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a14      	ldr	r2, [pc, #80]	; (8006fe8 <xPortStartScheduler+0x138>)
 8006f98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006f9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f9e:	f000 f8dd 	bl	800715c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006fa2:	4b12      	ldr	r3, [pc, #72]	; (8006fec <xPortStartScheduler+0x13c>)
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006fa8:	f000 f8fc 	bl	80071a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006fac:	4b10      	ldr	r3, [pc, #64]	; (8006ff0 <xPortStartScheduler+0x140>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a0f      	ldr	r2, [pc, #60]	; (8006ff0 <xPortStartScheduler+0x140>)
 8006fb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006fb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006fb8:	f7ff ff66 	bl	8006e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006fbc:	f7ff fa92 	bl	80064e4 <vTaskSwitchContext>
	prvTaskExitError();
 8006fc0:	f7ff ff22 	bl	8006e08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3718      	adds	r7, #24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	e000ed00 	.word	0xe000ed00
 8006fd4:	410fc271 	.word	0x410fc271
 8006fd8:	410fc270 	.word	0x410fc270
 8006fdc:	e000e400 	.word	0xe000e400
 8006fe0:	200003b0 	.word	0x200003b0
 8006fe4:	200003b4 	.word	0x200003b4
 8006fe8:	e000ed20 	.word	0xe000ed20
 8006fec:	2000000c 	.word	0x2000000c
 8006ff0:	e000ef34 	.word	0xe000ef34

08006ff4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
	__asm volatile
 8006ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	607b      	str	r3, [r7, #4]
}
 800700c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800700e:	4b0f      	ldr	r3, [pc, #60]	; (800704c <vPortEnterCritical+0x58>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3301      	adds	r3, #1
 8007014:	4a0d      	ldr	r2, [pc, #52]	; (800704c <vPortEnterCritical+0x58>)
 8007016:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007018:	4b0c      	ldr	r3, [pc, #48]	; (800704c <vPortEnterCritical+0x58>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d10f      	bne.n	8007040 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007020:	4b0b      	ldr	r3, [pc, #44]	; (8007050 <vPortEnterCritical+0x5c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00a      	beq.n	8007040 <vPortEnterCritical+0x4c>
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	603b      	str	r3, [r7, #0]
}
 800703c:	bf00      	nop
 800703e:	e7fe      	b.n	800703e <vPortEnterCritical+0x4a>
	}
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	2000000c 	.word	0x2000000c
 8007050:	e000ed04 	.word	0xe000ed04

08007054 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800705a:	4b12      	ldr	r3, [pc, #72]	; (80070a4 <vPortExitCritical+0x50>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10a      	bne.n	8007078 <vPortExitCritical+0x24>
	__asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	607b      	str	r3, [r7, #4]
}
 8007074:	bf00      	nop
 8007076:	e7fe      	b.n	8007076 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007078:	4b0a      	ldr	r3, [pc, #40]	; (80070a4 <vPortExitCritical+0x50>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3b01      	subs	r3, #1
 800707e:	4a09      	ldr	r2, [pc, #36]	; (80070a4 <vPortExitCritical+0x50>)
 8007080:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007082:	4b08      	ldr	r3, [pc, #32]	; (80070a4 <vPortExitCritical+0x50>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d105      	bne.n	8007096 <vPortExitCritical+0x42>
 800708a:	2300      	movs	r3, #0
 800708c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007094:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007096:	bf00      	nop
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	2000000c 	.word	0x2000000c
	...

080070b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80070b0:	f3ef 8009 	mrs	r0, PSP
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	4b15      	ldr	r3, [pc, #84]	; (8007110 <pxCurrentTCBConst>)
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	f01e 0f10 	tst.w	lr, #16
 80070c0:	bf08      	it	eq
 80070c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80070c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ca:	6010      	str	r0, [r2, #0]
 80070cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80070d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80070d4:	f380 8811 	msr	BASEPRI, r0
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f7ff fa00 	bl	80064e4 <vTaskSwitchContext>
 80070e4:	f04f 0000 	mov.w	r0, #0
 80070e8:	f380 8811 	msr	BASEPRI, r0
 80070ec:	bc09      	pop	{r0, r3}
 80070ee:	6819      	ldr	r1, [r3, #0]
 80070f0:	6808      	ldr	r0, [r1, #0]
 80070f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f6:	f01e 0f10 	tst.w	lr, #16
 80070fa:	bf08      	it	eq
 80070fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007100:	f380 8809 	msr	PSP, r0
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	f3af 8000 	nop.w

08007110 <pxCurrentTCBConst>:
 8007110:	20000284 	.word	0x20000284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007114:	bf00      	nop
 8007116:	bf00      	nop

08007118 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	607b      	str	r3, [r7, #4]
}
 8007130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007132:	f7ff f91f 	bl	8006374 <xTaskIncrementTick>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800713c:	4b06      	ldr	r3, [pc, #24]	; (8007158 <SysTick_Handler+0x40>)
 800713e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007142:	601a      	str	r2, [r3, #0]
 8007144:	2300      	movs	r3, #0
 8007146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	f383 8811 	msr	BASEPRI, r3
}
 800714e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007150:	bf00      	nop
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	e000ed04 	.word	0xe000ed04

0800715c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800715c:	b480      	push	{r7}
 800715e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007160:	4b0b      	ldr	r3, [pc, #44]	; (8007190 <vPortSetupTimerInterrupt+0x34>)
 8007162:	2200      	movs	r2, #0
 8007164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007166:	4b0b      	ldr	r3, [pc, #44]	; (8007194 <vPortSetupTimerInterrupt+0x38>)
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800716c:	4b0a      	ldr	r3, [pc, #40]	; (8007198 <vPortSetupTimerInterrupt+0x3c>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a0a      	ldr	r2, [pc, #40]	; (800719c <vPortSetupTimerInterrupt+0x40>)
 8007172:	fba2 2303 	umull	r2, r3, r2, r3
 8007176:	099b      	lsrs	r3, r3, #6
 8007178:	4a09      	ldr	r2, [pc, #36]	; (80071a0 <vPortSetupTimerInterrupt+0x44>)
 800717a:	3b01      	subs	r3, #1
 800717c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800717e:	4b04      	ldr	r3, [pc, #16]	; (8007190 <vPortSetupTimerInterrupt+0x34>)
 8007180:	2207      	movs	r2, #7
 8007182:	601a      	str	r2, [r3, #0]
}
 8007184:	bf00      	nop
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	e000e010 	.word	0xe000e010
 8007194:	e000e018 	.word	0xe000e018
 8007198:	20000000 	.word	0x20000000
 800719c:	10624dd3 	.word	0x10624dd3
 80071a0:	e000e014 	.word	0xe000e014

080071a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80071a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80071b4 <vPortEnableVFP+0x10>
 80071a8:	6801      	ldr	r1, [r0, #0]
 80071aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80071ae:	6001      	str	r1, [r0, #0]
 80071b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80071b2:	bf00      	nop
 80071b4:	e000ed88 	.word	0xe000ed88

080071b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b08a      	sub	sp, #40	; 0x28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80071c0:	2300      	movs	r3, #0
 80071c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80071c4:	f7ff f82c 	bl	8006220 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80071c8:	4b5b      	ldr	r3, [pc, #364]	; (8007338 <pvPortMalloc+0x180>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d101      	bne.n	80071d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80071d0:	f000 f920 	bl	8007414 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80071d4:	4b59      	ldr	r3, [pc, #356]	; (800733c <pvPortMalloc+0x184>)
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4013      	ands	r3, r2
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f040 8093 	bne.w	8007308 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d01d      	beq.n	8007224 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80071e8:	2208      	movs	r2, #8
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4413      	add	r3, r2
 80071ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f003 0307 	and.w	r3, r3, #7
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d014      	beq.n	8007224 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f023 0307 	bic.w	r3, r3, #7
 8007200:	3308      	adds	r3, #8
 8007202:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f003 0307 	and.w	r3, r3, #7
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00a      	beq.n	8007224 <pvPortMalloc+0x6c>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	617b      	str	r3, [r7, #20]
}
 8007220:	bf00      	nop
 8007222:	e7fe      	b.n	8007222 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d06e      	beq.n	8007308 <pvPortMalloc+0x150>
 800722a:	4b45      	ldr	r3, [pc, #276]	; (8007340 <pvPortMalloc+0x188>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	429a      	cmp	r2, r3
 8007232:	d869      	bhi.n	8007308 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007234:	4b43      	ldr	r3, [pc, #268]	; (8007344 <pvPortMalloc+0x18c>)
 8007236:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007238:	4b42      	ldr	r3, [pc, #264]	; (8007344 <pvPortMalloc+0x18c>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800723e:	e004      	b.n	800724a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007242:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	429a      	cmp	r2, r3
 8007252:	d903      	bls.n	800725c <pvPortMalloc+0xa4>
 8007254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1f1      	bne.n	8007240 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800725c:	4b36      	ldr	r3, [pc, #216]	; (8007338 <pvPortMalloc+0x180>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007262:	429a      	cmp	r2, r3
 8007264:	d050      	beq.n	8007308 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2208      	movs	r2, #8
 800726c:	4413      	add	r3, r2
 800726e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	1ad2      	subs	r2, r2, r3
 8007280:	2308      	movs	r3, #8
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	429a      	cmp	r2, r3
 8007286:	d91f      	bls.n	80072c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4413      	add	r3, r2
 800728e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	f003 0307 	and.w	r3, r3, #7
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00a      	beq.n	80072b0 <pvPortMalloc+0xf8>
	__asm volatile
 800729a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729e:	f383 8811 	msr	BASEPRI, r3
 80072a2:	f3bf 8f6f 	isb	sy
 80072a6:	f3bf 8f4f 	dsb	sy
 80072aa:	613b      	str	r3, [r7, #16]
}
 80072ac:	bf00      	nop
 80072ae:	e7fe      	b.n	80072ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80072b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	1ad2      	subs	r2, r2, r3
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80072c2:	69b8      	ldr	r0, [r7, #24]
 80072c4:	f000 f908 	bl	80074d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80072c8:	4b1d      	ldr	r3, [pc, #116]	; (8007340 <pvPortMalloc+0x188>)
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	4a1b      	ldr	r2, [pc, #108]	; (8007340 <pvPortMalloc+0x188>)
 80072d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80072d6:	4b1a      	ldr	r3, [pc, #104]	; (8007340 <pvPortMalloc+0x188>)
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	4b1b      	ldr	r3, [pc, #108]	; (8007348 <pvPortMalloc+0x190>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d203      	bcs.n	80072ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80072e2:	4b17      	ldr	r3, [pc, #92]	; (8007340 <pvPortMalloc+0x188>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a18      	ldr	r2, [pc, #96]	; (8007348 <pvPortMalloc+0x190>)
 80072e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80072ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	4b13      	ldr	r3, [pc, #76]	; (800733c <pvPortMalloc+0x184>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	431a      	orrs	r2, r3
 80072f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80072f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fa:	2200      	movs	r2, #0
 80072fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80072fe:	4b13      	ldr	r3, [pc, #76]	; (800734c <pvPortMalloc+0x194>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3301      	adds	r3, #1
 8007304:	4a11      	ldr	r2, [pc, #68]	; (800734c <pvPortMalloc+0x194>)
 8007306:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007308:	f7fe ff98 	bl	800623c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	f003 0307 	and.w	r3, r3, #7
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00a      	beq.n	800732c <pvPortMalloc+0x174>
	__asm volatile
 8007316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731a:	f383 8811 	msr	BASEPRI, r3
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	f3bf 8f4f 	dsb	sy
 8007326:	60fb      	str	r3, [r7, #12]
}
 8007328:	bf00      	nop
 800732a:	e7fe      	b.n	800732a <pvPortMalloc+0x172>
	return pvReturn;
 800732c:	69fb      	ldr	r3, [r7, #28]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3728      	adds	r7, #40	; 0x28
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	20003fc0 	.word	0x20003fc0
 800733c:	20003fd4 	.word	0x20003fd4
 8007340:	20003fc4 	.word	0x20003fc4
 8007344:	20003fb8 	.word	0x20003fb8
 8007348:	20003fc8 	.word	0x20003fc8
 800734c:	20003fcc 	.word	0x20003fcc

08007350 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d04d      	beq.n	80073fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007362:	2308      	movs	r3, #8
 8007364:	425b      	negs	r3, r3
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	4413      	add	r3, r2
 800736a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	4b24      	ldr	r3, [pc, #144]	; (8007408 <vPortFree+0xb8>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4013      	ands	r3, r2
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10a      	bne.n	8007394 <vPortFree+0x44>
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	60fb      	str	r3, [r7, #12]
}
 8007390:	bf00      	nop
 8007392:	e7fe      	b.n	8007392 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00a      	beq.n	80073b2 <vPortFree+0x62>
	__asm volatile
 800739c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a0:	f383 8811 	msr	BASEPRI, r3
 80073a4:	f3bf 8f6f 	isb	sy
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	60bb      	str	r3, [r7, #8]
}
 80073ae:	bf00      	nop
 80073b0:	e7fe      	b.n	80073b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	685a      	ldr	r2, [r3, #4]
 80073b6:	4b14      	ldr	r3, [pc, #80]	; (8007408 <vPortFree+0xb8>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4013      	ands	r3, r2
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d01e      	beq.n	80073fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d11a      	bne.n	80073fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	4b0e      	ldr	r3, [pc, #56]	; (8007408 <vPortFree+0xb8>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	43db      	mvns	r3, r3
 80073d2:	401a      	ands	r2, r3
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80073d8:	f7fe ff22 	bl	8006220 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	685a      	ldr	r2, [r3, #4]
 80073e0:	4b0a      	ldr	r3, [pc, #40]	; (800740c <vPortFree+0xbc>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4413      	add	r3, r2
 80073e6:	4a09      	ldr	r2, [pc, #36]	; (800740c <vPortFree+0xbc>)
 80073e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80073ea:	6938      	ldr	r0, [r7, #16]
 80073ec:	f000 f874 	bl	80074d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80073f0:	4b07      	ldr	r3, [pc, #28]	; (8007410 <vPortFree+0xc0>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3301      	adds	r3, #1
 80073f6:	4a06      	ldr	r2, [pc, #24]	; (8007410 <vPortFree+0xc0>)
 80073f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80073fa:	f7fe ff1f 	bl	800623c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80073fe:	bf00      	nop
 8007400:	3718      	adds	r7, #24
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	20003fd4 	.word	0x20003fd4
 800740c:	20003fc4 	.word	0x20003fc4
 8007410:	20003fd0 	.word	0x20003fd0

08007414 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800741a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800741e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007420:	4b27      	ldr	r3, [pc, #156]	; (80074c0 <prvHeapInit+0xac>)
 8007422:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f003 0307 	and.w	r3, r3, #7
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00c      	beq.n	8007448 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	3307      	adds	r3, #7
 8007432:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f023 0307 	bic.w	r3, r3, #7
 800743a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	4a1f      	ldr	r2, [pc, #124]	; (80074c0 <prvHeapInit+0xac>)
 8007444:	4413      	add	r3, r2
 8007446:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800744c:	4a1d      	ldr	r2, [pc, #116]	; (80074c4 <prvHeapInit+0xb0>)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007452:	4b1c      	ldr	r3, [pc, #112]	; (80074c4 <prvHeapInit+0xb0>)
 8007454:	2200      	movs	r2, #0
 8007456:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	4413      	add	r3, r2
 800745e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007460:	2208      	movs	r2, #8
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	1a9b      	subs	r3, r3, r2
 8007466:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f023 0307 	bic.w	r3, r3, #7
 800746e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	4a15      	ldr	r2, [pc, #84]	; (80074c8 <prvHeapInit+0xb4>)
 8007474:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007476:	4b14      	ldr	r3, [pc, #80]	; (80074c8 <prvHeapInit+0xb4>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2200      	movs	r2, #0
 800747c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800747e:	4b12      	ldr	r3, [pc, #72]	; (80074c8 <prvHeapInit+0xb4>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2200      	movs	r2, #0
 8007484:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	1ad2      	subs	r2, r2, r3
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007494:	4b0c      	ldr	r3, [pc, #48]	; (80074c8 <prvHeapInit+0xb4>)
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	4a0a      	ldr	r2, [pc, #40]	; (80074cc <prvHeapInit+0xb8>)
 80074a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	4a09      	ldr	r2, [pc, #36]	; (80074d0 <prvHeapInit+0xbc>)
 80074aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80074ac:	4b09      	ldr	r3, [pc, #36]	; (80074d4 <prvHeapInit+0xc0>)
 80074ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80074b2:	601a      	str	r2, [r3, #0]
}
 80074b4:	bf00      	nop
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr
 80074c0:	200003b8 	.word	0x200003b8
 80074c4:	20003fb8 	.word	0x20003fb8
 80074c8:	20003fc0 	.word	0x20003fc0
 80074cc:	20003fc8 	.word	0x20003fc8
 80074d0:	20003fc4 	.word	0x20003fc4
 80074d4:	20003fd4 	.word	0x20003fd4

080074d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80074e0:	4b28      	ldr	r3, [pc, #160]	; (8007584 <prvInsertBlockIntoFreeList+0xac>)
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	e002      	b.n	80074ec <prvInsertBlockIntoFreeList+0x14>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	60fb      	str	r3, [r7, #12]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d8f7      	bhi.n	80074e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	4413      	add	r3, r2
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	429a      	cmp	r2, r3
 8007506:	d108      	bne.n	800751a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	441a      	add	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	441a      	add	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	429a      	cmp	r2, r3
 800752c:	d118      	bne.n	8007560 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	4b15      	ldr	r3, [pc, #84]	; (8007588 <prvInsertBlockIntoFreeList+0xb0>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	429a      	cmp	r2, r3
 8007538:	d00d      	beq.n	8007556 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685a      	ldr	r2, [r3, #4]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	441a      	add	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	e008      	b.n	8007568 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007556:	4b0c      	ldr	r3, [pc, #48]	; (8007588 <prvInsertBlockIntoFreeList+0xb0>)
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	601a      	str	r2, [r3, #0]
 800755e:	e003      	b.n	8007568 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	429a      	cmp	r2, r3
 800756e:	d002      	beq.n	8007576 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007576:	bf00      	nop
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	20003fb8 	.word	0x20003fb8
 8007588:	20003fc0 	.word	0x20003fc0

0800758c <__libc_init_array>:
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	4d0d      	ldr	r5, [pc, #52]	; (80075c4 <__libc_init_array+0x38>)
 8007590:	4c0d      	ldr	r4, [pc, #52]	; (80075c8 <__libc_init_array+0x3c>)
 8007592:	1b64      	subs	r4, r4, r5
 8007594:	10a4      	asrs	r4, r4, #2
 8007596:	2600      	movs	r6, #0
 8007598:	42a6      	cmp	r6, r4
 800759a:	d109      	bne.n	80075b0 <__libc_init_array+0x24>
 800759c:	4d0b      	ldr	r5, [pc, #44]	; (80075cc <__libc_init_array+0x40>)
 800759e:	4c0c      	ldr	r4, [pc, #48]	; (80075d0 <__libc_init_array+0x44>)
 80075a0:	f000 f82e 	bl	8007600 <_init>
 80075a4:	1b64      	subs	r4, r4, r5
 80075a6:	10a4      	asrs	r4, r4, #2
 80075a8:	2600      	movs	r6, #0
 80075aa:	42a6      	cmp	r6, r4
 80075ac:	d105      	bne.n	80075ba <__libc_init_array+0x2e>
 80075ae:	bd70      	pop	{r4, r5, r6, pc}
 80075b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075b4:	4798      	blx	r3
 80075b6:	3601      	adds	r6, #1
 80075b8:	e7ee      	b.n	8007598 <__libc_init_array+0xc>
 80075ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80075be:	4798      	blx	r3
 80075c0:	3601      	adds	r6, #1
 80075c2:	e7f2      	b.n	80075aa <__libc_init_array+0x1e>
 80075c4:	080076b8 	.word	0x080076b8
 80075c8:	080076b8 	.word	0x080076b8
 80075cc:	080076b8 	.word	0x080076b8
 80075d0:	080076bc 	.word	0x080076bc

080075d4 <memcpy>:
 80075d4:	440a      	add	r2, r1
 80075d6:	4291      	cmp	r1, r2
 80075d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80075dc:	d100      	bne.n	80075e0 <memcpy+0xc>
 80075de:	4770      	bx	lr
 80075e0:	b510      	push	{r4, lr}
 80075e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075ea:	4291      	cmp	r1, r2
 80075ec:	d1f9      	bne.n	80075e2 <memcpy+0xe>
 80075ee:	bd10      	pop	{r4, pc}

080075f0 <memset>:
 80075f0:	4402      	add	r2, r0
 80075f2:	4603      	mov	r3, r0
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d100      	bne.n	80075fa <memset+0xa>
 80075f8:	4770      	bx	lr
 80075fa:	f803 1b01 	strb.w	r1, [r3], #1
 80075fe:	e7f9      	b.n	80075f4 <memset+0x4>

08007600 <_init>:
 8007600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007602:	bf00      	nop
 8007604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007606:	bc08      	pop	{r3}
 8007608:	469e      	mov	lr, r3
 800760a:	4770      	bx	lr

0800760c <_fini>:
 800760c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760e:	bf00      	nop
 8007610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007612:	bc08      	pop	{r3}
 8007614:	469e      	mov	lr, r3
 8007616:	4770      	bx	lr
